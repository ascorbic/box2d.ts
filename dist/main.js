!function(t){var e={};function i(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(s,o,function(e){return t[e]}.bind(null,o));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=54)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.b2Assert=function(t,...e){if(!t)throw new Error(...e)},e.b2Maybe=function(t,e){return void 0!==t?t:e},e.b2_maxFloat=1e37,e.b2_epsilon=1e-5,e.b2_epsilon_sq=e.b2_epsilon*e.b2_epsilon,e.b2_pi=3.14159265359,e.b2_maxManifoldPoints=2,e.b2_maxPolygonVertices=8,e.b2_aabbExtension=.1,e.b2_aabbMultiplier=2,e.b2_linearSlop=.008,e.b2_angularSlop=2/180*e.b2_pi,e.b2_polygonRadius=2*e.b2_linearSlop,e.b2_maxSubSteps=8,e.b2_maxTOIContacts=32,e.b2_velocityThreshold=1,e.b2_maxLinearCorrection=.2,e.b2_maxAngularCorrection=8/180*e.b2_pi,e.b2_maxTranslation=2,e.b2_maxTranslationSquared=e.b2_maxTranslation*e.b2_maxTranslation,e.b2_maxRotation=.5*e.b2_pi,e.b2_maxRotationSquared=e.b2_maxRotation*e.b2_maxRotation,e.b2_baumgarte=.2,e.b2_toiBaumgarte=.75,e.b2_invalidParticleIndex=-1,e.b2_maxParticleIndex=2147483647,e.b2_particleStride=.75,e.b2_minParticleWeight=1,e.b2_maxParticlePressure=.25,e.b2_maxParticleForce=.5,e.b2_maxTriadDistance=2,e.b2_maxTriadDistanceSquared=e.b2_maxTriadDistance*e.b2_maxTriadDistance,e.b2_minParticleSystemBufferCapacity=256,e.b2_barrierCollisionTime=2.5,e.b2_timeToSleep=.5,e.b2_linearSleepTolerance=.01,e.b2_angularSleepTolerance=2/180*e.b2_pi,e.b2Alloc=function(t){return null},e.b2Free=function(t){},e.b2Log=function(t,...e){};class s{constructor(t=0,e=0,i=0){this.major=0,this.minor=0,this.revision=0,this.major=t,this.minor=e,this.revision=i}toString(){return this.major+"."+this.minor+"."+this.revision}}e.b2Version=s,e.b2_version=new s(2,3,2),e.b2_branch="master",e.b2_commit="fbf51801d80fc389d43dc46524520e89043b6faf",e.b2ParseInt=function(t){return parseInt(t,10)},e.b2ParseUInt=function(t){return Math.abs(parseInt(t,10))},e.b2MakeArray=function(t,e){const i=[];for(let s=0;s<t;++s)i.push(e(s));return i},e.b2MakeNullArray=function(t){const e=[];for(let i=0;i<t;++i)e.push(null);return e},e.b2MakeNumberArray=function(t,e=0){const i=[];for(let s=0;s<t;++s)i.push(e);return i}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0);function o(t,e,i){return t<e?e:t>i?i:t}e.b2_pi_over_180=s.b2_pi/180,e.b2_180_over_pi=180/s.b2_pi,e.b2_two_pi=2*s.b2_pi,e.b2Abs=Math.abs,e.b2Min=Math.min,e.b2Max=Math.max,e.b2Clamp=o,e.b2Swap=function(t,e){const i=t[0];t[0]=e[0],e[0]=i},e.b2IsValid=isFinite,e.b2Sq=function(t){return t*t},e.b2InvSqrt=function(t){return 1/Math.sqrt(t)},e.b2Sqrt=Math.sqrt,e.b2Pow=Math.pow,e.b2DegToRad=function(t){return t*e.b2_pi_over_180},e.b2RadToDeg=function(t){return t*e.b2_180_over_pi},e.b2Cos=Math.cos,e.b2Sin=Math.sin,e.b2Acos=Math.acos,e.b2Asin=Math.asin,e.b2Atan2=Math.atan2,e.b2NextPowerOfTwo=function(t){return t|=t>>1&2147483647,t|=t>>2&1073741823,t|=t>>4&268435455,t|=t>>8&16777215,1+(t|=t>>16&65535)},e.b2IsPowerOfTwo=function(t){return t>0&&0==(t&t-1)},e.b2Random=function(){return 2*Math.random()-1},e.b2RandomRange=function(t,e){return(e-t)*Math.random()+t};class n{constructor(t=0,e=0){this.x=t,this.y=e}Clone(){return new n(this.x,this.y)}SetZero(){return this.x=0,this.y=0,this}Set(t,e){return this.x=t,this.y=e,this}Copy(t){return this.x=t.x,this.y=t.y,this}SelfAdd(t){return this.x+=t.x,this.y+=t.y,this}SelfAddXY(t,e){return this.x+=t,this.y+=e,this}SelfSub(t){return this.x-=t.x,this.y-=t.y,this}SelfSubXY(t,e){return this.x-=t,this.y-=e,this}SelfMul(t){return this.x*=t,this.y*=t,this}SelfMulAdd(t,e){return this.x+=t*e.x,this.y+=t*e.y,this}SelfMulSub(t,e){return this.x-=t*e.x,this.y-=t*e.y,this}Dot(t){return this.x*t.x+this.y*t.y}Cross(t){return this.x*t.y-this.y*t.x}Length(){const t=this.x,e=this.y;return Math.sqrt(t*t+e*e)}LengthSquared(){const t=this.x,e=this.y;return t*t+e*e}Normalize(){const t=this.Length();if(t>=s.b2_epsilon){const e=1/t;this.x*=e,this.y*=e}return t}SelfNormalize(){const t=this.Length();if(t>=s.b2_epsilon){const e=1/t;this.x*=e,this.y*=e}return this}SelfRotate(t){const e=Math.cos(t),i=Math.sin(t),s=this.x;return this.x=e*s-i*this.y,this.y=i*s+e*this.y,this}IsValid(){return isFinite(this.x)&&isFinite(this.y)}SelfCrossVS(t){const e=this.x;return this.x=t*this.y,this.y=-t*e,this}SelfCrossSV(t){const e=this.x;return this.x=-t*this.y,this.y=t*e,this}SelfMinV(t){return this.x=e.b2Min(this.x,t.x),this.y=e.b2Min(this.y,t.y),this}SelfMaxV(t){return this.x=e.b2Max(this.x,t.x),this.y=e.b2Max(this.y,t.y),this}SelfAbs(){return this.x=e.b2Abs(this.x),this.y=e.b2Abs(this.y),this}SelfNeg(){return this.x=-this.x,this.y=-this.y,this}SelfSkew(){const t=this.x;return this.x=-this.y,this.y=t,this}static MakeArray(t){return s.b2MakeArray(t,t=>new n)}static AbsV(t,i){return i.x=e.b2Abs(t.x),i.y=e.b2Abs(t.y),i}static MinV(t,i,s){return s.x=e.b2Min(t.x,i.x),s.y=e.b2Min(t.y,i.y),s}static MaxV(t,i,s){return s.x=e.b2Max(t.x,i.x),s.y=e.b2Max(t.y,i.y),s}static ClampV(t,e,i,s){return s.x=o(t.x,e.x,i.x),s.y=o(t.y,e.y,i.y),s}static RotateV(t,e,i){const s=t.x,o=t.y,n=Math.cos(e),r=Math.sin(e);return i.x=n*s-r*o,i.y=r*s+n*o,i}static DotVV(t,e){return t.x*e.x+t.y*e.y}static CrossVV(t,e){return t.x*e.y-t.y*e.x}static CrossVS(t,e,i){const s=t.x;return i.x=e*t.y,i.y=-e*s,i}static CrossVOne(t,e){const i=t.x;return e.x=t.y,e.y=-i,e}static CrossSV(t,e,i){const s=e.x;return i.x=-t*e.y,i.y=t*s,i}static CrossOneV(t,e){const i=t.x;return e.x=-t.y,e.y=i,e}static AddVV(t,e,i){return i.x=t.x+e.x,i.y=t.y+e.y,i}static SubVV(t,e,i){return i.x=t.x-e.x,i.y=t.y-e.y,i}static MulSV(t,e,i){return i.x=e.x*t,i.y=e.y*t,i}static MulVS(t,e,i){return i.x=t.x*e,i.y=t.y*e,i}static AddVMulSV(t,e,i,s){return s.x=t.x+e*i.x,s.y=t.y+e*i.y,s}static SubVMulSV(t,e,i,s){return s.x=t.x-e*i.x,s.y=t.y-e*i.y,s}static AddVCrossSV(t,e,i,s){const o=i.x;return s.x=t.x-e*i.y,s.y=t.y+e*o,s}static MidVV(t,e,i){return i.x=.5*(t.x+e.x),i.y=.5*(t.y+e.y),i}static ExtVV(t,e,i){return i.x=.5*(e.x-t.x),i.y=.5*(e.y-t.y),i}static IsEqualToV(t,e){return t.x===e.x&&t.y===e.y}static DistanceVV(t,e){const i=t.x-e.x,s=t.y-e.y;return Math.sqrt(i*i+s*s)}static DistanceSquaredVV(t,e){const i=t.x-e.x,s=t.y-e.y;return i*i+s*s}static NegV(t,e){return e.x=-t.x,e.y=-t.y,e}}n.ZERO=new n(0,0),n.UNITX=new n(1,0),n.UNITY=new n(0,1),n.s_t0=new n,n.s_t1=new n,n.s_t2=new n,n.s_t3=new n,e.b2Vec2=n,e.b2Vec2_zero=new n(0,0);class r{constructor(t=0,e=0,i=0){this.x=t,this.y=e,this.z=i}Clone(){return new r(this.x,this.y,this.z)}SetZero(){return this.x=0,this.y=0,this.z=0,this}SetXYZ(t,e,i){return this.x=t,this.y=e,this.z=i,this}Copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}SelfNeg(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}SelfAdd(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}SelfAddXYZ(t,e,i){return this.x+=t,this.y+=e,this.z+=i,this}SelfSub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}SelfSubXYZ(t,e,i){return this.x-=t,this.y-=e,this.z-=i,this}SelfMul(t){return this.x*=t,this.y*=t,this.z*=t,this}static DotV3V3(t,e){return t.x*e.x+t.y*e.y+t.z*e.z}static CrossV3V3(t,e,i){const s=t.x,o=t.y,n=t.z,r=e.x,a=e.y,l=e.z;return i.x=o*l-n*a,i.y=n*r-s*l,i.z=s*a-o*r,i}}r.ZERO=new r(0,0,0),r.s_t0=new r,e.b2Vec3=r;class a{constructor(){this.ex=new n(1,0),this.ey=new n(0,1)}Clone(){return(new a).Copy(this)}static FromVV(t,e){return(new a).SetVV(t,e)}static FromSSSS(t,e,i,s){return(new a).SetSSSS(t,e,i,s)}static FromAngle(t){return(new a).SetAngle(t)}SetSSSS(t,e,i,s){return this.ex.Set(t,i),this.ey.Set(e,s),this}SetVV(t,e){return this.ex.Copy(t),this.ey.Copy(e),this}SetAngle(t){const e=Math.cos(t),i=Math.sin(t);return this.ex.Set(e,i),this.ey.Set(-i,e),this}Copy(t){return this.ex.Copy(t.ex),this.ey.Copy(t.ey),this}SetIdentity(){return this.ex.Set(1,0),this.ey.Set(0,1),this}SetZero(){return this.ex.SetZero(),this.ey.SetZero(),this}GetAngle(){return Math.atan2(this.ex.y,this.ex.x)}GetInverse(t){const e=this.ex.x,i=this.ey.x,s=this.ex.y,o=this.ey.y;let n=e*o-i*s;return 0!==n&&(n=1/n),t.ex.x=n*o,t.ey.x=-n*i,t.ex.y=-n*s,t.ey.y=n*e,t}Solve(t,e,i){const s=this.ex.x,o=this.ey.x,n=this.ex.y,r=this.ey.y;let a=s*r-o*n;return 0!==a&&(a=1/a),i.x=a*(r*t-o*e),i.y=a*(s*e-n*t),i}SelfAbs(){return this.ex.SelfAbs(),this.ey.SelfAbs(),this}SelfInv(){return this.GetInverse(this),this}SelfAddM(t){return this.ex.SelfAdd(t.ex),this.ey.SelfAdd(t.ey),this}SelfSubM(t){return this.ex.SelfSub(t.ex),this.ey.SelfSub(t.ey),this}static AbsM(t,i){const s=t.ex,o=t.ey;return i.ex.x=e.b2Abs(s.x),i.ex.y=e.b2Abs(s.y),i.ey.x=e.b2Abs(o.x),i.ey.y=e.b2Abs(o.y),i}static MulMV(t,e,i){const s=t.ex,o=t.ey,n=e.x,r=e.y;return i.x=s.x*n+o.x*r,i.y=s.y*n+o.y*r,i}static MulTMV(t,e,i){const s=t.ex,o=t.ey,n=e.x,r=e.y;return i.x=s.x*n+s.y*r,i.y=o.x*n+o.y*r,i}static AddMM(t,e,i){const s=t.ex,o=t.ey,n=e.ex,r=e.ey;return i.ex.x=s.x+n.x,i.ex.y=s.y+n.y,i.ey.x=o.x+r.x,i.ey.y=o.y+r.y,i}static MulMM(t,e,i){const s=t.ex.x,o=t.ex.y,n=t.ey.x,r=t.ey.y,a=e.ex.x,l=e.ex.y,m=e.ey.x,c=e.ey.y;return i.ex.x=s*a+n*l,i.ex.y=o*a+r*l,i.ey.x=s*m+n*c,i.ey.y=o*m+r*c,i}static MulTMM(t,e,i){const s=t.ex.x,o=t.ex.y,n=t.ey.x,r=t.ey.y,a=e.ex.x,l=e.ex.y,m=e.ey.x,c=e.ey.y;return i.ex.x=s*a+o*l,i.ex.y=n*a+r*l,i.ey.x=s*m+o*c,i.ey.y=n*m+r*c,i}}a.IDENTITY=new a,e.b2Mat22=a;class l{constructor(){this.ex=new r(1,0,0),this.ey=new r(0,1,0),this.ez=new r(0,0,1)}Clone(){return(new l).Copy(this)}SetVVV(t,e,i){return this.ex.Copy(t),this.ey.Copy(e),this.ez.Copy(i),this}Copy(t){return this.ex.Copy(t.ex),this.ey.Copy(t.ey),this.ez.Copy(t.ez),this}SetIdentity(){return this.ex.SetXYZ(1,0,0),this.ey.SetXYZ(0,1,0),this.ez.SetXYZ(0,0,1),this}SetZero(){return this.ex.SetZero(),this.ey.SetZero(),this.ez.SetZero(),this}SelfAddM(t){return this.ex.SelfAdd(t.ex),this.ey.SelfAdd(t.ey),this.ez.SelfAdd(t.ez),this}Solve33(t,e,i,s){const o=this.ex.x,n=this.ex.y,r=this.ex.z,a=this.ey.x,l=this.ey.y,m=this.ey.z,c=this.ez.x,_=this.ez.y,h=this.ez.z;let u=o*(l*h-m*_)+n*(m*c-a*h)+r*(a*_-l*c);return 0!==u&&(u=1/u),s.x=u*(t*(l*h-m*_)+e*(m*c-a*h)+i*(a*_-l*c)),s.y=u*(o*(e*h-i*_)+n*(i*c-t*h)+r*(t*_-e*c)),s.z=u*(o*(l*i-m*e)+n*(m*t-a*i)+r*(a*e-l*t)),s}Solve22(t,e,i){const s=this.ex.x,o=this.ey.x,n=this.ex.y,r=this.ey.y;let a=s*r-o*n;return 0!==a&&(a=1/a),i.x=a*(r*t-o*e),i.y=a*(s*e-n*t),i}GetInverse22(t){const e=this.ex.x,i=this.ey.x,s=this.ex.y,o=this.ey.y;let n=e*o-i*s;0!==n&&(n=1/n),t.ex.x=n*o,t.ey.x=-n*i,t.ex.z=0,t.ex.y=-n*s,t.ey.y=n*e,t.ey.z=0,t.ez.x=0,t.ez.y=0,t.ez.z=0}GetSymInverse33(t){let e=r.DotV3V3(this.ex,r.CrossV3V3(this.ey,this.ez,r.s_t0));0!==e&&(e=1/e);const i=this.ex.x,s=this.ey.x,o=this.ez.x,n=this.ey.y,a=this.ez.y,l=this.ez.z;t.ex.x=e*(n*l-a*a),t.ex.y=e*(o*a-s*l),t.ex.z=e*(s*a-o*n),t.ey.x=t.ex.y,t.ey.y=e*(i*l-o*o),t.ey.z=e*(o*s-i*a),t.ez.x=t.ex.z,t.ez.y=t.ey.z,t.ez.z=e*(i*n-s*s)}static MulM33V3(t,e,i){const s=e.x,o=e.y,n=e.z;return i.x=t.ex.x*s+t.ey.x*o+t.ez.x*n,i.y=t.ex.y*s+t.ey.y*o+t.ez.y*n,i.z=t.ex.z*s+t.ey.z*o+t.ez.z*n,i}static MulM33XYZ(t,e,i,s,o){return o.x=t.ex.x*e+t.ey.x*i+t.ez.x*s,o.y=t.ex.y*e+t.ey.y*i+t.ez.y*s,o.z=t.ex.z*e+t.ey.z*i+t.ez.z*s,o}static MulM33V2(t,e,i){const s=e.x,o=e.y;return i.x=t.ex.x*s+t.ey.x*o,i.y=t.ex.y*s+t.ey.y*o,i}static MulM33XY(t,e,i,s){return s.x=t.ex.x*e+t.ey.x*i,s.y=t.ex.y*e+t.ey.y*i,s}}l.IDENTITY=new l,e.b2Mat33=l;class m{constructor(t=0){this.s=0,this.c=1,t&&(this.s=Math.sin(t),this.c=Math.cos(t))}Clone(){return(new m).Copy(this)}Copy(t){return this.s=t.s,this.c=t.c,this}SetAngle(t){return this.s=Math.sin(t),this.c=Math.cos(t),this}SetIdentity(){return this.s=0,this.c=1,this}GetAngle(){return Math.atan2(this.s,this.c)}GetXAxis(t){return t.x=this.c,t.y=this.s,t}GetYAxis(t){return t.x=-this.s,t.y=this.c,t}static MulRR(t,e,i){const s=t.c,o=t.s,n=e.c,r=e.s;return i.s=o*n+s*r,i.c=s*n-o*r,i}static MulTRR(t,e,i){const s=t.c,o=t.s,n=e.c,r=e.s;return i.s=s*r-o*n,i.c=s*n+o*r,i}static MulRV(t,e,i){const s=t.c,o=t.s,n=e.x,r=e.y;return i.x=s*n-o*r,i.y=o*n+s*r,i}static MulTRV(t,e,i){const s=t.c,o=t.s,n=e.x,r=e.y;return i.x=s*n+o*r,i.y=-o*n+s*r,i}}m.IDENTITY=new m,e.b2Rot=m;class c{constructor(){this.p=new n,this.q=new m}Clone(){return(new c).Copy(this)}Copy(t){return this.p.Copy(t.p),this.q.Copy(t.q),this}SetIdentity(){return this.p.SetZero(),this.q.SetIdentity(),this}SetPositionRotation(t,e){return this.p.Copy(t),this.q.Copy(e),this}SetPositionAngle(t,e){return this.p.Copy(t),this.q.SetAngle(e),this}SetPosition(t){return this.p.Copy(t),this}SetPositionXY(t,e){return this.p.Set(t,e),this}SetRotation(t){return this.q.Copy(t),this}SetRotationAngle(t){return this.q.SetAngle(t),this}GetPosition(){return this.p}GetRotation(){return this.q}GetRotationAngle(){return this.q.GetAngle()}GetAngle(){return this.q.GetAngle()}static MulXV(t,e,i){const s=t.q.c,o=t.q.s,n=e.x,r=e.y;return i.x=s*n-o*r+t.p.x,i.y=o*n+s*r+t.p.y,i}static MulTXV(t,e,i){const s=t.q.c,o=t.q.s,n=e.x-t.p.x,r=e.y-t.p.y;return i.x=s*n+o*r,i.y=-o*n+s*r,i}static MulXX(t,e,i){return m.MulRR(t.q,e.q,i.q),n.AddVV(m.MulRV(t.q,e.p,i.p),t.p,i.p),i}static MulTXX(t,e,i){return m.MulTRR(t.q,e.q,i.q),m.MulTRV(t.q,n.SubVV(e.p,t.p,i.p),i.p),i}}c.IDENTITY=new c,e.b2Transform=c;class _{constructor(){this.localCenter=new n,this.c0=new n,this.c=new n,this.a0=0,this.a=0,this.alpha0=0}Clone(){return(new _).Copy(this)}Copy(t){return this.localCenter.Copy(t.localCenter),this.c0.Copy(t.c0),this.c.Copy(t.c),this.a0=t.a0,this.a=t.a,this.alpha0=t.alpha0,this}GetTransform(t,e){const i=1-e;t.p.x=i*this.c0.x+e*this.c.x,t.p.y=i*this.c0.y+e*this.c.y;const s=i*this.a0+e*this.a;return t.q.SetAngle(s),t.p.SelfSub(m.MulRV(t.q,this.localCenter,n.s_t0)),t}Advance(t){const e=(t-this.alpha0)/(1-this.alpha0),i=1-e;this.c0.x=i*this.c0.x+e*this.c.x,this.c0.y=i*this.c0.y+e*this.c.y,this.a0=i*this.a0+e*this.a,this.alpha0=t}Normalize(){const t=e.b2_two_pi*Math.floor(this.a0/e.b2_two_pi);this.a0-=t,this.a-=t}}e.b2Sweep=_},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(17);var r,a,l;!function(t){t[t.e_vertex=0]="e_vertex",t[t.e_face=1]="e_face"}(r=e.b2ContactFeatureType||(e.b2ContactFeatureType={}));class m{constructor(){this._key=0,this._key_invalid=!1,this._indexA=0,this._indexB=0,this._typeA=0,this._typeB=0}get key(){return this._key_invalid&&(this._key_invalid=!1,this._key=this._indexA|this._indexB<<8|this._typeA<<16|this._typeB<<24),this._key}set key(t){this._key=t,this._key_invalid=!1,this._indexA=255&this._key,this._indexB=this._key>>8&255,this._typeA=this._key>>16&255,this._typeB=this._key>>24&255}get indexA(){return this._indexA}set indexA(t){this._indexA=t,this._key_invalid=!0}get indexB(){return this._indexB}set indexB(t){this._indexB=t,this._key_invalid=!0}get typeA(){return this._typeA}set typeA(t){this._typeA=t,this._key_invalid=!0}get typeB(){return this._typeB}set typeB(t){this._typeB=t,this._key_invalid=!0}}e.b2ContactFeature=m;class c{constructor(){this.cf=new m}Copy(t){return this.key=t.key,this}Clone(){return(new c).Copy(this)}get key(){return this.cf.key}set key(t){this.cf.key=t}}e.b2ContactID=c;class _{constructor(){this.localPoint=new o.b2Vec2,this.normalImpulse=0,this.tangentImpulse=0,this.id=new c}static MakeArray(t){return s.b2MakeArray(t,t=>new _)}Reset(){this.localPoint.SetZero(),this.normalImpulse=0,this.tangentImpulse=0,this.id.key=0}Copy(t){return this.localPoint.Copy(t.localPoint),this.normalImpulse=t.normalImpulse,this.tangentImpulse=t.tangentImpulse,this.id.Copy(t.id),this}}e.b2ManifoldPoint=_,function(t){t[t.e_unknown=-1]="e_unknown",t[t.e_circles=0]="e_circles",t[t.e_faceA=1]="e_faceA",t[t.e_faceB=2]="e_faceB"}(a=e.b2ManifoldType||(e.b2ManifoldType={}));class h{constructor(){this.points=_.MakeArray(s.b2_maxManifoldPoints),this.localNormal=new o.b2Vec2,this.localPoint=new o.b2Vec2,this.type=a.e_unknown,this.pointCount=0}Reset(){for(let t=0;t<s.b2_maxManifoldPoints;++t)this.points[t].Reset();this.localNormal.SetZero(),this.localPoint.SetZero(),this.type=a.e_unknown,this.pointCount=0}Copy(t){this.pointCount=t.pointCount;for(let e=0;e<s.b2_maxManifoldPoints;++e)this.points[e].Copy(t.points[e]);return this.localNormal.Copy(t.localNormal),this.localPoint.Copy(t.localPoint),this.type=t.type,this}Clone(){return(new h).Copy(this)}}e.b2Manifold=h;class u{constructor(){this.normal=new o.b2Vec2,this.points=o.b2Vec2.MakeArray(s.b2_maxManifoldPoints),this.separations=s.b2MakeNumberArray(s.b2_maxManifoldPoints)}Initialize(t,e,i,n,r){if(0!==t.pointCount)switch(t.type){case a.e_circles:{this.normal.Set(1,0);const a=o.b2Transform.MulXV(e,t.localPoint,u.Initialize_s_pointA),l=o.b2Transform.MulXV(n,t.points[0].localPoint,u.Initialize_s_pointB);o.b2Vec2.DistanceSquaredVV(a,l)>s.b2_epsilon_sq&&o.b2Vec2.SubVV(l,a,this.normal).SelfNormalize();const m=o.b2Vec2.AddVMulSV(a,i,this.normal,u.Initialize_s_cA),c=o.b2Vec2.SubVMulSV(l,r,this.normal,u.Initialize_s_cB);o.b2Vec2.MidVV(m,c,this.points[0]),this.separations[0]=o.b2Vec2.DotVV(o.b2Vec2.SubVV(c,m,o.b2Vec2.s_t0),this.normal);break}case a.e_faceA:{o.b2Rot.MulRV(e.q,t.localNormal,this.normal);const s=o.b2Transform.MulXV(e,t.localPoint,u.Initialize_s_planePoint);for(let e=0;e<t.pointCount;++e){const a=o.b2Transform.MulXV(n,t.points[e].localPoint,u.Initialize_s_clipPoint),l=i-o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,s,o.b2Vec2.s_t0),this.normal),m=o.b2Vec2.AddVMulSV(a,l,this.normal,u.Initialize_s_cA),c=o.b2Vec2.SubVMulSV(a,r,this.normal,u.Initialize_s_cB);o.b2Vec2.MidVV(m,c,this.points[e]),this.separations[e]=o.b2Vec2.DotVV(o.b2Vec2.SubVV(c,m,o.b2Vec2.s_t0),this.normal)}break}case a.e_faceB:{o.b2Rot.MulRV(n.q,t.localNormal,this.normal);const s=o.b2Transform.MulXV(n,t.localPoint,u.Initialize_s_planePoint);for(let n=0;n<t.pointCount;++n){const a=o.b2Transform.MulXV(e,t.points[n].localPoint,u.Initialize_s_clipPoint),l=r-o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,s,o.b2Vec2.s_t0),this.normal),m=o.b2Vec2.AddVMulSV(a,l,this.normal,u.Initialize_s_cB),c=o.b2Vec2.SubVMulSV(a,i,this.normal,u.Initialize_s_cA);o.b2Vec2.MidVV(c,m,this.points[n]),this.separations[n]=o.b2Vec2.DotVV(o.b2Vec2.SubVV(c,m,o.b2Vec2.s_t0),this.normal)}this.normal.SelfNeg();break}}}}u.Initialize_s_pointA=new o.b2Vec2,u.Initialize_s_pointB=new o.b2Vec2,u.Initialize_s_cA=new o.b2Vec2,u.Initialize_s_cB=new o.b2Vec2,u.Initialize_s_planePoint=new o.b2Vec2,u.Initialize_s_clipPoint=new o.b2Vec2,e.b2WorldManifold=u,function(t){t[t.b2_nullState=0]="b2_nullState",t[t.b2_addState=1]="b2_addState",t[t.b2_persistState=2]="b2_persistState",t[t.b2_removeState=3]="b2_removeState"}(l=e.b2PointState||(e.b2PointState={})),e.b2GetPointStates=function(t,e,i,o){let n;for(n=0;n<i.pointCount;++n){const e=i.points[n].id.key;t[n]=l.b2_removeState;for(let i=0,s=o.pointCount;i<s;++i)if(o.points[i].id.key===e){t[n]=l.b2_persistState;break}}for(;n<s.b2_maxManifoldPoints;++n)t[n]=l.b2_nullState;for(n=0;n<o.pointCount;++n){const t=o.points[n].id.key;e[n]=l.b2_addState;for(let s=0,o=i.pointCount;s<o;++s)if(i.points[s].id.key===t){e[n]=l.b2_persistState;break}}for(;n<s.b2_maxManifoldPoints;++n)e[n]=l.b2_nullState};class d{constructor(){this.v=new o.b2Vec2,this.id=new c}static MakeArray(t){return s.b2MakeArray(t,t=>new d)}Copy(t){return this.v.Copy(t.v),this.id.Copy(t.id),this}}e.b2ClipVertex=d;e.b2RayCastInput=class{constructor(){this.p1=new o.b2Vec2,this.p2=new o.b2Vec2,this.maxFraction=1}Copy(t){return this.p1.Copy(t.p1),this.p2.Copy(t.p2),this.maxFraction=t.maxFraction,this}};e.b2RayCastOutput=class{constructor(){this.normal=new o.b2Vec2,this.fraction=0}Copy(t){return this.normal.Copy(t.normal),this.fraction=t.fraction,this}};e.b2AABB=class{constructor(){this.lowerBound=new o.b2Vec2,this.upperBound=new o.b2Vec2,this.m_cache_center=new o.b2Vec2,this.m_cache_extent=new o.b2Vec2}Copy(t){return this.lowerBound.Copy(t.lowerBound),this.upperBound.Copy(t.upperBound),this}IsValid(){const t=this.upperBound.x-this.lowerBound.x,e=this.upperBound.y-this.lowerBound.y;let i=t>=0&&e>=0;return i=i&&this.lowerBound.IsValid()&&this.upperBound.IsValid()}GetCenter(){return o.b2Vec2.MidVV(this.lowerBound,this.upperBound,this.m_cache_center)}GetExtents(){return o.b2Vec2.ExtVV(this.lowerBound,this.upperBound,this.m_cache_extent)}GetPerimeter(){return 2*(this.upperBound.x-this.lowerBound.x+(this.upperBound.y-this.lowerBound.y))}Combine1(t){return this.lowerBound.x=o.b2Min(this.lowerBound.x,t.lowerBound.x),this.lowerBound.y=o.b2Min(this.lowerBound.y,t.lowerBound.y),this.upperBound.x=o.b2Max(this.upperBound.x,t.upperBound.x),this.upperBound.y=o.b2Max(this.upperBound.y,t.upperBound.y),this}Combine2(t,e){return this.lowerBound.x=o.b2Min(t.lowerBound.x,e.lowerBound.x),this.lowerBound.y=o.b2Min(t.lowerBound.y,e.lowerBound.y),this.upperBound.x=o.b2Max(t.upperBound.x,e.upperBound.x),this.upperBound.y=o.b2Max(t.upperBound.y,e.upperBound.y),this}static Combine(t,e,i){return i.Combine2(t,e),i}Contains(t){let e=!0;return e=(e=(e=(e=e&&this.lowerBound.x<=t.lowerBound.x)&&this.lowerBound.y<=t.lowerBound.y)&&t.upperBound.x<=this.upperBound.x)&&t.upperBound.y<=this.upperBound.y}RayCast(t,e){let i=-s.b2_maxFloat,n=s.b2_maxFloat;const r=e.p1.x,a=e.p1.y,l=e.p2.x-e.p1.x,m=e.p2.y-e.p1.y,c=o.b2Abs(l),_=o.b2Abs(m),h=t.normal;if(c<s.b2_epsilon){if(r<this.lowerBound.x||this.upperBound.x<r)return!1}else{const t=1/l;let e=(this.lowerBound.x-r)*t,s=(this.upperBound.x-r)*t,a=-1;if(e>s){const t=e;e=s,s=t,a=1}if(e>i&&(h.x=a,h.y=0,i=e),i>(n=o.b2Min(n,s)))return!1}if(_<s.b2_epsilon){if(a<this.lowerBound.y||this.upperBound.y<a)return!1}else{const t=1/m;let e=(this.lowerBound.y-a)*t,s=(this.upperBound.y-a)*t,r=-1;if(e>s){const t=e;e=s,s=t,r=1}if(e>i&&(h.x=0,h.y=r,i=e),i>(n=o.b2Min(n,s)))return!1}return!(i<0||e.maxFraction<i||(t.fraction=i,0))}TestContain(t){return!(t.x<this.lowerBound.x||this.upperBound.x<t.x||t.y<this.lowerBound.y||this.upperBound.y<t.y)}TestOverlap(t){const e=t.lowerBound.x-this.upperBound.x,i=t.lowerBound.y-this.upperBound.y,s=this.lowerBound.x-t.upperBound.x,o=this.lowerBound.y-t.upperBound.y;return!(e>0||i>0||s>0||o>0)}},e.b2TestOverlapAABB=function(t,e){const i=e.lowerBound.x-t.upperBound.x,s=e.lowerBound.y-t.upperBound.y,o=t.lowerBound.x-e.upperBound.x,n=t.lowerBound.y-e.upperBound.y;return!(i>0||s>0||o>0||n>0)},e.b2ClipSegmentToLine=function(t,e,i,s,n){let a=0;const l=e[0],m=e[1],c=o.b2Vec2.DotVV(i,l.v)-s,_=o.b2Vec2.DotVV(i,m.v)-s;if(c<=0&&t[a++].Copy(l),_<=0&&t[a++].Copy(m),c*_<0){const e=c/(c-_),i=t[a].v;i.x=l.v.x+e*(m.v.x-l.v.x),i.y=l.v.y+e*(m.v.y-l.v.y);const s=t[a].id;s.cf.indexA=n,s.cf.indexB=l.id.cf.indexB,s.cf.typeA=r.e_vertex,s.cf.typeB=r.e_face,++a}return a};const b=new n.b2DistanceInput,p=new n.b2SimplexCache,f=new n.b2DistanceOutput;e.b2TestOverlapShape=function(t,e,i,o,r,a){const l=b.Reset();l.proxyA.SetShape(t,e),l.proxyB.SetShape(i,o),l.transformA.Copy(r),l.transformB.Copy(a),l.useRadii=!0;const m=p.Reset();m.count=0;const c=f.Reset();return n.b2Distance(c,m,l),c.distance<10*s.b2_epsilon}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1);var n;!function(t){t[t.e_unknownJoint=0]="e_unknownJoint",t[t.e_revoluteJoint=1]="e_revoluteJoint",t[t.e_prismaticJoint=2]="e_prismaticJoint",t[t.e_distanceJoint=3]="e_distanceJoint",t[t.e_pulleyJoint=4]="e_pulleyJoint",t[t.e_mouseJoint=5]="e_mouseJoint",t[t.e_gearJoint=6]="e_gearJoint",t[t.e_wheelJoint=7]="e_wheelJoint",t[t.e_weldJoint=8]="e_weldJoint",t[t.e_frictionJoint=9]="e_frictionJoint",t[t.e_ropeJoint=10]="e_ropeJoint",t[t.e_motorJoint=11]="e_motorJoint",t[t.e_areaJoint=12]="e_areaJoint"}(n=e.b2JointType||(e.b2JointType={})),function(t){t[t.e_inactiveLimit=0]="e_inactiveLimit",t[t.e_atLowerLimit=1]="e_atLowerLimit",t[t.e_atUpperLimit=2]="e_atUpperLimit",t[t.e_equalLimits=3]="e_equalLimits"}(e.b2LimitState||(e.b2LimitState={}));e.b2Jacobian=class{constructor(){this.linear=new o.b2Vec2,this.angularA=0,this.angularB=0}SetZero(){return this.linear.SetZero(),this.angularA=0,this.angularB=0,this}Set(t,e,i){return this.linear.Copy(t),this.angularA=e,this.angularB=i,this}};class r{constructor(t,e){this.prev=null,this.next=null,this.joint=t,this.other=e}}e.b2JointEdge=r;e.b2JointDef=class{constructor(t){this.type=n.e_unknownJoint,this.userData=null,this.collideConnected=!1,this.type=t}};e.b2Joint=class{constructor(t){this.m_type=n.e_unknownJoint,this.m_prev=null,this.m_next=null,this.m_index=0,this.m_islandFlag=!1,this.m_collideConnected=!1,this.m_userData=null,this.m_type=t.type,this.m_edgeA=new r(this,t.bodyB),this.m_edgeB=new r(this,t.bodyA),this.m_bodyA=t.bodyA,this.m_bodyB=t.bodyB,this.m_collideConnected=s.b2Maybe(t.collideConnected,!1),this.m_userData=t.userData}GetType(){return this.m_type}GetBodyA(){return this.m_bodyA}GetBodyB(){return this.m_bodyB}GetNext(){return this.m_next}GetUserData(){return this.m_userData}SetUserData(t){this.m_userData=t}IsActive(){return this.m_bodyA.IsActive()&&this.m_bodyB.IsActive()}GetCollideConnected(){return this.m_collideConnected}Dump(t){t("// Dump is not supported for this joint type.\n")}ShiftOrigin(t){}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1);var o;e.b2MassData=class{constructor(){this.mass=0,this.center=new s.b2Vec2(0,0),this.I=0}},function(t){t[t.e_unknown=-1]="e_unknown",t[t.e_circleShape=0]="e_circleShape",t[t.e_edgeShape=1]="e_edgeShape",t[t.e_polygonShape=2]="e_polygonShape",t[t.e_chainShape=3]="e_chainShape",t[t.e_shapeTypeCount=4]="e_shapeTypeCount"}(o=e.b2ShapeType||(e.b2ShapeType={}));e.b2Shape=class{constructor(t,e){this.m_type=o.e_unknown,this.m_radius=0,this.m_type=t,this.m_radius=e}Copy(t){return this.m_radius=t.m_radius,this}GetType(){return this.m_type}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(2),r=i(2),a=i(18);function l(t,e){return o.b2Sqrt(t*e)}function m(t,e){return t>e?t:e}e.b2MixFriction=l,e.b2MixRestitution=m;class c{constructor(t){this.prev=null,this.next=null,this.contact=t}}e.b2ContactEdge=c;class _{constructor(){this.m_islandFlag=!1,this.m_touchingFlag=!1,this.m_enabledFlag=!1,this.m_filterFlag=!1,this.m_bulletHitFlag=!1,this.m_toiFlag=!1,this.m_prev=null,this.m_next=null,this.m_indexA=0,this.m_indexB=0,this.m_manifold=new n.b2Manifold,this.m_toiCount=0,this.m_toi=0,this.m_friction=0,this.m_restitution=0,this.m_tangentSpeed=0,this.m_oldManifold=new n.b2Manifold,this.m_nodeA=new c(this),this.m_nodeB=new c(this)}GetManifold(){return this.m_manifold}GetWorldManifold(t){const e=this.m_fixtureA.GetBody(),i=this.m_fixtureB.GetBody(),s=this.m_fixtureA.GetShape(),o=this.m_fixtureB.GetShape();t.Initialize(this.m_manifold,e.GetTransform(),s.m_radius,i.GetTransform(),o.m_radius)}IsTouching(){return this.m_touchingFlag}SetEnabled(t){this.m_enabledFlag=t}IsEnabled(){return this.m_enabledFlag}GetNext(){return this.m_next}GetFixtureA(){return this.m_fixtureA}GetChildIndexA(){return this.m_indexA}GetFixtureB(){return this.m_fixtureB}GetChildIndexB(){return this.m_indexB}FlagForFiltering(){this.m_filterFlag=!0}SetFriction(t){this.m_friction=t}GetFriction(){return this.m_friction}ResetFriction(){this.m_friction=l(this.m_fixtureA.m_friction,this.m_fixtureB.m_friction)}SetRestitution(t){this.m_restitution=t}GetRestitution(){return this.m_restitution}ResetRestitution(){this.m_restitution=m(this.m_fixtureA.m_restitution,this.m_fixtureB.m_restitution)}SetTangentSpeed(t){this.m_tangentSpeed=t}GetTangentSpeed(){return this.m_tangentSpeed}Reset(t,e,i,s){this.m_islandFlag=!1,this.m_touchingFlag=!1,this.m_enabledFlag=!0,this.m_filterFlag=!1,this.m_bulletHitFlag=!1,this.m_toiFlag=!1,this.m_fixtureA=t,this.m_fixtureB=i,this.m_indexA=e,this.m_indexB=s,this.m_manifold.pointCount=0,this.m_prev=null,this.m_next=null,delete this.m_nodeA.contact,this.m_nodeA.prev=null,this.m_nodeA.next=null,delete this.m_nodeA.other,delete this.m_nodeB.contact,this.m_nodeB.prev=null,this.m_nodeB.next=null,delete this.m_nodeB.other,this.m_toiCount=0,this.m_friction=l(this.m_fixtureA.m_friction,this.m_fixtureB.m_friction),this.m_restitution=m(this.m_fixtureA.m_restitution,this.m_fixtureB.m_restitution)}Update(t){const e=this.m_oldManifold;this.m_oldManifold=this.m_manifold,this.m_manifold=e,this.m_enabledFlag=!0;let i=!1;const s=this.m_touchingFlag,o=this.m_fixtureA.IsSensor(),n=this.m_fixtureB.IsSensor(),a=o||n,l=this.m_fixtureA.GetBody(),m=this.m_fixtureB.GetBody(),c=l.GetTransform(),_=m.GetTransform();if(a){const t=this.m_fixtureA.GetShape(),e=this.m_fixtureB.GetShape();i=r.b2TestOverlapShape(t,this.m_indexA,e,this.m_indexB,c,_),this.m_manifold.pointCount=0}else{this.Evaluate(this.m_manifold,c,_),i=this.m_manifold.pointCount>0;for(let t=0;t<this.m_manifold.pointCount;++t){const e=this.m_manifold.points[t];e.normalImpulse=0,e.tangentImpulse=0;const i=e.id;for(let t=0;t<this.m_oldManifold.pointCount;++t){const s=this.m_oldManifold.points[t];if(s.id.key===i.key){e.normalImpulse=s.normalImpulse,e.tangentImpulse=s.tangentImpulse;break}}}i!==s&&(l.SetAwake(!0),m.SetAwake(!0))}this.m_touchingFlag=i,!s&&i&&t&&t.BeginContact(this),s&&!i&&t&&t.EndContact(this),!a&&i&&t&&t.PreSolve(this,this.m_oldManifold)}ComputeTOI(t,e){const i=_.ComputeTOI_s_input;i.proxyA.SetShape(this.m_fixtureA.GetShape(),this.m_indexA),i.proxyB.SetShape(this.m_fixtureB.GetShape(),this.m_indexB),i.sweepA.Copy(t),i.sweepB.Copy(e),i.tMax=s.b2_linearSlop;const o=_.ComputeTOI_s_output;return a.b2TimeOfImpact(o,i),o.t}}_.ComputeTOI_s_input=new a.b2TOIInput,_.ComputeTOI_s_output=new a.b2TOIOutput,e.b2Contact=_},function(t,e,i){"use strict";function s(t){for(var i in t)e.hasOwnProperty(i)||(e[i]=t[i])}Object.defineProperty(e,"__esModule",{value:!0}),s(i(0)),s(i(1)),s(i(7)),s(i(14)),s(i(23)),s(i(55)),s(i(56)),s(i(2)),s(i(17)),s(i(24)),s(i(25)),s(i(18)),s(i(19)),s(i(26)),s(i(9)),s(i(4)),s(i(57)),s(i(58)),s(i(10)),s(i(59)),s(i(27)),s(i(11)),s(i(60)),s(i(12)),s(i(48)),s(i(13)),s(i(39)),s(i(5)),s(i(40)),s(i(49)),s(i(41)),s(i(42)),s(i(43)),s(i(44)),s(i(45)),s(i(46)),s(i(47)),s(i(3)),s(i(28)),s(i(20)),s(i(29)),s(i(30)),s(i(31)),s(i(32)),s(i(33)),s(i(34)),s(i(35)),s(i(36)),s(i(37)),s(i(38)),s(i(8)),s(i(63)),s(i(64)),s(i(65)),s(i(66)),s(i(67)),s(i(21)),s(i(51)),s(i(50)),s(i(68))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t=.5,e=.5,i=.5,s=1){this.r=t,this.g=e,this.b=i,this.a=s}Clone(){return(new s).Copy(this)}Copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this.a=t.a,this}IsEqual(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}IsZero(){return 0===this.r&&0===this.g&&0===this.b&&0===this.a}Set(t,e,i,s=this.a){this.SetRGBA(t,e,i,s)}SetByteRGB(t,e,i){return this.r=t/255,this.g=e/255,this.b=i/255,this}SetByteRGBA(t,e,i,s){return this.r=t/255,this.g=e/255,this.b=i/255,this.a=s/255,this}SetRGB(t,e,i){return this.r=t,this.g=e,this.b=i,this}SetRGBA(t,e,i,s){return this.r=t,this.g=e,this.b=i,this.a=s,this}SelfAdd(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this.a+=t.a,this}Add(t,e){return e.r=this.r+t.r,e.g=this.g+t.g,e.b=this.b+t.b,e.a=this.a+t.a,e}SelfSub(t){return this.r-=t.r,this.g-=t.g,this.b-=t.b,this.a-=t.a,this}Sub(t,e){return e.r=this.r-t.r,e.g=this.g-t.g,e.b=this.b-t.b,e.a=this.a-t.a,e}SelfMul(t){return this.r*=t,this.g*=t,this.b*=t,this.a*=t,this}Mul(t,e){return e.r=this.r*t,e.g=this.g*t,e.b=this.b*t,e.a=this.a*t,e}Mix(t,e){s.MixColors(this,t,e)}static MixColors(t,e,i){const s=i*(e.r-t.r),o=i*(e.g-t.g),n=i*(e.b-t.b),r=i*(e.a-t.a);t.r+=s,t.g+=o,t.b+=n,t.a+=r,e.r-=s,e.g-=o,e.b-=n,e.a-=r}MakeStyleString(t=this.a){return s.MakeStyleString(this.r,this.g,this.b,t)}static MakeStyleString(t,e,i,s=1){return t*=255,e*=255,i*=255,s<1?`rgba(${t},${e},${i},${s})`:`rgb(${t},${e},${i})`}}s.ZERO=new s(0,0,0,0),s.RED=new s(1,0,0),s.GREEN=new s(0,1,0),s.BLUE=new s(0,0,1),e.b2Color=s,function(t){t[t.e_none=0]="e_none",t[t.e_shapeBit=1]="e_shapeBit",t[t.e_jointBit=2]="e_jointBit",t[t.e_aabbBit=4]="e_aabbBit",t[t.e_pairBit=8]="e_pairBit",t[t.e_centerOfMassBit=16]="e_centerOfMassBit",t[t.e_particleBit=32]="e_particleBit",t[t.e_controllerBit=64]="e_controllerBit",t[t.e_all=63]="e_all"}(e.b2DrawFlags||(e.b2DrawFlags={}));e.b2Draw=class{constructor(){this.m_drawFlags=0}SetFlags(t){this.m_drawFlags=t}GetFlags(){return this.m_drawFlags}AppendFlags(t){this.m_drawFlags|=t}ClearFlags(t){this.m_drawFlags&=~t}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t,e){this.prevBody=null,this.nextBody=null,this.prevController=null,this.nextController=null,this.controller=t,this.body=e}}e.b2ControllerEdge=s;e.b2Controller=class{constructor(){this.m_bodyList=null,this.m_bodyCount=0,this.m_prev=null,this.m_next=null}GetNext(){return this.m_next}GetPrev(){return this.m_prev}GetBodyList(){return this.m_bodyList}AddBody(t){const e=new s(this,t);e.nextBody=this.m_bodyList,e.prevBody=null,this.m_bodyList&&(this.m_bodyList.prevBody=e),this.m_bodyList=e,++this.m_bodyCount,e.nextController=t.m_controllerList,e.prevController=null,t.m_controllerList&&(t.m_controllerList.prevController=e),t.m_controllerList=e,++t.m_controllerCount}RemoveBody(t){if(this.m_bodyCount<=0)throw new Error;let e=this.m_bodyList;for(;e&&e.body!==t;)e=e.nextBody;if(null===e)throw new Error;e.prevBody&&(e.prevBody.nextBody=e.nextBody),e.nextBody&&(e.nextBody.prevBody=e.prevBody),this.m_bodyList===e&&(this.m_bodyList=e.nextBody),--this.m_bodyCount,e.nextController&&(e.nextController.prevController=e.prevController),e.prevController&&(e.prevController.nextController=e.nextController),t.m_controllerList===e&&(t.m_controllerList=e.nextController),--t.m_controllerCount}Clear(){for(;this.m_bodyList;)this.RemoveBody(this.m_bodyList.body);this.m_bodyCount=0}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(2),r=i(2),a=new o.b2Vec2,l=new o.b2Vec2,m=new o.b2Vec2,c=new o.b2Vec2,_=new o.b2Vec2,h=new o.b2Vec2,u=new o.b2Vec2,d=new n.b2ContactID;var b,p;e.b2CollideEdgeAndCircle=function(t,e,i,s,b){t.pointCount=0;const p=o.b2Transform.MulTXV(i,o.b2Transform.MulXV(b,s.m_p,o.b2Vec2.s_t0),a),f=e.m_vertex1,y=e.m_vertex2,V=o.b2Vec2.SubVV(y,f,l),x=o.b2Vec2.DotVV(V,o.b2Vec2.SubVV(y,p,o.b2Vec2.s_t0)),S=o.b2Vec2.DotVV(V,o.b2Vec2.SubVV(p,f,o.b2Vec2.s_t0)),B=e.m_radius+s.m_radius,C=d;if(C.cf.indexB=0,C.cf.typeB=n.b2ContactFeatureType.e_vertex,S<=0){const i=f,a=o.b2Vec2.SubVV(p,i,m);if(o.b2Vec2.DotVV(a,a)>B*B)return;if(e.m_hasVertex0){const t=e.m_vertex0,i=f,s=o.b2Vec2.SubVV(i,t,c);if(o.b2Vec2.DotVV(s,o.b2Vec2.SubVV(i,p,o.b2Vec2.s_t0))>0)return}return C.cf.indexA=0,C.cf.typeA=n.b2ContactFeatureType.e_vertex,t.pointCount=1,t.type=r.b2ManifoldType.e_circles,t.localNormal.SetZero(),t.localPoint.Copy(i),t.points[0].id.Copy(C),void t.points[0].localPoint.Copy(s.m_p)}if(x<=0){const i=y,a=o.b2Vec2.SubVV(p,i,m);if(o.b2Vec2.DotVV(a,a)>B*B)return;if(e.m_hasVertex3){const t=e.m_vertex3,i=y,s=o.b2Vec2.SubVV(t,i,_);if(o.b2Vec2.DotVV(s,o.b2Vec2.SubVV(p,i,o.b2Vec2.s_t0))>0)return}return C.cf.indexA=1,C.cf.typeA=n.b2ContactFeatureType.e_vertex,t.pointCount=1,t.type=r.b2ManifoldType.e_circles,t.localNormal.SetZero(),t.localPoint.Copy(i),t.points[0].id.Copy(C),void t.points[0].localPoint.Copy(s.m_p)}const A=o.b2Vec2.DotVV(V,V),w=h;w.x=1/A*(x*f.x+S*y.x),w.y=1/A*(x*f.y+S*y.y);const g=o.b2Vec2.SubVV(p,w,m);if(o.b2Vec2.DotVV(g,g)>B*B)return;const v=u.Set(-V.y,V.x);o.b2Vec2.DotVV(v,o.b2Vec2.SubVV(p,f,o.b2Vec2.s_t0))<0&&v.Set(-v.x,-v.y),v.Normalize(),C.cf.indexA=0,C.cf.typeA=n.b2ContactFeatureType.e_face,t.pointCount=1,t.type=r.b2ManifoldType.e_faceA,t.localNormal.Copy(v),t.localPoint.Copy(f),t.points[0].id.Copy(C),t.points[0].localPoint.Copy(s.m_p)},function(t){t[t.e_unknown=0]="e_unknown",t[t.e_edgeA=1]="e_edgeA",t[t.e_edgeB=2]="e_edgeB"}(b||(b={}));class f{constructor(){this.type=b.e_unknown,this.index=0,this.separation=0}}class y{constructor(){this.vertices=[],this.normals=[],this.count=0}}!function(t){t[t.e_isolated=0]="e_isolated",t[t.e_concave=1]="e_concave",t[t.e_convex=2]="e_convex"}(p||(p={}));class V{constructor(){this.m_polygonB=new y,this.m_xf=new o.b2Transform,this.m_centroidB=new o.b2Vec2,this.m_v0=new o.b2Vec2,this.m_v1=new o.b2Vec2,this.m_v2=new o.b2Vec2,this.m_v3=new o.b2Vec2,this.m_normal0=new o.b2Vec2,this.m_normal1=new o.b2Vec2,this.m_normal2=new o.b2Vec2,this.m_normal=new o.b2Vec2,this.m_type1=p.e_isolated,this.m_type2=p.e_isolated,this.m_lowerLimit=new o.b2Vec2,this.m_upperLimit=new o.b2Vec2,this.m_radius=0,this.m_front=!1}Collide(t,e,i,a,l){o.b2Transform.MulTXX(i,l,this.m_xf),o.b2Transform.MulXV(this.m_xf,a.m_centroid,this.m_centroidB),this.m_v0.Copy(e.m_vertex0),this.m_v1.Copy(e.m_vertex1),this.m_v2.Copy(e.m_vertex2),this.m_v3.Copy(e.m_vertex3);const m=e.m_hasVertex0,c=e.m_hasVertex3,_=o.b2Vec2.SubVV(this.m_v2,this.m_v1,V.s_edge1);_.Normalize(),this.m_normal1.Set(_.y,-_.x);const h=o.b2Vec2.DotVV(this.m_normal1,o.b2Vec2.SubVV(this.m_centroidB,this.m_v1,o.b2Vec2.s_t0));let u=0,d=0,p=!1,f=!1;if(m){const t=o.b2Vec2.SubVV(this.m_v1,this.m_v0,V.s_edge0);t.Normalize(),this.m_normal0.Set(t.y,-t.x),p=o.b2Vec2.CrossVV(t,_)>=0,u=o.b2Vec2.DotVV(this.m_normal0,o.b2Vec2.SubVV(this.m_centroidB,this.m_v0,o.b2Vec2.s_t0))}if(c){const t=o.b2Vec2.SubVV(this.m_v3,this.m_v2,V.s_edge2);t.Normalize(),this.m_normal2.Set(t.y,-t.x),f=o.b2Vec2.CrossVV(_,t)>0,d=o.b2Vec2.DotVV(this.m_normal2,o.b2Vec2.SubVV(this.m_centroidB,this.m_v2,o.b2Vec2.s_t0))}m&&c?p&&f?(this.m_front=u>=0||h>=0||d>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal0),this.m_upperLimit.Copy(this.m_normal2)):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(),this.m_upperLimit.Copy(this.m_normal1).SelfNeg())):p?(this.m_front=u>=0||h>=0&&d>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal0),this.m_upperLimit.Copy(this.m_normal1)):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(),this.m_upperLimit.Copy(this.m_normal1).SelfNeg())):f?(this.m_front=d>=0||u>=0&&h>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal1),this.m_upperLimit.Copy(this.m_normal2)):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(),this.m_upperLimit.Copy(this.m_normal0).SelfNeg())):(this.m_front=u>=0&&h>=0&&d>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal1),this.m_upperLimit.Copy(this.m_normal1)):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(),this.m_upperLimit.Copy(this.m_normal0).SelfNeg())):m?p?(this.m_front=u>=0||h>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal0),this.m_upperLimit.Copy(this.m_normal1).SelfNeg()):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal1),this.m_upperLimit.Copy(this.m_normal1).SelfNeg())):(this.m_front=u>=0&&h>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal1),this.m_upperLimit.Copy(this.m_normal1).SelfNeg()):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal1),this.m_upperLimit.Copy(this.m_normal0).SelfNeg())):c?f?(this.m_front=h>=0||d>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(),this.m_upperLimit.Copy(this.m_normal2)):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(),this.m_upperLimit.Copy(this.m_normal1))):(this.m_front=h>=0&&d>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(),this.m_upperLimit.Copy(this.m_normal1)):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(),this.m_upperLimit.Copy(this.m_normal1))):(this.m_front=h>=0,this.m_front?(this.m_normal.Copy(this.m_normal1),this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(),this.m_upperLimit.Copy(this.m_normal1).SelfNeg()):(this.m_normal.Copy(this.m_normal1).SelfNeg(),this.m_lowerLimit.Copy(this.m_normal1),this.m_upperLimit.Copy(this.m_normal1))),this.m_polygonB.count=a.m_count;for(let t=0;t<a.m_count;++t)this.m_polygonB.vertices.length<=t&&this.m_polygonB.vertices.push(new o.b2Vec2),this.m_polygonB.normals.length<=t&&this.m_polygonB.normals.push(new o.b2Vec2),o.b2Transform.MulXV(this.m_xf,a.m_vertices[t],this.m_polygonB.vertices[t]),o.b2Rot.MulRV(this.m_xf.q,a.m_normals[t],this.m_polygonB.normals[t]);this.m_radius=a.m_radius+e.m_radius,t.pointCount=0;const y=this.ComputeEdgeSeparation(V.s_edgeAxis);if(y.type===b.e_unknown)return;if(y.separation>this.m_radius)return;const x=this.ComputePolygonSeparation(V.s_polygonAxis);if(x.type!==b.e_unknown&&x.separation>this.m_radius)return;let S;S=x.type===b.e_unknown?y:x.separation>.98*y.separation+.001?x:y;const B=V.s_ie,C=V.s_rf;if(S.type===b.e_edgeA){t.type=r.b2ManifoldType.e_faceA;let e=0,i=o.b2Vec2.DotVV(this.m_normal,this.m_polygonB.normals[0]);for(let t=1;t<this.m_polygonB.count;++t){const s=o.b2Vec2.DotVV(this.m_normal,this.m_polygonB.normals[t]);s<i&&(i=s,e=t)}const s=e,a=(s+1)%this.m_polygonB.count,l=B[0];l.v.Copy(this.m_polygonB.vertices[s]),l.id.cf.indexA=0,l.id.cf.indexB=s,l.id.cf.typeA=n.b2ContactFeatureType.e_face,l.id.cf.typeB=n.b2ContactFeatureType.e_vertex;const m=B[1];m.v.Copy(this.m_polygonB.vertices[a]),m.id.cf.indexA=0,m.id.cf.indexB=a,m.id.cf.typeA=n.b2ContactFeatureType.e_face,m.id.cf.typeB=n.b2ContactFeatureType.e_vertex,this.m_front?(C.i1=0,C.i2=1,C.v1.Copy(this.m_v1),C.v2.Copy(this.m_v2),C.normal.Copy(this.m_normal1)):(C.i1=1,C.i2=0,C.v1.Copy(this.m_v2),C.v2.Copy(this.m_v1),C.normal.Copy(this.m_normal1).SelfNeg())}else{t.type=r.b2ManifoldType.e_faceB;const e=B[0];e.v.Copy(this.m_v1),e.id.cf.indexA=0,e.id.cf.indexB=S.index,e.id.cf.typeA=n.b2ContactFeatureType.e_vertex,e.id.cf.typeB=n.b2ContactFeatureType.e_face;const i=B[1];i.v.Copy(this.m_v2),i.id.cf.indexA=0,i.id.cf.indexB=S.index,i.id.cf.typeA=n.b2ContactFeatureType.e_vertex,i.id.cf.typeB=n.b2ContactFeatureType.e_face,C.i1=S.index,C.i2=(C.i1+1)%this.m_polygonB.count,C.v1.Copy(this.m_polygonB.vertices[C.i1]),C.v2.Copy(this.m_polygonB.vertices[C.i2]),C.normal.Copy(this.m_polygonB.normals[C.i1])}C.sideNormal1.Set(C.normal.y,-C.normal.x),C.sideNormal2.Copy(C.sideNormal1).SelfNeg(),C.sideOffset1=o.b2Vec2.DotVV(C.sideNormal1,C.v1),C.sideOffset2=o.b2Vec2.DotVV(C.sideNormal2,C.v2);const A=V.s_clipPoints1,w=V.s_clipPoints2;let g=0;if((g=r.b2ClipSegmentToLine(A,B,C.sideNormal1,C.sideOffset1,C.i1))<s.b2_maxManifoldPoints)return;if((g=r.b2ClipSegmentToLine(w,A,C.sideNormal2,C.sideOffset2,C.i2))<s.b2_maxManifoldPoints)return;S.type===b.e_edgeA?(t.localNormal.Copy(C.normal),t.localPoint.Copy(C.v1)):(t.localNormal.Copy(a.m_normals[C.i1]),t.localPoint.Copy(a.m_vertices[C.i1]));let v=0;for(let e=0;e<s.b2_maxManifoldPoints;++e){let i;if((i=o.b2Vec2.DotVV(C.normal,o.b2Vec2.SubVV(w[e].v,C.v1,o.b2Vec2.s_t0)))<=this.m_radius){const i=t.points[v];S.type===b.e_edgeA?(o.b2Transform.MulTXV(this.m_xf,w[e].v,i.localPoint),i.id=w[e].id):(i.localPoint.Copy(w[e].v),i.id.cf.typeA=w[e].id.cf.typeB,i.id.cf.typeB=w[e].id.cf.typeA,i.id.cf.indexA=w[e].id.cf.indexB,i.id.cf.indexB=w[e].id.cf.indexA),++v}}t.pointCount=v}ComputeEdgeSeparation(t){const e=t;e.type=b.e_edgeA,e.index=this.m_front?0:1,e.separation=s.b2_maxFloat;for(let t=0;t<this.m_polygonB.count;++t){const i=o.b2Vec2.DotVV(this.m_normal,o.b2Vec2.SubVV(this.m_polygonB.vertices[t],this.m_v1,o.b2Vec2.s_t0));i<e.separation&&(e.separation=i)}return e}ComputePolygonSeparation(t){const e=t;e.type=b.e_unknown,e.index=-1,e.separation=-s.b2_maxFloat;const i=V.s_perp.Set(-this.m_normal.y,this.m_normal.x);for(let t=0;t<this.m_polygonB.count;++t){const n=o.b2Vec2.NegV(this.m_polygonB.normals[t],V.s_n),r=o.b2Vec2.DotVV(n,o.b2Vec2.SubVV(this.m_polygonB.vertices[t],this.m_v1,o.b2Vec2.s_t0)),a=o.b2Vec2.DotVV(n,o.b2Vec2.SubVV(this.m_polygonB.vertices[t],this.m_v2,o.b2Vec2.s_t0)),l=o.b2Min(r,a);if(l>this.m_radius)return e.type=b.e_edgeB,e.index=t,e.separation=l,e;if(o.b2Vec2.DotVV(n,i)>=0){if(o.b2Vec2.DotVV(o.b2Vec2.SubVV(n,this.m_upperLimit,o.b2Vec2.s_t0),this.m_normal)<-s.b2_angularSlop)continue}else if(o.b2Vec2.DotVV(o.b2Vec2.SubVV(n,this.m_lowerLimit,o.b2Vec2.s_t0),this.m_normal)<-s.b2_angularSlop)continue;l>e.separation&&(e.type=b.e_edgeB,e.index=t,e.separation=l)}return e}}V.s_edge1=new o.b2Vec2,V.s_edge0=new o.b2Vec2,V.s_edge2=new o.b2Vec2,V.s_ie=r.b2ClipVertex.MakeArray(2),V.s_rf=new class{constructor(){this.i1=0,this.i2=0,this.v1=new o.b2Vec2,this.v2=new o.b2Vec2,this.normal=new o.b2Vec2,this.sideNormal1=new o.b2Vec2,this.sideOffset1=0,this.sideNormal2=new o.b2Vec2,this.sideOffset2=0}},V.s_clipPoints1=r.b2ClipVertex.MakeArray(2),V.s_clipPoints2=r.b2ClipVertex.MakeArray(2),V.s_edgeAxis=new f,V.s_polygonAxis=new f,V.s_n=new o.b2Vec2,V.s_perp=new o.b2Vec2;const x=new V;e.b2CollideEdgeAndPolygon=function(t,e,i,s,o){x.Collide(t,e,i,s,o)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(4);class r extends n.b2Shape{constructor(){super(n.b2ShapeType.e_edgeShape,s.b2_polygonRadius),this.m_vertex1=new o.b2Vec2,this.m_vertex2=new o.b2Vec2,this.m_vertex0=new o.b2Vec2,this.m_vertex3=new o.b2Vec2,this.m_hasVertex0=!1,this.m_hasVertex3=!1}Set(t,e){return this.m_vertex1.Copy(t),this.m_vertex2.Copy(e),this.m_hasVertex0=!1,this.m_hasVertex3=!1,this}Clone(){return(new r).Copy(this)}Copy(t){return super.Copy(t),this.m_vertex1.Copy(t.m_vertex1),this.m_vertex2.Copy(t.m_vertex2),this.m_vertex0.Copy(t.m_vertex0),this.m_vertex3.Copy(t.m_vertex3),this.m_hasVertex0=t.m_hasVertex0,this.m_hasVertex3=t.m_hasVertex3,this}GetChildCount(){return 1}TestPoint(t,e){return!1}ComputeDistance(t,e,i,s){const n=o.b2Transform.MulXV(t,this.m_vertex1,r.ComputeDistance_s_v1),a=o.b2Transform.MulXV(t,this.m_vertex2,r.ComputeDistance_s_v2),l=o.b2Vec2.SubVV(e,n,r.ComputeDistance_s_d),m=o.b2Vec2.SubVV(a,n,r.ComputeDistance_s_s),c=o.b2Vec2.DotVV(l,m);if(c>0){const t=o.b2Vec2.DotVV(m,m);c>t?o.b2Vec2.SubVV(e,a,l):l.SelfMulSub(c/t,m)}return i.Copy(l),i.Normalize()}RayCast(t,e,i,s){const n=o.b2Transform.MulTXV(i,e.p1,r.RayCast_s_p1),a=o.b2Transform.MulTXV(i,e.p2,r.RayCast_s_p2),l=o.b2Vec2.SubVV(a,n,r.RayCast_s_d),m=this.m_vertex1,c=this.m_vertex2,_=o.b2Vec2.SubVV(c,m,r.RayCast_s_e),h=t.normal.Set(_.y,-_.x).SelfNormalize(),u=o.b2Vec2.DotVV(h,o.b2Vec2.SubVV(m,n,o.b2Vec2.s_t0)),d=o.b2Vec2.DotVV(h,l);if(0===d)return!1;const b=u/d;if(b<0||e.maxFraction<b)return!1;const p=o.b2Vec2.AddVMulSV(n,b,l,r.RayCast_s_q),f=o.b2Vec2.SubVV(c,m,r.RayCast_s_r),y=o.b2Vec2.DotVV(f,f);if(0===y)return!1;const V=o.b2Vec2.DotVV(o.b2Vec2.SubVV(p,m,o.b2Vec2.s_t0),f)/y;return!(V<0||1<V)&&(t.fraction=b,o.b2Rot.MulRV(i.q,t.normal,t.normal),u>0&&t.normal.SelfNeg(),!0)}ComputeAABB(t,e,i){const s=o.b2Transform.MulXV(e,this.m_vertex1,r.ComputeAABB_s_v1),n=o.b2Transform.MulXV(e,this.m_vertex2,r.ComputeAABB_s_v2);o.b2Vec2.MinV(s,n,t.lowerBound),o.b2Vec2.MaxV(s,n,t.upperBound);const a=this.m_radius;t.lowerBound.SelfSubXY(a,a),t.upperBound.SelfAddXY(a,a)}ComputeMass(t,e){t.mass=0,o.b2Vec2.MidVV(this.m_vertex1,this.m_vertex2,t.center),t.I=0}SetupDistanceProxy(t,e){t.m_vertices=t.m_buffer,t.m_vertices[0].Copy(this.m_vertex1),t.m_vertices[1].Copy(this.m_vertex2),t.m_count=2,t.m_radius=this.m_radius}ComputeSubmergedArea(t,e,i,s){return s.SetZero(),0}Dump(t){t("    const shape: b2EdgeShape = new b2EdgeShape();\n"),t("    shape.m_radius = %.15f;\n",this.m_radius),t("    shape.m_vertex0.Set(%.15f, %.15f);\n",this.m_vertex0.x,this.m_vertex0.y),t("    shape.m_vertex1.Set(%.15f, %.15f);\n",this.m_vertex1.x,this.m_vertex1.y),t("    shape.m_vertex2.Set(%.15f, %.15f);\n",this.m_vertex2.x,this.m_vertex2.y),t("    shape.m_vertex3.Set(%.15f, %.15f);\n",this.m_vertex3.x,this.m_vertex3.y),t("    shape.m_hasVertex0 = %s;\n",this.m_hasVertex0),t("    shape.m_hasVertex3 = %s;\n",this.m_hasVertex3)}}r.ComputeDistance_s_v1=new o.b2Vec2,r.ComputeDistance_s_v2=new o.b2Vec2,r.ComputeDistance_s_d=new o.b2Vec2,r.ComputeDistance_s_s=new o.b2Vec2,r.RayCast_s_p1=new o.b2Vec2,r.RayCast_s_p2=new o.b2Vec2,r.RayCast_s_d=new o.b2Vec2,r.RayCast_s_e=new o.b2Vec2,r.RayCast_s_q=new o.b2Vec2,r.RayCast_s_r=new o.b2Vec2,r.ComputeAABB_s_v1=new o.b2Vec2,r.ComputeAABB_s_v2=new o.b2Vec2,e.b2EdgeShape=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(4),r=i(27);var a;!function(t){t[t.b2_unknown=-1]="b2_unknown",t[t.b2_staticBody=0]="b2_staticBody",t[t.b2_kinematicBody=1]="b2_kinematicBody",t[t.b2_dynamicBody=2]="b2_dynamicBody"}(a=e.b2BodyType||(e.b2BodyType={}));e.b2BodyDef=class{constructor(){this.type=a.b2_staticBody,this.position=new o.b2Vec2(0,0),this.angle=0,this.linearVelocity=new o.b2Vec2(0,0),this.angularVelocity=0,this.linearDamping=0,this.angularDamping=0,this.allowSleep=!0,this.awake=!0,this.fixedRotation=!1,this.bullet=!1,this.active=!0,this.userData=null,this.gravityScale=1}};class l{constructor(t,e){this.m_type=a.b2_staticBody,this.m_islandFlag=!1,this.m_awakeFlag=!1,this.m_autoSleepFlag=!1,this.m_bulletFlag=!1,this.m_fixedRotationFlag=!1,this.m_activeFlag=!1,this.m_toiFlag=!1,this.m_islandIndex=0,this.m_xf=new o.b2Transform,this.m_xf0=new o.b2Transform,this.m_sweep=new o.b2Sweep,this.m_linearVelocity=new o.b2Vec2,this.m_angularVelocity=0,this.m_force=new o.b2Vec2,this.m_torque=0,this.m_prev=null,this.m_next=null,this.m_fixtureList=null,this.m_fixtureCount=0,this.m_jointList=null,this.m_contactList=null,this.m_mass=1,this.m_invMass=1,this.m_I=0,this.m_invI=0,this.m_linearDamping=0,this.m_angularDamping=0,this.m_gravityScale=1,this.m_sleepTime=0,this.m_userData=null,this.m_controllerList=null,this.m_controllerCount=0,this.m_bulletFlag=s.b2Maybe(t.bullet,!1),this.m_fixedRotationFlag=s.b2Maybe(t.fixedRotation,!1),this.m_autoSleepFlag=s.b2Maybe(t.allowSleep,!0),this.m_awakeFlag=s.b2Maybe(t.awake,!0),this.m_activeFlag=s.b2Maybe(t.active,!0),this.m_world=e,this.m_xf.p.Copy(s.b2Maybe(t.position,o.b2Vec2.ZERO)),this.m_xf.q.SetAngle(s.b2Maybe(t.angle,0)),this.m_xf0.Copy(this.m_xf),this.m_sweep.localCenter.SetZero(),this.m_sweep.c0.Copy(this.m_xf.p),this.m_sweep.c.Copy(this.m_xf.p),this.m_sweep.a0=this.m_sweep.a=this.m_xf.q.GetAngle(),this.m_sweep.alpha0=0,this.m_linearVelocity.Copy(s.b2Maybe(t.linearVelocity,o.b2Vec2.ZERO)),this.m_angularVelocity=s.b2Maybe(t.angularVelocity,0),this.m_linearDamping=s.b2Maybe(t.linearDamping,0),this.m_angularDamping=s.b2Maybe(t.angularDamping,0),this.m_gravityScale=s.b2Maybe(t.gravityScale,1),this.m_force.SetZero(),this.m_torque=0,this.m_sleepTime=0,this.m_type=s.b2Maybe(t.type,a.b2_staticBody),t.type===a.b2_dynamicBody?(this.m_mass=1,this.m_invMass=1):(this.m_mass=0,this.m_invMass=0),this.m_I=0,this.m_invI=0,this.m_userData=t.userData,this.m_fixtureList=null,this.m_fixtureCount=0,this.m_controllerList=null,this.m_controllerCount=0}CreateFixture(t,e=0){return t instanceof n.b2Shape?this.CreateFixtureShapeDensity(t,e):this.CreateFixtureDef(t)}CreateFixtureDef(t){if(this.m_world.IsLocked())throw new Error;const e=new r.b2Fixture(t,this);return e.Create(t),this.m_activeFlag&&e.CreateProxies(this.m_xf),e.m_next=this.m_fixtureList,this.m_fixtureList=e,++this.m_fixtureCount,e.m_density>0&&this.ResetMassData(),this.m_world.m_newFixture=!0,e}CreateFixtureShapeDensity(t,e=0){const i=l.CreateFixtureShapeDensity_s_def;return i.shape=t,i.density=e,this.CreateFixtureDef(i)}DestroyFixture(t){if(this.m_world.IsLocked())throw new Error;let e=this.m_fixtureList,i=null;for(;null!==e;){if(e===t){i?i.m_next=t.m_next:this.m_fixtureList=t.m_next;break}i=e,e=e.m_next}let s=this.m_contactList;for(;s;){const e=s.contact;s=s.next;const i=e.GetFixtureA(),o=e.GetFixtureB();t!==i&&t!==o||this.m_world.m_contactManager.Destroy(e)}this.m_activeFlag&&t.DestroyProxies(),t.m_next=null,t.Destroy(),--this.m_fixtureCount,this.ResetMassData()}SetTransformVec(t,e){this.SetTransformXY(t.x,t.y,e)}SetTransformXY(t,e,i){if(this.m_world.IsLocked())throw new Error;this.m_xf.q.SetAngle(i),this.m_xf.p.Set(t,e),this.m_xf0.Copy(this.m_xf),o.b2Transform.MulXV(this.m_xf,this.m_sweep.localCenter,this.m_sweep.c),this.m_sweep.a=i,this.m_sweep.c0.Copy(this.m_sweep.c),this.m_sweep.a0=i;for(let t=this.m_fixtureList;t;t=t.m_next)t.Synchronize(this.m_xf,this.m_xf);this.m_world.m_contactManager.FindNewContacts()}SetTransform(t){this.SetTransformVec(t.p,t.GetAngle())}GetTransform(){return this.m_xf}GetPosition(){return this.m_xf.p}SetPosition(t){this.SetTransformVec(t,this.GetAngle())}SetPositionXY(t,e){this.SetTransformXY(t,e,this.GetAngle())}GetAngle(){return this.m_sweep.a}SetAngle(t){this.SetTransformVec(this.GetPosition(),t)}GetWorldCenter(){return this.m_sweep.c}GetLocalCenter(){return this.m_sweep.localCenter}SetLinearVelocity(t){this.m_type!==a.b2_staticBody&&(o.b2Vec2.DotVV(t,t)>0&&this.SetAwake(!0),this.m_linearVelocity.Copy(t))}GetLinearVelocity(){return this.m_linearVelocity}SetAngularVelocity(t){this.m_type!==a.b2_staticBody&&(t*t>0&&this.SetAwake(!0),this.m_angularVelocity=t)}GetAngularVelocity(){return this.m_angularVelocity}GetDefinition(t){return t.type=this.GetType(),t.allowSleep=this.m_autoSleepFlag,t.angle=this.GetAngle(),t.angularDamping=this.m_angularDamping,t.gravityScale=this.m_gravityScale,t.angularVelocity=this.m_angularVelocity,t.fixedRotation=this.m_fixedRotationFlag,t.bullet=this.m_bulletFlag,t.awake=this.m_awakeFlag,t.linearDamping=this.m_linearDamping,t.linearVelocity.Copy(this.GetLinearVelocity()),t.position.Copy(this.GetPosition()),t.userData=this.GetUserData(),t}ApplyForce(t,e,i=!0){this.m_type===a.b2_dynamicBody&&(i&&!this.m_awakeFlag&&this.SetAwake(!0),this.m_awakeFlag&&(this.m_force.x+=t.x,this.m_force.y+=t.y,this.m_torque+=(e.x-this.m_sweep.c.x)*t.y-(e.y-this.m_sweep.c.y)*t.x))}ApplyForceToCenter(t,e=!0){this.m_type===a.b2_dynamicBody&&(e&&!this.m_awakeFlag&&this.SetAwake(!0),this.m_awakeFlag&&(this.m_force.x+=t.x,this.m_force.y+=t.y))}ApplyTorque(t,e=!0){this.m_type===a.b2_dynamicBody&&(e&&!this.m_awakeFlag&&this.SetAwake(!0),this.m_awakeFlag&&(this.m_torque+=t))}ApplyLinearImpulse(t,e,i=!0){this.m_type===a.b2_dynamicBody&&(i&&!this.m_awakeFlag&&this.SetAwake(!0),this.m_awakeFlag&&(this.m_linearVelocity.x+=this.m_invMass*t.x,this.m_linearVelocity.y+=this.m_invMass*t.y,this.m_angularVelocity+=this.m_invI*((e.x-this.m_sweep.c.x)*t.y-(e.y-this.m_sweep.c.y)*t.x)))}ApplyLinearImpulseToCenter(t,e=!0){this.m_type===a.b2_dynamicBody&&(e&&!this.m_awakeFlag&&this.SetAwake(!0),this.m_awakeFlag&&(this.m_linearVelocity.x+=this.m_invMass*t.x,this.m_linearVelocity.y+=this.m_invMass*t.y))}ApplyAngularImpulse(t,e=!0){this.m_type===a.b2_dynamicBody&&(e&&!this.m_awakeFlag&&this.SetAwake(!0),this.m_awakeFlag&&(this.m_angularVelocity+=this.m_invI*t))}GetMass(){return this.m_mass}GetInertia(){return this.m_I+this.m_mass*o.b2Vec2.DotVV(this.m_sweep.localCenter,this.m_sweep.localCenter)}GetMassData(t){return t.mass=this.m_mass,t.I=this.m_I+this.m_mass*o.b2Vec2.DotVV(this.m_sweep.localCenter,this.m_sweep.localCenter),t.center.Copy(this.m_sweep.localCenter),t}SetMassData(t){if(this.m_world.IsLocked())throw new Error;if(this.m_type!==a.b2_dynamicBody)return;this.m_invMass=0,this.m_I=0,this.m_invI=0,this.m_mass=t.mass,this.m_mass<=0&&(this.m_mass=1),this.m_invMass=1/this.m_mass,t.I>0&&!this.m_fixedRotationFlag&&(this.m_I=t.I-this.m_mass*o.b2Vec2.DotVV(t.center,t.center),this.m_invI=1/this.m_I);const e=l.SetMassData_s_oldCenter.Copy(this.m_sweep.c);this.m_sweep.localCenter.Copy(t.center),o.b2Transform.MulXV(this.m_xf,this.m_sweep.localCenter,this.m_sweep.c),this.m_sweep.c0.Copy(this.m_sweep.c),o.b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,o.b2Vec2.SubVV(this.m_sweep.c,e,o.b2Vec2.s_t0),this.m_linearVelocity)}ResetMassData(){if(this.m_mass=0,this.m_invMass=0,this.m_I=0,this.m_invI=0,this.m_sweep.localCenter.SetZero(),this.m_type===a.b2_staticBody||this.m_type===a.b2_kinematicBody)return this.m_sweep.c0.Copy(this.m_xf.p),this.m_sweep.c.Copy(this.m_xf.p),void(this.m_sweep.a0=this.m_sweep.a);const t=l.ResetMassData_s_localCenter.SetZero();for(let e=this.m_fixtureList;e;e=e.m_next){if(0===e.m_density)continue;const i=e.GetMassData(l.ResetMassData_s_massData);this.m_mass+=i.mass,t.x+=i.center.x*i.mass,t.y+=i.center.y*i.mass,this.m_I+=i.I}this.m_mass>0?(this.m_invMass=1/this.m_mass,t.x*=this.m_invMass,t.y*=this.m_invMass):(this.m_mass=1,this.m_invMass=1),this.m_I>0&&!this.m_fixedRotationFlag?(this.m_I-=this.m_mass*o.b2Vec2.DotVV(t,t),this.m_invI=1/this.m_I):(this.m_I=0,this.m_invI=0);const e=l.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);this.m_sweep.localCenter.Copy(t),o.b2Transform.MulXV(this.m_xf,this.m_sweep.localCenter,this.m_sweep.c),this.m_sweep.c0.Copy(this.m_sweep.c),o.b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,o.b2Vec2.SubVV(this.m_sweep.c,e,o.b2Vec2.s_t0),this.m_linearVelocity)}GetWorldPoint(t,e){return o.b2Transform.MulXV(this.m_xf,t,e)}GetWorldVector(t,e){return o.b2Rot.MulRV(this.m_xf.q,t,e)}GetLocalPoint(t,e){return o.b2Transform.MulTXV(this.m_xf,t,e)}GetLocalVector(t,e){return o.b2Rot.MulTRV(this.m_xf.q,t,e)}GetLinearVelocityFromWorldPoint(t,e){return o.b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,o.b2Vec2.SubVV(t,this.m_sweep.c,o.b2Vec2.s_t0),e)}GetLinearVelocityFromLocalPoint(t,e){return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(t,e),e)}GetLinearDamping(){return this.m_linearDamping}SetLinearDamping(t){this.m_linearDamping=t}GetAngularDamping(){return this.m_angularDamping}SetAngularDamping(t){this.m_angularDamping=t}GetGravityScale(){return this.m_gravityScale}SetGravityScale(t){this.m_gravityScale=t}SetType(t){if(this.m_world.IsLocked())throw new Error;if(this.m_type===t)return;this.m_type=t,this.ResetMassData(),this.m_type===a.b2_staticBody&&(this.m_linearVelocity.SetZero(),this.m_angularVelocity=0,this.m_sweep.a0=this.m_sweep.a,this.m_sweep.c0.Copy(this.m_sweep.c),this.SynchronizeFixtures()),this.SetAwake(!0),this.m_force.SetZero(),this.m_torque=0;let e=this.m_contactList;for(;e;){const t=e;e=e.next,this.m_world.m_contactManager.Destroy(t.contact)}this.m_contactList=null;for(let t=this.m_fixtureList;t;t=t.m_next)t.TouchProxies()}GetType(){return this.m_type}SetBullet(t){this.m_bulletFlag=t}IsBullet(){return this.m_bulletFlag}SetSleepingAllowed(t){this.m_autoSleepFlag=t,t||this.SetAwake(!0)}IsSleepingAllowed(){return this.m_autoSleepFlag}SetAwake(t){t?(this.m_awakeFlag=!0,this.m_sleepTime=0):(this.m_awakeFlag=!1,this.m_sleepTime=0,this.m_linearVelocity.SetZero(),this.m_angularVelocity=0,this.m_force.SetZero(),this.m_torque=0)}IsAwake(){return this.m_awakeFlag}SetActive(t){if(this.m_world.IsLocked())throw new Error;if(t!==this.IsActive())if(this.m_activeFlag=t,t)for(let t=this.m_fixtureList;t;t=t.m_next)t.CreateProxies(this.m_xf);else{for(let t=this.m_fixtureList;t;t=t.m_next)t.DestroyProxies();let t=this.m_contactList;for(;t;){const e=t;t=t.next,this.m_world.m_contactManager.Destroy(e.contact)}this.m_contactList=null}}IsActive(){return this.m_activeFlag}SetFixedRotation(t){this.m_fixedRotationFlag!==t&&(this.m_fixedRotationFlag=t,this.m_angularVelocity=0,this.ResetMassData())}IsFixedRotation(){return this.m_fixedRotationFlag}GetFixtureList(){return this.m_fixtureList}GetJointList(){return this.m_jointList}GetContactList(){return this.m_contactList}GetNext(){return this.m_next}GetUserData(){return this.m_userData}SetUserData(t){this.m_userData=t}GetWorld(){return this.m_world}Dump(t){const e=this.m_islandIndex;t("{\n"),t("  const bd: b2BodyDef = new b2BodyDef();\n");let i="";switch(this.m_type){case a.b2_staticBody:i="b2BodyType.b2_staticBody";break;case a.b2_kinematicBody:i="b2BodyType.b2_kinematicBody";break;case a.b2_dynamicBody:i="b2BodyType.b2_dynamicBody"}t("  bd.type = %s;\n",i),t("  bd.position.Set(%.15f, %.15f);\n",this.m_xf.p.x,this.m_xf.p.y),t("  bd.angle = %.15f;\n",this.m_sweep.a),t("  bd.linearVelocity.Set(%.15f, %.15f);\n",this.m_linearVelocity.x,this.m_linearVelocity.y),t("  bd.angularVelocity = %.15f;\n",this.m_angularVelocity),t("  bd.linearDamping = %.15f;\n",this.m_linearDamping),t("  bd.angularDamping = %.15f;\n",this.m_angularDamping),t("  bd.allowSleep = %s;\n",this.m_autoSleepFlag?"true":"false"),t("  bd.awake = %s;\n",this.m_awakeFlag?"true":"false"),t("  bd.fixedRotation = %s;\n",this.m_fixedRotationFlag?"true":"false"),t("  bd.bullet = %s;\n",this.m_bulletFlag?"true":"false"),t("  bd.active = %s;\n",this.m_activeFlag?"true":"false"),t("  bd.gravityScale = %.15f;\n",this.m_gravityScale),t("\n"),t("  bodies[%d] = this.m_world.CreateBody(bd);\n",this.m_islandIndex),t("\n");for(let i=this.m_fixtureList;i;i=i.m_next)t("  {\n"),i.Dump(t,e),t("  }\n");t("}\n")}SynchronizeFixtures(){const t=l.SynchronizeFixtures_s_xf1;t.q.SetAngle(this.m_sweep.a0),o.b2Rot.MulRV(t.q,this.m_sweep.localCenter,t.p),o.b2Vec2.SubVV(this.m_sweep.c0,t.p,t.p);for(let e=this.m_fixtureList;e;e=e.m_next)e.Synchronize(t,this.m_xf)}SynchronizeTransform(){this.m_xf.q.SetAngle(this.m_sweep.a),o.b2Rot.MulRV(this.m_xf.q,this.m_sweep.localCenter,this.m_xf.p),o.b2Vec2.SubVV(this.m_sweep.c,this.m_xf.p,this.m_xf.p)}ShouldCollide(t){return(this.m_type!==a.b2_staticBody||t.m_type!==a.b2_staticBody)&&this.ShouldCollideConnected(t)}ShouldCollideConnected(t){for(let e=this.m_jointList;e;e=e.next)if(e.other===t&&!e.joint.m_collideConnected)return!1;return!0}Advance(t){this.m_sweep.Advance(t),this.m_sweep.c.Copy(this.m_sweep.c0),this.m_sweep.a=this.m_sweep.a0,this.m_xf.q.SetAngle(this.m_sweep.a),o.b2Rot.MulRV(this.m_xf.q,this.m_sweep.localCenter,this.m_xf.p),o.b2Vec2.SubVV(this.m_sweep.c,this.m_xf.p,this.m_xf.p)}GetControllerList(){return this.m_controllerList}GetControllerCount(){return this.m_controllerCount}}l.CreateFixtureShapeDensity_s_def=new r.b2FixtureDef,l.SetMassData_s_oldCenter=new o.b2Vec2,l.ResetMassData_s_localCenter=new o.b2Vec2,l.ResetMassData_s_oldCenter=new o.b2Vec2,l.ResetMassData_s_massData=new n.b2MassData,l.SynchronizeFixtures_s_xf1=new o.b2Transform,e.b2Body=l},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(11);e.b2DestructionListener=class{SayGoodbyeJoint(t){}SayGoodbyeFixture(t){}SayGoodbyeParticleGroup(t){}SayGoodbyeParticle(t,e){}};class n{ShouldCollide(t,e){const i=t.GetBody(),s=e.GetBody();if(s.GetType()===o.b2BodyType.b2_staticBody&&i.GetType()===o.b2BodyType.b2_staticBody)return!1;if(!s.ShouldCollideConnected(i))return!1;const n=t.GetFilterData(),r=e.GetFilterData();return n.groupIndex===r.groupIndex&&0!==n.groupIndex?n.groupIndex>0:0!=(n.maskBits&r.categoryBits)&&0!=(n.categoryBits&r.maskBits)}ShouldCollideFixtureParticle(t,e,i){return!0}ShouldCollideParticleParticle(t,e,i){return!0}}n.b2_defaultFilter=new n,e.b2ContactFilter=n;e.b2ContactImpulse=class{constructor(){this.normalImpulses=s.b2MakeNumberArray(s.b2_maxManifoldPoints),this.tangentImpulses=s.b2MakeNumberArray(s.b2_maxManifoldPoints),this.count=0}};class r{BeginContact(t){}EndContact(t){}BeginContactFixtureParticle(t,e){}EndContactFixtureParticle(t,e){}BeginContactParticleParticle(t,e){}EndContactParticleParticle(t,e){}PreSolve(t,e){}PostSolve(t,e){}}r.b2_defaultListener=new r,e.b2ContactListener=r;e.b2QueryCallback=class{ReportFixture(t){return!0}ReportParticle(t,e){return!1}ShouldQueryParticleSystem(t){return!0}};e.b2RayCastCallback=class{ReportFixture(t,e,i,s){return s}ReportParticle(t,e,i,s,o){return 0}ShouldQueryParticleSystem(t){return!0}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1);e.b2Profile=class{constructor(){this.step=0,this.collide=0,this.solve=0,this.solveInit=0,this.solveVelocity=0,this.solvePosition=0,this.broadphase=0,this.solveTOI=0}Reset(){return this.step=0,this.collide=0,this.solve=0,this.solveInit=0,this.solveVelocity=0,this.solvePosition=0,this.broadphase=0,this.solveTOI=0,this}};class n{constructor(){this.dt=0,this.inv_dt=0,this.dtRatio=0,this.velocityIterations=0,this.positionIterations=0,this.particleIterations=0,this.warmStarting=!1}Copy(t){return this.dt=t.dt,this.inv_dt=t.inv_dt,this.dtRatio=t.dtRatio,this.positionIterations=t.positionIterations,this.velocityIterations=t.velocityIterations,this.particleIterations=t.particleIterations,this.warmStarting=t.warmStarting,this}}e.b2TimeStep=n;class r{constructor(){this.c=new o.b2Vec2,this.a=0}static MakeArray(t){return s.b2MakeArray(t,t=>new r)}}e.b2Position=r;class a{constructor(){this.v=new o.b2Vec2,this.w=0}static MakeArray(t){return s.b2MakeArray(t,t=>new a)}}e.b2Velocity=a;e.b2SolverData=class{constructor(){this.step=new n}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.b2Timer=class{constructor(){this.m_start=Date.now()}Reset(){return this.m_start=Date.now(),this}GetMilliseconds(){return Date.now()-this.m_start}};e.b2Counter=class{constructor(){this.m_count=0,this.m_min_count=0,this.m_max_count=0}GetCount(){return this.m_count}GetMinCount(){return this.m_min_count}GetMaxCount(){return this.m_max_count}ResetCount(){const t=this.m_count;return this.m_count=0,t}ResetMinCount(){this.m_min_count=0}ResetMaxCount(){this.m_max_count=0}Increment(){this.m_count++,this.m_max_count<this.m_count&&(this.m_max_count=this.m_count)}Decrement(){this.m_count--,this.m_min_count>this.m_count&&(this.m_min_count=this.m_count)}}},function(t,e,i){"use strict";function s(t){for(var i in t)e.hasOwnProperty(i)||(e[i]=t[i])}Object.defineProperty(e,"__esModule",{value:!0}),s(i(16)),s(i(52)),s(i(69)),s(i(53)),s(i(22)),s(i(70))},function(t,e,i){"use strict";var s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(6));class n{constructor(){this.m_center=new o.b2Vec2(0,20),this.m_extent=25,this.m_zoom=1,this.m_width=1280,this.m_height=800}ConvertScreenToWorld(t,e){return this.ConvertElementToWorld(t,e)}ConvertWorldToScreen(t,e){return this.ConvertWorldToElement(t,e)}ConvertViewportToElement(t,e){const i=t.x+.5*this.m_width,s=.5*this.m_height-t.y;return e.Set(i,s)}ConvertElementToViewport(t,e){const i=t.x-.5*this.m_width,s=.5*this.m_height-t.y;return e.Set(i,s)}ConvertProjectionToViewport(t,e){const i=e.Copy(t);return o.b2Vec2.MulSV(1/this.m_zoom,i,i),o.b2Vec2.MulSV(.5*this.m_height/this.m_extent,t,t),i}ConvertViewportToProjection(t,e){const i=e.Copy(t);return o.b2Vec2.MulSV(2*this.m_extent/this.m_height,i,i),o.b2Vec2.MulSV(this.m_zoom,i,i),i}ConvertWorldToProjection(t,e){const i=e.Copy(t);return o.b2Vec2.SubVV(i,this.m_center,i),i}ConvertProjectionToWorld(t,e){const i=e.Copy(t);return o.b2Vec2.AddVV(this.m_center,i,i),i}ConvertElementToWorld(t,e){const i=this.ConvertElementToViewport(t,e),s=this.ConvertViewportToProjection(i,e);return this.ConvertProjectionToWorld(s,e)}ConvertWorldToElement(t,e){const i=this.ConvertWorldToProjection(t,e),s=this.ConvertProjectionToViewport(i,e);return this.ConvertViewportToElement(s,e)}ConvertElementToProjection(t,e){const i=this.ConvertElementToViewport(t,e);return this.ConvertViewportToProjection(i,e)}}e.Camera=n;class r extends o.b2Draw{constructor(){super(),this.m_ctx=null}PushTransform(t){const e=this.m_ctx;e&&(e.save(),e.translate(t.p.x,t.p.y),e.rotate(t.q.GetAngle()))}PopTransform(t){const e=this.m_ctx;e&&e.restore()}DrawPolygon(t,e,i){const s=this.m_ctx;if(s){s.beginPath(),s.moveTo(t[0].x,t[0].y);for(let i=1;i<e;i++)s.lineTo(t[i].x,t[i].y);s.closePath(),s.strokeStyle=i.MakeStyleString(1),s.stroke()}}DrawSolidPolygon(t,e,i){const s=this.m_ctx;if(s){s.beginPath(),s.moveTo(t[0].x,t[0].y);for(let i=1;i<e;i++)s.lineTo(t[i].x,t[i].y);s.closePath(),s.fillStyle=i.MakeStyleString(.5),s.fill(),s.strokeStyle=i.MakeStyleString(1),s.stroke()}}DrawCircle(t,e,i){const s=this.m_ctx;s&&(s.beginPath(),s.arc(t.x,t.y,e,0,2*o.b2_pi,!0),s.strokeStyle=i.MakeStyleString(1),s.stroke())}DrawSolidCircle(t,e,i,s){const n=this.m_ctx;if(n){const r=t.x,a=t.y;n.beginPath(),n.arc(r,a,e,0,2*o.b2_pi,!0),n.moveTo(r,a),n.lineTo(r+i.x*e,a+i.y*e),n.fillStyle=s.MakeStyleString(.5),n.fill(),n.strokeStyle=s.MakeStyleString(1),n.stroke()}}DrawParticles(t,e,i,s){const n=this.m_ctx;if(n)if(null!==i)for(let r=0;r<s;++r){const s=t[r],a=i[r];n.fillStyle=a.MakeStyleString(),n.beginPath(),n.arc(s.x,s.y,e,0,2*o.b2_pi,!0),n.fill()}else{n.fillStyle="rgba(255,255,255,0.5)";for(let i=0;i<s;++i){const s=t[i];n.beginPath(),n.arc(s.x,s.y,e,0,2*o.b2_pi,!0),n.fill()}}}DrawSegment(t,e,i){const s=this.m_ctx;s&&(s.beginPath(),s.moveTo(t.x,t.y),s.lineTo(e.x,e.y),s.strokeStyle=i.MakeStyleString(1),s.stroke())}DrawTransform(t){const e=this.m_ctx;e&&(this.PushTransform(t),e.beginPath(),e.moveTo(0,0),e.lineTo(1,0),e.strokeStyle=o.b2Color.RED.MakeStyleString(1),e.stroke(),e.beginPath(),e.moveTo(0,0),e.lineTo(0,1),e.strokeStyle=o.b2Color.GREEN.MakeStyleString(1),e.stroke(),this.PopTransform(t))}DrawPoint(t,i,s){const o=this.m_ctx;if(o){o.fillStyle=s.MakeStyleString(),i*=e.g_camera.m_zoom;const n=(i/=e.g_camera.m_extent)/2;o.fillRect(t.x-n,t.y-n,i,i)}}DrawString(t,e,i){const s=this.m_ctx;if(s){s.save(),s.setTransform(1,0,0,1,0,0),s.font="15px DroidSans";const o=r.DrawString_s_color;s.fillStyle=o.MakeStyleString(),s.fillText(i,t,e),s.restore()}}DrawStringWorld(t,i,s){const n=this.m_ctx;if(n){const a=r.DrawStringWorld_s_p.Set(t,i),l=e.g_camera.m_center;o.b2Vec2.SubVV(a,l,a);const m=e.g_camera.m_zoom;o.b2Vec2.MulSV(1/m,a,a);const c=.5*e.g_camera.m_height/e.g_camera.m_extent;o.b2Vec2.MulSV(c,a,a),a.y*=-1;const _=r.DrawStringWorld_s_cc.Set(.5*n.canvas.width,.5*n.canvas.height);o.b2Vec2.AddVV(a,_,a),n.save(),n.setTransform(1,0,0,1,0,0),n.font="15px DroidSans";const h=r.DrawStringWorld_s_color;n.fillStyle=h.MakeStyleString(),n.fillText(s,a.x,a.y),n.restore()}}DrawAABB(t,e){const i=this.m_ctx;if(i){i.strokeStyle=e.MakeStyleString();const s=t.lowerBound.x,o=t.lowerBound.y,n=t.upperBound.x-t.lowerBound.x,r=t.upperBound.y-t.lowerBound.y;i.strokeRect(s,o,n,r)}}}r.DrawString_s_color=new o.b2Color(.9,.6,.6),r.DrawStringWorld_s_p=new o.b2Vec2,r.DrawStringWorld_s_cc=new o.b2Vec2,r.DrawStringWorld_s_color=new o.b2Color(.5,.9,.5),e.DebugDraw=r,e.g_debugDraw=new r,e.g_camera=new n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1);class n{constructor(){this.m_buffer=o.b2Vec2.MakeArray(2),this.m_vertices=this.m_buffer,this.m_count=0,this.m_radius=0}Copy(t){return t.m_vertices===t.m_buffer?(this.m_vertices=this.m_buffer,this.m_buffer[0].Copy(t.m_buffer[0]),this.m_buffer[1].Copy(t.m_buffer[1])):this.m_vertices=t.m_vertices,this.m_count=t.m_count,this.m_radius=t.m_radius,this}Reset(){return this.m_vertices=this.m_buffer,this.m_count=0,this.m_radius=0,this}SetShape(t,e){t.SetupDistanceProxy(this,e)}SetVerticesRadius(t,e,i){this.m_vertices=t,this.m_count=e,this.m_radius=i}GetSupport(t){let e=0,i=o.b2Vec2.DotVV(this.m_vertices[0],t);for(let s=1;s<this.m_count;++s){const n=o.b2Vec2.DotVV(this.m_vertices[s],t);n>i&&(e=s,i=n)}return e}GetSupportVertex(t){let e=0,i=o.b2Vec2.DotVV(this.m_vertices[0],t);for(let s=1;s<this.m_count;++s){const n=o.b2Vec2.DotVV(this.m_vertices[s],t);n>i&&(e=s,i=n)}return this.m_vertices[e]}GetVertexCount(){return this.m_count}GetVertex(t){return this.m_vertices[t]}}e.b2DistanceProxy=n;e.b2SimplexCache=class{constructor(){this.metric=0,this.count=0,this.indexA=[0,0,0],this.indexB=[0,0,0]}Reset(){return this.metric=0,this.count=0,this}};e.b2DistanceInput=class{constructor(){this.proxyA=new n,this.proxyB=new n,this.transformA=new o.b2Transform,this.transformB=new o.b2Transform,this.useRadii=!1}Reset(){return this.proxyA.Reset(),this.proxyB.Reset(),this.transformA.SetIdentity(),this.transformB.SetIdentity(),this.useRadii=!1,this}};e.b2DistanceOutput=class{constructor(){this.pointA=new o.b2Vec2,this.pointB=new o.b2Vec2,this.distance=0,this.iterations=0}Reset(){return this.pointA.SetZero(),this.pointB.SetZero(),this.distance=0,this.iterations=0,this}};e.b2ShapeCastInput=class{constructor(){this.proxyA=new n,this.proxyB=new n,this.transformA=new o.b2Transform,this.transformB=new o.b2Transform,this.translationB=new o.b2Vec2}};e.b2ShapeCastOutput=class{constructor(){this.point=new o.b2Vec2,this.normal=new o.b2Vec2,this.lambda=0,this.iterations=0}},e.b2_gjkCalls=0,e.b2_gjkIters=0,e.b2_gjkMaxIters=0,e.b2_gjk_reset=function(){e.b2_gjkCalls=0,e.b2_gjkIters=0,e.b2_gjkMaxIters=0};class r{constructor(){this.wA=new o.b2Vec2,this.wB=new o.b2Vec2,this.w=new o.b2Vec2,this.a=0,this.indexA=0,this.indexB=0}Copy(t){return this.wA.Copy(t.wA),this.wB.Copy(t.wB),this.w.Copy(t.w),this.a=t.a,this.indexA=t.indexA,this.indexB=t.indexB,this}}e.b2SimplexVertex=r;class a{constructor(){this.m_v1=new r,this.m_v2=new r,this.m_v3=new r,this.m_vertices=[],this.m_count=0,this.m_vertices[0]=this.m_v1,this.m_vertices[1]=this.m_v2,this.m_vertices[2]=this.m_v3}ReadCache(t,e,i,n,r){this.m_count=t.count;const a=this.m_vertices;for(let s=0;s<this.m_count;++s){const l=a[s];l.indexA=t.indexA[s],l.indexB=t.indexB[s];const m=e.GetVertex(l.indexA),c=n.GetVertex(l.indexB);o.b2Transform.MulXV(i,m,l.wA),o.b2Transform.MulXV(r,c,l.wB),o.b2Vec2.SubVV(l.wB,l.wA,l.w),l.a=0}if(this.m_count>1){const e=t.metric,i=this.GetMetric();(i<.5*e||2*e<i||i<s.b2_epsilon)&&(this.m_count=0)}if(0===this.m_count){const t=a[0];t.indexA=0,t.indexB=0;const s=e.GetVertex(0),l=n.GetVertex(0);o.b2Transform.MulXV(i,s,t.wA),o.b2Transform.MulXV(r,l,t.wB),o.b2Vec2.SubVV(t.wB,t.wA,t.w),t.a=1,this.m_count=1}}WriteCache(t){t.metric=this.GetMetric(),t.count=this.m_count;const e=this.m_vertices;for(let i=0;i<this.m_count;++i)t.indexA[i]=e[i].indexA,t.indexB[i]=e[i].indexB}GetSearchDirection(t){switch(this.m_count){case 1:return o.b2Vec2.NegV(this.m_v1.w,t);case 2:{const e=o.b2Vec2.SubVV(this.m_v2.w,this.m_v1.w,t);return o.b2Vec2.CrossVV(e,o.b2Vec2.NegV(this.m_v1.w,o.b2Vec2.s_t0))>0?o.b2Vec2.CrossOneV(e,t):o.b2Vec2.CrossVOne(e,t)}default:return t.SetZero()}}GetClosestPoint(t){switch(this.m_count){case 0:return t.SetZero();case 1:return t.Copy(this.m_v1.w);case 2:return t.Set(this.m_v1.a*this.m_v1.w.x+this.m_v2.a*this.m_v2.w.x,this.m_v1.a*this.m_v1.w.y+this.m_v2.a*this.m_v2.w.y);case 3:default:return t.SetZero()}}GetWitnessPoints(t,e){switch(this.m_count){case 0:break;case 1:t.Copy(this.m_v1.wA),e.Copy(this.m_v1.wB);break;case 2:t.x=this.m_v1.a*this.m_v1.wA.x+this.m_v2.a*this.m_v2.wA.x,t.y=this.m_v1.a*this.m_v1.wA.y+this.m_v2.a*this.m_v2.wA.y,e.x=this.m_v1.a*this.m_v1.wB.x+this.m_v2.a*this.m_v2.wB.x,e.y=this.m_v1.a*this.m_v1.wB.y+this.m_v2.a*this.m_v2.wB.y;break;case 3:e.x=t.x=this.m_v1.a*this.m_v1.wA.x+this.m_v2.a*this.m_v2.wA.x+this.m_v3.a*this.m_v3.wA.x,e.y=t.y=this.m_v1.a*this.m_v1.wA.y+this.m_v2.a*this.m_v2.wA.y+this.m_v3.a*this.m_v3.wA.y}}GetMetric(){switch(this.m_count){case 0:case 1:return 0;case 2:return o.b2Vec2.DistanceVV(this.m_v1.w,this.m_v2.w);case 3:return o.b2Vec2.CrossVV(o.b2Vec2.SubVV(this.m_v2.w,this.m_v1.w,o.b2Vec2.s_t0),o.b2Vec2.SubVV(this.m_v3.w,this.m_v1.w,o.b2Vec2.s_t1));default:return 0}}Solve2(){const t=this.m_v1.w,e=this.m_v2.w,i=o.b2Vec2.SubVV(e,t,a.s_e12),s=-o.b2Vec2.DotVV(t,i);if(s<=0)return this.m_v1.a=1,void(this.m_count=1);const n=o.b2Vec2.DotVV(e,i);if(n<=0)return this.m_v2.a=1,this.m_count=1,void this.m_v1.Copy(this.m_v2);const r=1/(n+s);this.m_v1.a=n*r,this.m_v2.a=s*r,this.m_count=2}Solve3(){const t=this.m_v1.w,e=this.m_v2.w,i=this.m_v3.w,s=o.b2Vec2.SubVV(e,t,a.s_e12),n=o.b2Vec2.DotVV(t,s),r=o.b2Vec2.DotVV(e,s),l=-n,m=o.b2Vec2.SubVV(i,t,a.s_e13),c=o.b2Vec2.DotVV(t,m),_=o.b2Vec2.DotVV(i,m),h=-c,u=o.b2Vec2.SubVV(i,e,a.s_e23),d=o.b2Vec2.DotVV(e,u),b=o.b2Vec2.DotVV(i,u),p=-d,f=o.b2Vec2.CrossVV(s,m),y=f*o.b2Vec2.CrossVV(e,i),V=f*o.b2Vec2.CrossVV(i,t),x=f*o.b2Vec2.CrossVV(t,e);if(l<=0&&h<=0)return this.m_v1.a=1,void(this.m_count=1);if(r>0&&l>0&&x<=0){const t=1/(r+l);return this.m_v1.a=r*t,this.m_v2.a=l*t,void(this.m_count=2)}if(_>0&&h>0&&V<=0){const t=1/(_+h);return this.m_v1.a=_*t,this.m_v3.a=h*t,this.m_count=2,void this.m_v2.Copy(this.m_v3)}if(r<=0&&p<=0)return this.m_v2.a=1,this.m_count=1,void this.m_v1.Copy(this.m_v2);if(_<=0&&b<=0)return this.m_v3.a=1,this.m_count=1,void this.m_v1.Copy(this.m_v3);if(b>0&&p>0&&y<=0){const t=1/(b+p);return this.m_v2.a=b*t,this.m_v3.a=p*t,this.m_count=2,void this.m_v1.Copy(this.m_v3)}const S=1/(y+V+x);this.m_v1.a=y*S,this.m_v2.a=V*S,this.m_v3.a=x*S,this.m_count=3}}a.s_e12=new o.b2Vec2,a.s_e13=new o.b2Vec2,a.s_e23=new o.b2Vec2,e.b2Simplex=a;const l=new a,m=[0,0,0],c=[0,0,0],_=new o.b2Vec2,h=new o.b2Vec2,u=new o.b2Vec2,d=new o.b2Vec2,b=new o.b2Vec2;e.b2Distance=function(t,i,n){++e.b2_gjkCalls;const r=n.proxyA,a=n.proxyB,p=n.transformA,f=n.transformB,y=l;y.ReadCache(i,r,p,a,f);const V=y.m_vertices,x=m,S=c;let B=0,C=0;for(;C<20;){B=y.m_count;for(let t=0;t<B;++t)x[t]=V[t].indexA,S[t]=V[t].indexB;switch(y.m_count){case 1:break;case 2:y.Solve2();break;case 3:y.Solve3()}if(3===y.m_count)break;const t=y.GetSearchDirection(h);if(t.LengthSquared()<s.b2_epsilon_sq)break;const i=V[y.m_count];i.indexA=r.GetSupport(o.b2Rot.MulTRV(p.q,o.b2Vec2.NegV(t,o.b2Vec2.s_t0),d)),o.b2Transform.MulXV(p,r.GetVertex(i.indexA),i.wA),i.indexB=a.GetSupport(o.b2Rot.MulTRV(f.q,t,b)),o.b2Transform.MulXV(f,a.GetVertex(i.indexB),i.wB),o.b2Vec2.SubVV(i.wB,i.wA,i.w),++C,++e.b2_gjkIters;let n=!1;for(let t=0;t<B;++t)if(i.indexA===x[t]&&i.indexB===S[t]){n=!0;break}if(n)break;++y.m_count}if(e.b2_gjkMaxIters=o.b2Max(e.b2_gjkMaxIters,C),y.GetWitnessPoints(t.pointA,t.pointB),t.distance=o.b2Vec2.DistanceVV(t.pointA,t.pointB),t.iterations=C,y.WriteCache(i),n.useRadii){const e=r.m_radius,i=a.m_radius;if(t.distance>e+i&&t.distance>s.b2_epsilon){t.distance-=e+i;const s=o.b2Vec2.SubVV(t.pointB,t.pointA,u);s.Normalize(),t.pointA.SelfMulAdd(e,s),t.pointB.SelfMulSub(i,s)}else{const e=o.b2Vec2.MidVV(t.pointA,t.pointB,_);t.pointA.Copy(e),t.pointB.Copy(e),t.distance=0}}};const p=new o.b2Vec2,f=new a,y=new o.b2Vec2,V=new o.b2Vec2,x=new o.b2Vec2,S=new o.b2Vec2,B=new o.b2Vec2,C=new o.b2Vec2;e.b2ShapeCast=function(t,e){t.iterations=0,t.lambda=1,t.normal.SetZero(),t.point.SetZero();const i=e.proxyA,n=e.proxyB,r=o.b2Max(i.m_radius,s.b2_polygonRadius)+o.b2Max(n.m_radius,s.b2_polygonRadius),a=e.transformA,l=e.transformB,m=e.translationB,c=p.Set(0,0);let _=0;const h=f;h.m_count=0;const u=h.m_vertices;let d=i.GetSupport(o.b2Rot.MulTRV(a.q,o.b2Vec2.NegV(m,o.b2Vec2.s_t1),o.b2Vec2.s_t0)),b=o.b2Transform.MulXV(a,i.GetVertex(d),y),A=n.GetSupport(o.b2Rot.MulTRV(l.q,m,o.b2Vec2.s_t0)),w=o.b2Transform.MulXV(l,n.GetVertex(A),V);const g=o.b2Vec2.SubVV(b,w,x),v=o.b2Max(s.b2_polygonRadius,r-s.b2_polygonRadius),M=.5*s.b2_linearSlop;let P=0;for(;P<20&&o.b2Abs(g.Length()-v)>M;){t.iterations+=1,d=i.GetSupport(o.b2Rot.MulTRV(a.q,o.b2Vec2.NegV(g,o.b2Vec2.s_t1),o.b2Vec2.s_t0)),b=o.b2Transform.MulXV(a,i.GetVertex(d),y),A=n.GetSupport(o.b2Rot.MulTRV(l.q,g,o.b2Vec2.s_t0)),w=o.b2Transform.MulXV(l,n.GetVertex(A),V);const e=o.b2Vec2.SubVV(b,w,S);g.Normalize();const s=o.b2Vec2.DotVV(g,e),r=o.b2Vec2.DotVV(g,m);if(s-v>_*r){if(r<=0)return!1;if((_=(s-v)/r)>1)return!1;c.Copy(g).SelfNeg(),h.m_count=0}const p=u[h.m_count];switch(p.indexA=A,p.wA.Copy(w).SelfMulAdd(_,m),p.indexB=d,p.wB.Copy(b),p.w.Copy(p.wB).SelfSub(p.wA),p.a=1,h.m_count+=1,h.m_count){case 1:break;case 2:h.Solve2();break;case 3:h.Solve3()}if(3===h.m_count)return!1;h.GetClosestPoint(g),++P}const I=B,D=C;return h.GetWitnessPoints(I,D),g.LengthSquared()>0&&(c.Copy(g).SelfNeg(),c.Normalize()),t.normal.Copy(c),t.lambda=_,t.iterations=P,!0}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(14),r=i(17);e.b2_toiTime=0,e.b2_toiMaxTime=0,e.b2_toiCalls=0,e.b2_toiIters=0,e.b2_toiMaxIters=0,e.b2_toiRootIters=0,e.b2_toiMaxRootIters=0,e.b2_toi_reset=function(){e.b2_toiTime=0,e.b2_toiMaxTime=0,e.b2_toiCalls=0,e.b2_toiIters=0,e.b2_toiMaxIters=0,e.b2_toiRootIters=0,e.b2_toiMaxRootIters=0};const a=new o.b2Transform,l=new o.b2Transform,m=new o.b2Vec2,c=new o.b2Vec2,_=new o.b2Vec2,h=new o.b2Vec2,u=new o.b2Vec2;var d,b;e.b2TOIInput=class{constructor(){this.proxyA=new r.b2DistanceProxy,this.proxyB=new r.b2DistanceProxy,this.sweepA=new o.b2Sweep,this.sweepB=new o.b2Sweep,this.tMax=0}},function(t){t[t.e_unknown=0]="e_unknown",t[t.e_failed=1]="e_failed",t[t.e_overlapped=2]="e_overlapped",t[t.e_touching=3]="e_touching",t[t.e_separated=4]="e_separated"}(d=e.b2TOIOutputState||(e.b2TOIOutputState={}));e.b2TOIOutput=class{constructor(){this.state=d.e_unknown,this.t=0}},function(t){t[t.e_unknown=-1]="e_unknown",t[t.e_points=0]="e_points",t[t.e_faceA=1]="e_faceA",t[t.e_faceB=2]="e_faceB"}(b=e.b2SeparationFunctionType||(e.b2SeparationFunctionType={}));class p{constructor(){this.m_sweepA=new o.b2Sweep,this.m_sweepB=new o.b2Sweep,this.m_type=b.e_unknown,this.m_localPoint=new o.b2Vec2,this.m_axis=new o.b2Vec2}Initialize(t,e,i,s,n,r){this.m_proxyA=e,this.m_proxyB=s;const h=t.count;this.m_sweepA.Copy(i),this.m_sweepB.Copy(n);const u=a,d=l;if(this.m_sweepA.GetTransform(u,r),this.m_sweepB.GetTransform(d,r),1===h){this.m_type=b.e_points;const e=this.m_proxyA.GetVertex(t.indexA[0]),i=this.m_proxyB.GetVertex(t.indexB[0]),s=o.b2Transform.MulXV(u,e,m),n=o.b2Transform.MulXV(d,i,c);o.b2Vec2.SubVV(n,s,this.m_axis);const r=this.m_axis.Normalize();return this.m_localPoint.SetZero(),r}if(t.indexA[0]===t.indexA[1]){this.m_type=b.e_faceB;const e=this.m_proxyB.GetVertex(t.indexB[0]),i=this.m_proxyB.GetVertex(t.indexB[1]);o.b2Vec2.CrossVOne(o.b2Vec2.SubVV(i,e,o.b2Vec2.s_t0),this.m_axis).SelfNormalize();const s=o.b2Rot.MulRV(d.q,this.m_axis,_);o.b2Vec2.MidVV(e,i,this.m_localPoint);const n=o.b2Transform.MulXV(d,this.m_localPoint,c),r=this.m_proxyA.GetVertex(t.indexA[0]),a=o.b2Transform.MulXV(u,r,m);let l=o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,n,o.b2Vec2.s_t0),s);return l<0&&(this.m_axis.SelfNeg(),l=-l),l}{this.m_type=b.e_faceA;const e=this.m_proxyA.GetVertex(t.indexA[0]),i=this.m_proxyA.GetVertex(t.indexA[1]);o.b2Vec2.CrossVOne(o.b2Vec2.SubVV(i,e,o.b2Vec2.s_t0),this.m_axis).SelfNormalize();const s=o.b2Rot.MulRV(u.q,this.m_axis,_);o.b2Vec2.MidVV(e,i,this.m_localPoint);const n=o.b2Transform.MulXV(u,this.m_localPoint,m),r=this.m_proxyB.GetVertex(t.indexB[0]),a=o.b2Transform.MulXV(d,r,c);let l=o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,n,o.b2Vec2.s_t0),s);return l<0&&(this.m_axis.SelfNeg(),l=-l),l}}FindMinSeparation(t,e,i){const s=a,n=l;switch(this.m_sweepA.GetTransform(s,i),this.m_sweepB.GetTransform(n,i),this.m_type){case b.e_points:{const i=o.b2Rot.MulTRV(s.q,this.m_axis,h),r=o.b2Rot.MulTRV(n.q,o.b2Vec2.NegV(this.m_axis,o.b2Vec2.s_t0),u);t[0]=this.m_proxyA.GetSupport(i),e[0]=this.m_proxyB.GetSupport(r);const a=this.m_proxyA.GetVertex(t[0]),l=this.m_proxyB.GetVertex(e[0]),_=o.b2Transform.MulXV(s,a,m),d=o.b2Transform.MulXV(n,l,c);return o.b2Vec2.DotVV(o.b2Vec2.SubVV(d,_,o.b2Vec2.s_t0),this.m_axis)}case b.e_faceA:{const i=o.b2Rot.MulRV(s.q,this.m_axis,_),r=o.b2Transform.MulXV(s,this.m_localPoint,m),a=o.b2Rot.MulTRV(n.q,o.b2Vec2.NegV(i,o.b2Vec2.s_t0),u);t[0]=-1,e[0]=this.m_proxyB.GetSupport(a);const l=this.m_proxyB.GetVertex(e[0]),h=o.b2Transform.MulXV(n,l,c);return o.b2Vec2.DotVV(o.b2Vec2.SubVV(h,r,o.b2Vec2.s_t0),i)}case b.e_faceB:{const i=o.b2Rot.MulRV(n.q,this.m_axis,_),r=o.b2Transform.MulXV(n,this.m_localPoint,c),a=o.b2Rot.MulTRV(s.q,o.b2Vec2.NegV(i,o.b2Vec2.s_t0),h);e[0]=-1,t[0]=this.m_proxyA.GetSupport(a);const l=this.m_proxyA.GetVertex(t[0]),u=o.b2Transform.MulXV(s,l,m);return o.b2Vec2.DotVV(o.b2Vec2.SubVV(u,r,o.b2Vec2.s_t0),i)}default:return t[0]=-1,e[0]=-1,0}}Evaluate(t,e,i){const s=a,n=l;switch(this.m_sweepA.GetTransform(s,i),this.m_sweepB.GetTransform(n,i),this.m_type){case b.e_points:{const i=this.m_proxyA.GetVertex(t),r=this.m_proxyB.GetVertex(e),a=o.b2Transform.MulXV(s,i,m),l=o.b2Transform.MulXV(n,r,c);return o.b2Vec2.DotVV(o.b2Vec2.SubVV(l,a,o.b2Vec2.s_t0),this.m_axis)}case b.e_faceA:{const t=o.b2Rot.MulRV(s.q,this.m_axis,_),i=o.b2Transform.MulXV(s,this.m_localPoint,m),r=this.m_proxyB.GetVertex(e),a=o.b2Transform.MulXV(n,r,c);return o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,i,o.b2Vec2.s_t0),t)}case b.e_faceB:{const e=o.b2Rot.MulRV(n.q,this.m_axis,_),i=o.b2Transform.MulXV(n,this.m_localPoint,c),r=this.m_proxyA.GetVertex(t),a=o.b2Transform.MulXV(s,r,m);return o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,i,o.b2Vec2.s_t0),e)}default:return 0}}}e.b2SeparationFunction=p;const f=new n.b2Timer,y=new r.b2SimplexCache,V=new r.b2DistanceInput,x=new r.b2DistanceOutput,S=new p,B=[0],C=[0],A=new o.b2Sweep,w=new o.b2Sweep;e.b2TimeOfImpact=function(t,i){const n=f.Reset();++e.b2_toiCalls,t.state=d.e_unknown,t.t=i.tMax;const m=i.proxyA,c=i.proxyB,_=o.b2Max(s.b2_maxPolygonVertices,m.m_count,c.m_count),h=A.Copy(i.sweepA),u=w.Copy(i.sweepB);h.Normalize(),u.Normalize();const b=i.tMax,p=m.m_radius+c.m_radius,g=o.b2Max(s.b2_linearSlop,p-3*s.b2_linearSlop),v=.25*s.b2_linearSlop;let M=0,P=0;const I=y;I.count=0;const D=V;for(D.proxyA.Copy(i.proxyA),D.proxyB.Copy(i.proxyB),D.useRadii=!1;;){const i=a,s=l;h.GetTransform(i,M),u.GetTransform(s,M),D.transformA.Copy(i),D.transformB.Copy(s);const n=x;if(r.b2Distance(n,I,D),n.distance<=0){t.state=d.e_overlapped,t.t=0;break}if(n.distance<g+v){t.state=d.e_touching,t.t=M;break}const p=S;p.Initialize(I,m,h,c,u,M);let f=!1,y=b,V=0;for(;;){const i=B,s=C;let n=p.FindMinSeparation(i,s,y);if(n>g+v){t.state=d.e_separated,t.t=b,f=!0;break}if(n>g-v){M=y;break}let r=p.Evaluate(i[0],s[0],M);if(r<g-v){t.state=d.e_failed,t.t=M,f=!0;break}if(r<=g+v){t.state=d.e_touching,t.t=M,f=!0;break}let a=0,l=M,m=y;for(;;){let t=0;t=1&a?l+(g-r)*(m-l)/(n-r):.5*(l+m),++a,++e.b2_toiRootIters;const c=p.Evaluate(i[0],s[0],t);if(o.b2Abs(c-g)<v){y=t;break}if(c>g?(l=t,r=c):(m=t,n=c),50===a)break}if(e.b2_toiMaxRootIters=o.b2Max(e.b2_toiMaxRootIters,a),++V===_)break}if(++P,++e.b2_toiIters,f)break;if(20===P){t.state=d.e_failed,t.t=M;break}}e.b2_toiMaxIters=o.b2Max(e.b2_toiMaxIters,P);const G=n.GetMilliseconds();e.b2_toiMaxTime=o.b2Max(e.b2_toiMaxTime,G),e.b2_toiTime+=G}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(2),r=new o.b2Vec2,a=new o.b2Vec2;e.b2CollideCircles=function(t,e,i,s,l){t.pointCount=0;const m=o.b2Transform.MulXV(i,e.m_p,r),c=o.b2Transform.MulXV(l,s.m_p,a),_=o.b2Vec2.DistanceSquaredVV(m,c),h=e.m_radius+s.m_radius;_>h*h||(t.type=n.b2ManifoldType.e_circles,t.localPoint.Copy(e.m_p),t.localNormal.SetZero(),t.pointCount=1,t.points[0].localPoint.Copy(s.m_p),t.points[0].id.key=0)};const l=new o.b2Vec2,m=new o.b2Vec2,c=new o.b2Vec2;e.b2CollidePolygonAndCircle=function(t,e,i,r,a){t.pointCount=0;const _=o.b2Transform.MulXV(a,r.m_p,l),h=o.b2Transform.MulTXV(i,_,m);let u=0,d=-s.b2_maxFloat;const b=e.m_radius+r.m_radius,p=e.m_count,f=e.m_vertices,y=e.m_normals;for(let t=0;t<p;++t){const e=o.b2Vec2.DotVV(y[t],o.b2Vec2.SubVV(h,f[t],o.b2Vec2.s_t0));if(e>b)return;e>d&&(d=e,u=t)}const V=u,x=(V+1)%p,S=f[V],B=f[x];if(d<s.b2_epsilon)return t.pointCount=1,t.type=n.b2ManifoldType.e_faceA,t.localNormal.Copy(y[u]),o.b2Vec2.MidVV(S,B,t.localPoint),t.points[0].localPoint.Copy(r.m_p),void(t.points[0].id.key=0);const C=o.b2Vec2.DotVV(o.b2Vec2.SubVV(h,S,o.b2Vec2.s_t0),o.b2Vec2.SubVV(B,S,o.b2Vec2.s_t1)),A=o.b2Vec2.DotVV(o.b2Vec2.SubVV(h,B,o.b2Vec2.s_t0),o.b2Vec2.SubVV(S,B,o.b2Vec2.s_t1));if(C<=0){if(o.b2Vec2.DistanceSquaredVV(h,S)>b*b)return;t.pointCount=1,t.type=n.b2ManifoldType.e_faceA,o.b2Vec2.SubVV(h,S,t.localNormal).SelfNormalize(),t.localPoint.Copy(S),t.points[0].localPoint.Copy(r.m_p),t.points[0].id.key=0}else if(A<=0){if(o.b2Vec2.DistanceSquaredVV(h,B)>b*b)return;t.pointCount=1,t.type=n.b2ManifoldType.e_faceA,o.b2Vec2.SubVV(h,B,t.localNormal).SelfNormalize(),t.localPoint.Copy(B),t.points[0].localPoint.Copy(r.m_p),t.points[0].id.key=0}else{const e=o.b2Vec2.MidVV(S,B,c);if(o.b2Vec2.DotVV(o.b2Vec2.SubVV(h,e,o.b2Vec2.s_t1),y[V])>b)return;t.pointCount=1,t.type=n.b2ManifoldType.e_faceA,t.localNormal.Copy(y[V]).SelfNormalize(),t.localPoint.Copy(e),t.points[0].localPoint.Copy(r.m_p),t.points[0].id.key=0}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2DistanceJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_distanceJoint),this.localAnchorA=new o.b2Vec2,this.localAnchorB=new o.b2Vec2,this.length=1,this.frequencyHz=0,this.dampingRatio=0}Initialize(t,e,i,s){this.bodyA=t,this.bodyB=e,this.bodyA.GetLocalPoint(i,this.localAnchorA),this.bodyB.GetLocalPoint(s,this.localAnchorB),this.length=o.b2Vec2.DistanceVV(i,s),this.frequencyHz=0,this.dampingRatio=0}};class r extends n.b2Joint{constructor(t){super(t),this.m_frequencyHz=0,this.m_dampingRatio=0,this.m_bias=0,this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_gamma=0,this.m_impulse=0,this.m_length=0,this.m_indexA=0,this.m_indexB=0,this.m_u=new o.b2Vec2,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_mass=0,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_frequencyHz=s.b2Maybe(t.frequencyHz,0),this.m_dampingRatio=s.b2Maybe(t.dampingRatio,0),this.m_localAnchorA.Copy(t.localAnchorA),this.m_localAnchorB.Copy(t.localAnchorB),this.m_length=t.length}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return e.x=t*this.m_impulse*this.m_u.x,e.y=t*this.m_impulse*this.m_u.y,e}GetReactionTorque(t){return 0}GetLocalAnchorA(){return this.m_localAnchorA}GetLocalAnchorB(){return this.m_localAnchorB}SetLength(t){this.m_length=t}Length(){return this.m_length}SetFrequency(t){this.m_frequencyHz=t}GetFrequency(){return this.m_frequencyHz}SetDampingRatio(t){this.m_dampingRatio=t}GetDampingRatio(){return this.m_dampingRatio}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2DistanceJointDef = new b2DistanceJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.length = %.15f;\n",this.m_length),t("  jd.frequencyHz = %.15f;\n",this.m_frequencyHz),t("  jd.dampingRatio = %.15f;\n",this.m_dampingRatio),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].c,i=t.positions[this.m_indexA].a,n=t.velocities[this.m_indexA].v;let a=t.velocities[this.m_indexA].w;const l=t.positions[this.m_indexB].c,m=t.positions[this.m_indexB].a,c=t.velocities[this.m_indexB].v;let _=t.velocities[this.m_indexB].w;const h=this.m_qA.SetAngle(i),u=this.m_qB.SetAngle(m);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA),o.b2Rot.MulRV(h,this.m_lalcA,this.m_rA),o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB),o.b2Rot.MulRV(u,this.m_lalcB,this.m_rB),this.m_u.x=l.x+this.m_rB.x-e.x-this.m_rA.x,this.m_u.y=l.y+this.m_rB.y-e.y-this.m_rA.y;const d=this.m_u.Length();d>s.b2_linearSlop?this.m_u.SelfMul(1/d):this.m_u.SetZero();const b=o.b2Vec2.CrossVV(this.m_rA,this.m_u),p=o.b2Vec2.CrossVV(this.m_rB,this.m_u);let f=this.m_invMassA+this.m_invIA*b*b+this.m_invMassB+this.m_invIB*p*p;if(this.m_mass=0!==f?1/f:0,this.m_frequencyHz>0){const e=d-this.m_length,i=2*s.b2_pi*this.m_frequencyHz,o=2*this.m_mass*this.m_dampingRatio*i,n=this.m_mass*i*i,r=t.step.dt;this.m_gamma=r*(o+r*n),this.m_gamma=0!==this.m_gamma?1/this.m_gamma:0,this.m_bias=e*r*n*this.m_gamma,f+=this.m_gamma,this.m_mass=0!==f?1/f:0}else this.m_gamma=0,this.m_bias=0;if(t.step.warmStarting){this.m_impulse*=t.step.dtRatio;const e=o.b2Vec2.MulSV(this.m_impulse,this.m_u,r.InitVelocityConstraints_s_P);n.SelfMulSub(this.m_invMassA,e),a-=this.m_invIA*o.b2Vec2.CrossVV(this.m_rA,e),c.SelfMulAdd(this.m_invMassB,e),_+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,e)}else this.m_impulse=0;t.velocities[this.m_indexA].w=a,t.velocities[this.m_indexB].w=_}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let n=t.velocities[this.m_indexB].w;const a=o.b2Vec2.AddVCrossSV(e,i,this.m_rA,r.SolveVelocityConstraints_s_vpA),l=o.b2Vec2.AddVCrossSV(s,n,this.m_rB,r.SolveVelocityConstraints_s_vpB),m=o.b2Vec2.DotVV(this.m_u,o.b2Vec2.SubVV(l,a,o.b2Vec2.s_t0)),c=-this.m_mass*(m+this.m_bias+this.m_gamma*this.m_impulse);this.m_impulse+=c;const _=o.b2Vec2.MulSV(c,this.m_u,r.SolveVelocityConstraints_s_P);e.SelfMulSub(this.m_invMassA,_),i-=this.m_invIA*o.b2Vec2.CrossVV(this.m_rA,_),s.SelfMulAdd(this.m_invMassB,_),n+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,_),t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=n}SolvePositionConstraints(t){if(this.m_frequencyHz>0)return!0;const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const n=t.positions[this.m_indexB].c;let a=t.positions[this.m_indexB].a;const l=this.m_qA.SetAngle(i),m=this.m_qB.SetAngle(a),c=o.b2Rot.MulRV(l,this.m_lalcA,this.m_rA),_=o.b2Rot.MulRV(m,this.m_lalcB,this.m_rB),h=this.m_u;h.x=n.x+_.x-e.x-c.x,h.y=n.y+_.y-e.y-c.y;let u=this.m_u.Normalize()-this.m_length;u=o.b2Clamp(u,-s.b2_maxLinearCorrection,s.b2_maxLinearCorrection);const d=-this.m_mass*u,b=o.b2Vec2.MulSV(d,h,r.SolvePositionConstraints_s_P);return e.SelfMulSub(this.m_invMassA,b),i-=this.m_invIA*o.b2Vec2.CrossVV(c,b),n.SelfMulAdd(this.m_invMassB,b),a+=this.m_invIB*o.b2Vec2.CrossVV(_,b),t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=a,o.b2Abs(u)<s.b2_linearSlop}}r.InitVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_vpA=new o.b2Vec2,r.SolveVelocityConstraints_s_vpB=new o.b2Vec2,r.SolveVelocityConstraints_s_P=new o.b2Vec2,r.SolvePositionConstraints_s_P=new o.b2Vec2,e.b2DistanceJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(7);!function(t){t[t.b2_waterParticle=0]="b2_waterParticle",t[t.b2_zombieParticle=2]="b2_zombieParticle",t[t.b2_wallParticle=4]="b2_wallParticle",t[t.b2_springParticle=8]="b2_springParticle",t[t.b2_elasticParticle=16]="b2_elasticParticle",t[t.b2_viscousParticle=32]="b2_viscousParticle",t[t.b2_powderParticle=64]="b2_powderParticle",t[t.b2_tensileParticle=128]="b2_tensileParticle",t[t.b2_colorMixingParticle=256]="b2_colorMixingParticle",t[t.b2_destructionListenerParticle=512]="b2_destructionListenerParticle",t[t.b2_barrierParticle=1024]="b2_barrierParticle",t[t.b2_staticPressureParticle=2048]="b2_staticPressureParticle",t[t.b2_reactiveParticle=4096]="b2_reactiveParticle",t[t.b2_repulsiveParticle=8192]="b2_repulsiveParticle",t[t.b2_fixtureContactListenerParticle=16384]="b2_fixtureContactListenerParticle",t[t.b2_particleContactListenerParticle=32768]="b2_particleContactListenerParticle",t[t.b2_fixtureContactFilterParticle=65536]="b2_fixtureContactFilterParticle",t[t.b2_particleContactFilterParticle=131072]="b2_particleContactFilterParticle"}(e.b2ParticleFlag||(e.b2ParticleFlag={}));e.b2ParticleDef=class{constructor(){this.flags=0,this.position=new o.b2Vec2,this.velocity=new o.b2Vec2,this.color=new n.b2Color(0,0,0,0),this.lifetime=0,this.userData=null,this.group=null}},e.b2CalculateParticleIterations=function(t,e,i){const s=Math.ceil(Math.sqrt(t/(.01*e))*i);return o.b2Clamp(s,1,8)};e.b2ParticleHandle=class{constructor(){this.m_index=s.b2_invalidParticleIndex}GetIndex(){return this.m_index}SetIndex(t){this.m_index=t}}},function(t,e,i){"use strict";var s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(6)),n=i(16),r=i(52),a=i(53);e.DRAW_STRING_NEW_LINE=16,e.RandomFloat=function(t=-1,e=1){let i=Math.random();return i=(e-t)*i+t};e.Settings=class{constructor(){this.hz=60,this.velocityIterations=8,this.positionIterations=3,this.particleIterations=o.b2CalculateParticleIterations(10,.04,1/this.hz),this.drawShapes=!0,this.drawParticles=!0,this.drawJoints=!0,this.drawAABBs=!1,this.drawContactPoints=!1,this.drawContactNormals=!1,this.drawContactImpulse=!1,this.drawFrictionImpulse=!1,this.drawCOMs=!1,this.drawControllers=!0,this.drawStats=!1,this.drawProfile=!1,this.enableWarmStarting=!0,this.enableContinuous=!0,this.enableSubStepping=!1,this.enableSleep=!0,this.pause=!1,this.singleStep=!1,this.strictContacts=!1}};e.TestEntry=class{constructor(t,e){this.name="unknown",this.name=t,this.createFcn=e}};class l extends o.b2DestructionListener{constructor(t){super(),this.test=t}SayGoodbyeJoint(t){this.test.m_mouseJoint===t?this.test.m_mouseJoint=null:this.test.JointDestroyed(t)}SayGoodbyeFixture(t){}SayGoodbyeParticleGroup(t){this.test.ParticleGroupDestroyed(t)}}e.DestructionListener=l;class m{constructor(){this.normal=new o.b2Vec2,this.position=new o.b2Vec2,this.state=o.b2PointState.b2_nullState,this.normalImpulse=0,this.tangentImpulse=0,this.separation=0}}e.ContactPoint=m;class c extends o.b2QueryCallback{constructor(t,e,i){super(),this.m_particleSystem=t,this.m_shape=e,this.m_velocity=i}ReportFixture(t){return!1}ReportParticle(t,e){if(t!==this.m_particleSystem)return!1;const i=o.b2Transform.IDENTITY,s=this.m_particleSystem.GetPositionBuffer()[e];if(this.m_shape.TestPoint(i,s)){this.m_particleSystem.GetVelocityBuffer()[e].Copy(this.m_velocity)}return!0}}class _ extends o.b2ContactListener{constructor(){super(),this.m_bomb=null,this.m_textLine=30,this.m_mouseJoint=null,this.m_points=o.b2MakeArray(_.k_maxContactPoints,t=>new m),this.m_pointCount=0,this.m_bombSpawnPoint=new o.b2Vec2,this.m_bombSpawning=!1,this.m_mouseWorld=new o.b2Vec2,this.m_mouseTracing=!1,this.m_mouseTracerPosition=new o.b2Vec2,this.m_mouseTracerVelocity=new o.b2Vec2,this.m_stepCount=0,this.m_maxProfile=new o.b2Profile,this.m_totalProfile=new o.b2Profile,this.m_particleParameters=null,this.m_particleParameterDef=null;const t=new o.b2ParticleSystemDef,e=new o.b2Vec2(0,-10);this.m_world=new o.b2World(e),this.m_particleSystem=this.m_world.CreateParticleSystem(t),this.m_bomb=null,this.m_textLine=30,this.m_mouseJoint=null,this.m_destructionListener=new l(this),this.m_world.SetDestructionListener(this.m_destructionListener),this.m_world.SetContactListener(this),this.m_world.SetDebugDraw(n.g_debugDraw),this.m_particleSystem.SetGravityScale(.4),this.m_particleSystem.SetDensity(1.2);const i=new o.b2BodyDef;this.m_groundBody=this.m_world.CreateBody(i)}JointDestroyed(t){}ParticleGroupDestroyed(t){}BeginContact(t){}EndContact(t){}PreSolve(t,e){const i=t.GetManifold();if(0===i.pointCount)return;const s=t.GetFixtureA(),n=t.GetFixtureB(),r=_.PreSolve_s_state1,a=_.PreSolve_s_state2;o.b2GetPointStates(r,a,e,i);const l=_.PreSolve_s_worldManifold;t.GetWorldManifold(l);for(let t=0;t<i.pointCount&&this.m_pointCount<_.k_maxContactPoints;++t){const e=this.m_points[this.m_pointCount];e.fixtureA=s,e.fixtureB=n,e.position.Copy(l.points[t]),e.normal.Copy(l.normal),e.state=a[t],e.normalImpulse=i.points[t].normalImpulse,e.tangentImpulse=i.points[t].tangentImpulse,e.separation=l.separations[t],++this.m_pointCount}}PostSolve(t,e){}Keyboard(t){}KeyboardUp(t){}SetTextLine(t){this.m_textLine=t}DrawTitle(t){n.g_debugDraw.DrawString(5,e.DRAW_STRING_NEW_LINE,t),this.m_textLine=3*e.DRAW_STRING_NEW_LINE}MouseDown(t){this.m_mouseWorld.Copy(t),this.m_mouseTracing=!0,this.m_mouseTracerPosition.Copy(t),this.m_mouseTracerVelocity.SetZero(),null!==this.m_mouseJoint&&(this.m_world.DestroyJoint(this.m_mouseJoint),this.m_mouseJoint=null);let e=null;if(this.m_world.QueryPointAABB(null,t,i=>{if(i.GetBody().GetType()===o.b2BodyType.b2_dynamicBody){if(i.TestPoint(t))return e=i,!1}return!0}),e){const i=e.GetBody(),s=new o.b2MouseJointDef;s.bodyA=this.m_groundBody,s.bodyB=i,s.target.Copy(t),s.maxForce=1e3*i.GetMass(),this.m_mouseJoint=this.m_world.CreateJoint(s),i.SetAwake(!0)}}SpawnBomb(t){this.m_bombSpawnPoint.Copy(t),this.m_bombSpawning=!0}CompleteBombSpawn(t){if(!this.m_bombSpawning)return;const e=o.b2Vec2.SubVV(this.m_bombSpawnPoint,t,new o.b2Vec2);e.SelfMul(30),this.LaunchBombAt(this.m_bombSpawnPoint,e),this.m_bombSpawning=!1}ShiftMouseDown(t){this.m_mouseWorld.Copy(t),null===this.m_mouseJoint&&this.SpawnBomb(t)}MouseUp(t){this.m_mouseTracing=!1,this.m_mouseJoint&&(this.m_world.DestroyJoint(this.m_mouseJoint),this.m_mouseJoint=null),this.m_bombSpawning&&this.CompleteBombSpawn(t)}MouseMove(t){this.m_mouseWorld.Copy(t),this.m_mouseJoint&&this.m_mouseJoint.SetTarget(t)}LaunchBomb(){const t=new o.b2Vec2(o.b2RandomRange(-15,15),30),e=o.b2Vec2.MulSV(-5,t,new o.b2Vec2);this.LaunchBombAt(t,e)}LaunchBombAt(t,e){this.m_bomb&&(this.m_world.DestroyBody(this.m_bomb),this.m_bomb=null);const i=new o.b2BodyDef;i.type=o.b2BodyType.b2_dynamicBody,i.position.Copy(t),i.bullet=!0,this.m_bomb=this.m_world.CreateBody(i),this.m_bomb.SetLinearVelocity(e);const s=new o.b2CircleShape;s.m_radius=.3;const n=new o.b2FixtureDef;n.shape=s,n.density=20,n.restitution=0,this.m_bomb.CreateFixture(n)}Step(t){let i=t.hz>0?1/t.hz:0;t.pause&&(t.singleStep?t.singleStep=!1:i=0,n.g_debugDraw.DrawString(5,this.m_textLine,"****PAUSED****"),this.m_textLine+=e.DRAW_STRING_NEW_LINE);let s=o.b2DrawFlags.e_none;if(t.drawShapes&&(s|=o.b2DrawFlags.e_shapeBit),t.drawParticles&&(s|=o.b2DrawFlags.e_particleBit),t.drawJoints&&(s|=o.b2DrawFlags.e_jointBit),t.drawAABBs&&(s|=o.b2DrawFlags.e_aabbBit),t.drawCOMs&&(s|=o.b2DrawFlags.e_centerOfMassBit),t.drawControllers&&(s|=o.b2DrawFlags.e_controllerBit),n.g_debugDraw.SetFlags(s),this.m_world.SetAllowSleeping(t.enableSleep),this.m_world.SetWarmStarting(t.enableWarmStarting),this.m_world.SetContinuousPhysics(t.enableContinuous),this.m_world.SetSubStepping(t.enableSubStepping),this.m_particleSystem.SetStrictContactCheck(t.strictContacts),this.m_pointCount=0,this.m_world.Step(i,t.velocityIterations,t.positionIterations,t.particleIterations),this.m_world.DrawDebugData(),i>0&&++this.m_stepCount,t.drawStats){const t=this.m_world.GetBodyCount(),i=this.m_world.GetContactCount(),s=this.m_world.GetJointCount();n.g_debugDraw.DrawString(5,this.m_textLine,"bodies/contacts/joints = "+t+"/"+i+"/"+s),this.m_textLine+=e.DRAW_STRING_NEW_LINE;const o=this.m_particleSystem.GetParticleCount(),r=this.m_particleSystem.GetParticleGroupCount(),a=this.m_particleSystem.GetPairCount(),l=this.m_particleSystem.GetTriadCount();n.g_debugDraw.DrawString(5,this.m_textLine,"particles/groups/pairs/triads = "+o+"/"+r+"/"+a+"/"+l),this.m_textLine+=e.DRAW_STRING_NEW_LINE;const m=this.m_world.GetProxyCount(),c=this.m_world.GetTreeHeight(),_=this.m_world.GetTreeBalance(),h=this.m_world.GetTreeQuality();n.g_debugDraw.DrawString(5,this.m_textLine,"proxies/height/balance/quality = "+m+"/"+c+"/"+_+"/"+h.toFixed(2)),this.m_textLine+=e.DRAW_STRING_NEW_LINE}{const t=this.m_world.GetProfile();this.m_maxProfile.step=o.b2Max(this.m_maxProfile.step,t.step),this.m_maxProfile.collide=o.b2Max(this.m_maxProfile.collide,t.collide),this.m_maxProfile.solve=o.b2Max(this.m_maxProfile.solve,t.solve),this.m_maxProfile.solveInit=o.b2Max(this.m_maxProfile.solveInit,t.solveInit),this.m_maxProfile.solveVelocity=o.b2Max(this.m_maxProfile.solveVelocity,t.solveVelocity),this.m_maxProfile.solvePosition=o.b2Max(this.m_maxProfile.solvePosition,t.solvePosition),this.m_maxProfile.solveTOI=o.b2Max(this.m_maxProfile.solveTOI,t.solveTOI),this.m_maxProfile.broadphase=o.b2Max(this.m_maxProfile.broadphase,t.broadphase),this.m_totalProfile.step+=t.step,this.m_totalProfile.collide+=t.collide,this.m_totalProfile.solve+=t.solve,this.m_totalProfile.solveInit+=t.solveInit,this.m_totalProfile.solveVelocity+=t.solveVelocity,this.m_totalProfile.solvePosition+=t.solvePosition,this.m_totalProfile.solveTOI+=t.solveTOI,this.m_totalProfile.broadphase+=t.broadphase}if(t.drawProfile){const t=this.m_world.GetProfile(),i=new o.b2Profile;if(this.m_stepCount>0){const t=1/this.m_stepCount;i.step=t*this.m_totalProfile.step,i.collide=t*this.m_totalProfile.collide,i.solve=t*this.m_totalProfile.solve,i.solveInit=t*this.m_totalProfile.solveInit,i.solveVelocity=t*this.m_totalProfile.solveVelocity,i.solvePosition=t*this.m_totalProfile.solvePosition,i.solveTOI=t*this.m_totalProfile.solveTOI,i.broadphase=t*this.m_totalProfile.broadphase}n.g_debugDraw.DrawString(5,this.m_textLine,"step [ave] (max) = "+t.step.toFixed(2)+" ["+i.step.toFixed(2)+"] ("+this.m_maxProfile.step.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE,n.g_debugDraw.DrawString(5,this.m_textLine,"collide [ave] (max) = "+t.collide.toFixed(2)+" ["+i.collide.toFixed(2)+"] ("+this.m_maxProfile.collide.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE,n.g_debugDraw.DrawString(5,this.m_textLine,"solve [ave] (max) = "+t.solve.toFixed(2)+" ["+i.solve.toFixed(2)+"] ("+this.m_maxProfile.solve.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE,n.g_debugDraw.DrawString(5,this.m_textLine,"solve init [ave] (max) = "+t.solveInit.toFixed(2)+" ["+i.solveInit.toFixed(2)+"] ("+this.m_maxProfile.solveInit.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE,n.g_debugDraw.DrawString(5,this.m_textLine,"solve velocity [ave] (max) = "+t.solveVelocity.toFixed(2)+" ["+i.solveVelocity.toFixed(2)+"] ("+this.m_maxProfile.solveVelocity.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE,n.g_debugDraw.DrawString(5,this.m_textLine,"solve position [ave] (max) = "+t.solvePosition.toFixed(2)+" ["+i.solvePosition.toFixed(2)+"] ("+this.m_maxProfile.solvePosition.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE,n.g_debugDraw.DrawString(5,this.m_textLine,"solveTOI [ave] (max) = "+t.solveTOI.toFixed(2)+" ["+i.solveTOI.toFixed(2)+"] ("+this.m_maxProfile.solveTOI.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE,n.g_debugDraw.DrawString(5,this.m_textLine,"broad-phase [ave] (max) = "+t.broadphase.toFixed(2)+" ["+i.broadphase.toFixed(2)+"] ("+this.m_maxProfile.broadphase.toFixed(2)+")"),this.m_textLine+=e.DRAW_STRING_NEW_LINE}if(this.m_mouseTracing&&!this.m_mouseJoint){const t=.1,e=new o.b2Vec2;e.x=2/t*(1/t*(this.m_mouseWorld.x-this.m_mouseTracerPosition.x)-this.m_mouseTracerVelocity.x),e.y=2/t*(1/t*(this.m_mouseWorld.y-this.m_mouseTracerPosition.y)-this.m_mouseTracerVelocity.y),this.m_mouseTracerVelocity.SelfMulAdd(i,e),this.m_mouseTracerPosition.SelfMulAdd(i,this.m_mouseTracerVelocity);const s=new o.b2CircleShape;s.m_p.Copy(this.m_mouseTracerPosition),s.m_radius=2*this.GetDefaultViewZoom();const n=new c(this.m_particleSystem,s,this.m_mouseTracerVelocity),r=new o.b2AABB,a=new o.b2Transform;a.SetIdentity(),s.ComputeAABB(r,a,0),this.m_world.QueryAABB(n,r)}if(this.m_bombSpawning){const t=new o.b2Color(0,0,1);n.g_debugDraw.DrawPoint(this.m_bombSpawnPoint,4,t),t.SetRGB(.8,.8,.8),n.g_debugDraw.DrawSegment(this.m_mouseWorld,this.m_bombSpawnPoint,t)}if(t.drawContactPoints){const e=.1,i=.3;for(let s=0;s<this.m_pointCount;++s){const r=this.m_points[s];if(r.state===o.b2PointState.b2_addState?n.g_debugDraw.DrawPoint(r.position,10,new o.b2Color(.3,.95,.3)):r.state===o.b2PointState.b2_persistState&&n.g_debugDraw.DrawPoint(r.position,5,new o.b2Color(.3,.3,.95)),t.drawContactNormals){const t=r.position,e=o.b2Vec2.AddVV(t,o.b2Vec2.MulSV(i,r.normal,o.b2Vec2.s_t0),new o.b2Vec2);n.g_debugDraw.DrawSegment(t,e,new o.b2Color(.9,.9,.9))}else if(t.drawContactImpulse){const t=r.position,i=o.b2Vec2.AddVMulSV(t,e*r.normalImpulse,r.normal,new o.b2Vec2);n.g_debugDraw.DrawSegment(t,i,new o.b2Color(.9,.9,.3))}if(t.drawFrictionImpulse){const t=o.b2Vec2.CrossVOne(r.normal,new o.b2Vec2),i=r.position,s=o.b2Vec2.AddVMulSV(i,e*r.tangentImpulse,t,new o.b2Vec2);n.g_debugDraw.DrawSegment(i,s,new o.b2Color(.9,.9,.3))}}}}ShiftOrigin(t){this.m_world.ShiftOrigin(t)}GetDefaultViewZoom(){return 1}ColorParticleGroup(t,e){const i=this.m_particleSystem.GetColorBuffer(),s=t.GetParticleCount(),o=t.GetBufferIndex(),n=s+o,r=_.k_ParticleColors.length;e||(e=Math.floor(s/r))||(e=1);for(let t=o;t<n;t++)i[t]=_.k_ParticleColors[Math.floor(t/e)%r].Clone()}InitializeParticleParameters(t){const e=a.ParticleParameter.k_defaultDefinition[0].numValues,i=a.ParticleParameter.k_defaultDefinition[0].values;this.m_particleParameters=[];let s=0;for(let o=0;o<e;o++)i[o].value&t||(this.m_particleParameters[s]=new a.ParticleParameter.Value(i[o]),s++);this.m_particleParameterDef=new a.ParticleParameter.Definition(this.m_particleParameters,s),_.SetParticleParameters([this.m_particleParameterDef],1)}RestoreParticleParameters(){this.m_particleParameters&&(_.SetParticleParameters(a.ParticleParameter.k_defaultDefinition,1),this.m_particleParameters=null)}static SetRestartOnParticleParameterChange(t){_.particleParameter.SetRestartOnChange(t)}static SetParticleParameterValue(t){const e=_.particleParameter.FindIndexByValue(t);return _.particleParameter.Set(e>=0?e:0),_.particleParameter.GetValue()}static GetParticleParameterValue(){return _.fullscreenUI.SetParticleParameterSelectionEnabled(!0),_.particleParameter.GetValue()}static SetParticleParameters(t,e=t.length){_.particleParameter.SetDefinition(t,e)}}_.fullscreenUI=new r.FullScreenUI,_.particleParameter=new a.ParticleParameter,_.k_maxContactPoints=2048,_.PreSolve_s_state1=[],_.PreSolve_s_state2=[],_.PreSolve_s_worldManifold=new o.b2WorldManifold,_.k_ParticleColors=[(new o.b2Color).SetByteRGBA(255,0,0,255),(new o.b2Color).SetByteRGBA(0,255,0,255),(new o.b2Color).SetByteRGBA(0,0,255,255),(new o.b2Color).SetByteRGBA(255,140,0,255),(new o.b2Color).SetByteRGBA(0,206,209,255),(new o.b2Color).SetByteRGBA(255,0,255,255),(new o.b2Color).SetByteRGBA(255,215,0,255),(new o.b2Color).SetByteRGBA(0,255,255,255)],_.k_ParticleColorsCount=_.k_ParticleColors.length,e.Test=_},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0);e.b2GrowableStack=class{constructor(t){this.m_stack=[],this.m_count=0,this.m_stack=s.b2MakeArray(t,t=>null),this.m_count=0}Reset(){return this.m_count=0,this}Push(t){this.m_stack[this.m_count]=t,this.m_count++}Pop(){this.m_count--;const t=this.m_stack[this.m_count];if(this.m_stack[this.m_count]=null,null===t)throw new Error;return t}GetCount(){return this.m_count}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(25);class o{constructor(t,e){this.proxyA=t,this.proxyB=e}}e.b2Pair=o;function n(t,e){return t.proxyA.m_id===e.proxyA.m_id?t.proxyB.m_id-e.proxyB.m_id:t.proxyA.m_id-e.proxyA.m_id}e.b2BroadPhase=class{constructor(){this.m_tree=new s.b2DynamicTree,this.m_proxyCount=0,this.m_moveCount=0,this.m_moveBuffer=[],this.m_pairCount=0,this.m_pairBuffer=[]}CreateProxy(t,e){const i=this.m_tree.CreateProxy(t,e);return++this.m_proxyCount,this.BufferMove(i),i}DestroyProxy(t){this.UnBufferMove(t),--this.m_proxyCount,this.m_tree.DestroyProxy(t)}MoveProxy(t,e,i){this.m_tree.MoveProxy(t,e,i)&&this.BufferMove(t)}TouchProxy(t){this.BufferMove(t)}GetProxyCount(){return this.m_proxyCount}UpdatePairs(t){this.m_pairCount=0;for(let t=0;t<this.m_moveCount;++t){const e=this.m_moveBuffer[t];if(null===e)continue;const i=e.aabb;this.m_tree.Query(i,t=>{if(t.m_id===e.m_id)return!0;let i,s;if(t.m_id<e.m_id?(i=t,s=e):(i=e,s=t),this.m_pairCount===this.m_pairBuffer.length)this.m_pairBuffer[this.m_pairCount]=new o(i,s);else{const t=this.m_pairBuffer[this.m_pairCount];t.proxyA=i,t.proxyB=s}return++this.m_pairCount,!0})}this.m_moveCount=0,this.m_pairBuffer.length=this.m_pairCount,this.m_pairBuffer.sort(n);let e=0;for(;e<this.m_pairCount;){const i=this.m_pairBuffer[e];for(t(i.proxyA.userData,i.proxyB.userData),++e;e<this.m_pairCount;){const t=this.m_pairBuffer[e];if(t.proxyA.m_id!==i.proxyA.m_id||t.proxyB.m_id!==i.proxyB.m_id)break;++e}}}Query(t,e){this.m_tree.Query(t,e)}QueryPoint(t,e){this.m_tree.QueryPoint(t,e)}RayCast(t,e){this.m_tree.RayCast(t,e)}GetTreeHeight(){return this.m_tree.GetHeight()}GetTreeBalance(){return this.m_tree.GetMaxBalance()}GetTreeQuality(){return this.m_tree.GetAreaRatio()}ShiftOrigin(t){this.m_tree.ShiftOrigin(t)}BufferMove(t){this.m_moveBuffer[this.m_moveCount]=t,++this.m_moveCount}UnBufferMove(t){const e=this.m_moveBuffer.indexOf(t);this.m_moveBuffer[e]=null}},e.b2PairLessThan=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(23),r=i(2);function a(t){if(null===t)throw new Error;return t}class l{constructor(t=0){this.m_id=0,this.aabb=new r.b2AABB,this.parent=null,this.child1=null,this.child2=null,this.height=0,this.m_id=t}IsLeaf(){return null===this.child1}}e.b2TreeNode=l;class m{constructor(){this.m_root=null,this.m_freeList=null,this.m_path=0,this.m_insertionCount=0,this.m_stack=new n.b2GrowableStack(256)}Query(t,e){if(null===this.m_root)return;const i=this.m_stack.Reset();for(i.Push(this.m_root);i.GetCount()>0;){const s=i.Pop();if(s.aabb.TestOverlap(t))if(s.IsLeaf()){if(!e(s))return}else i.Push(a(s.child1)),i.Push(a(s.child2))}}QueryPoint(t,e){if(null===this.m_root)return;const i=this.m_stack.Reset();for(i.Push(this.m_root);i.GetCount()>0;){const s=i.Pop();if(s.aabb.TestContain(t))if(s.IsLeaf()){if(!e(s))return}else i.Push(a(s.child1)),i.Push(a(s.child2))}}RayCast(t,e){if(null===this.m_root)return;const i=t.p1,s=t.p2,n=o.b2Vec2.SubVV(s,i,m.s_r);n.Normalize();const l=o.b2Vec2.CrossOneV(n,m.s_v),c=o.b2Vec2.AbsV(l,m.s_abs_v);let _=t.maxFraction;const h=m.s_segmentAABB;let u=i.x+_*(s.x-i.x),d=i.y+_*(s.y-i.y);h.lowerBound.x=o.b2Min(i.x,u),h.lowerBound.y=o.b2Min(i.y,d),h.upperBound.x=o.b2Max(i.x,u),h.upperBound.y=o.b2Max(i.y,d);const b=this.m_stack.Reset();for(b.Push(this.m_root);b.GetCount()>0;){const n=b.Pop();if(!r.b2TestOverlapAABB(n.aabb,h))continue;const p=n.aabb.GetCenter(),f=n.aabb.GetExtents();if(!(o.b2Abs(o.b2Vec2.DotVV(l,o.b2Vec2.SubVV(i,p,o.b2Vec2.s_t0)))-o.b2Vec2.DotVV(c,f)>0))if(n.IsLeaf()){const r=m.s_subInput;r.p1.Copy(t.p1),r.p2.Copy(t.p2),r.maxFraction=_;const a=e(r,n);if(0===a)return;a>0&&(_=a,u=i.x+_*(s.x-i.x),d=i.y+_*(s.y-i.y),h.lowerBound.x=o.b2Min(i.x,u),h.lowerBound.y=o.b2Min(i.y,d),h.upperBound.x=o.b2Max(i.x,u),h.upperBound.y=o.b2Max(i.y,d))}else b.Push(a(n.child1)),b.Push(a(n.child2))}}AllocateNode(){if(this.m_freeList){const t=this.m_freeList;return this.m_freeList=t.parent,t.parent=null,t.child1=null,t.child2=null,t.height=0,delete t.userData,t}return new l(m.s_node_id++)}FreeNode(t){t.parent=this.m_freeList,t.child1=null,t.child2=null,t.height=-1,delete t.userData,this.m_freeList=t}CreateProxy(t,e){const i=this.AllocateNode(),o=s.b2_aabbExtension,n=s.b2_aabbExtension;return i.aabb.lowerBound.x=t.lowerBound.x-o,i.aabb.lowerBound.y=t.lowerBound.y-n,i.aabb.upperBound.x=t.upperBound.x+o,i.aabb.upperBound.y=t.upperBound.y+n,i.userData=e,i.height=0,this.InsertLeaf(i),i}DestroyProxy(t){this.RemoveLeaf(t),this.FreeNode(t)}MoveProxy(t,e,i){if(t.aabb.Contains(e))return!1;this.RemoveLeaf(t);const o=s.b2_aabbExtension+s.b2_aabbMultiplier*(i.x>0?i.x:-i.x),n=s.b2_aabbExtension+s.b2_aabbMultiplier*(i.y>0?i.y:-i.y);return t.aabb.lowerBound.x=e.lowerBound.x-o,t.aabb.lowerBound.y=e.lowerBound.y-n,t.aabb.upperBound.x=e.upperBound.x+o,t.aabb.upperBound.y=e.upperBound.y+n,this.InsertLeaf(t),!0}InsertLeaf(t){if(++this.m_insertionCount,null===this.m_root)return this.m_root=t,void(this.m_root.parent=null);const e=t.aabb;let i=this.m_root;for(;!i.IsLeaf();){const t=a(i.child1),s=a(i.child2),o=i.aabb.GetPerimeter(),n=m.s_combinedAABB;n.Combine2(i.aabb,e);const r=n.GetPerimeter(),l=2*r,c=2*(r-o);let _;const h=m.s_aabb;let u,d,b;if(t.IsLeaf()?(h.Combine2(e,t.aabb),_=h.GetPerimeter()+c):(h.Combine2(e,t.aabb),u=t.aabb.GetPerimeter(),_=(d=h.GetPerimeter())-u+c),s.IsLeaf()?(h.Combine2(e,s.aabb),b=h.GetPerimeter()+c):(h.Combine2(e,s.aabb),u=s.aabb.GetPerimeter(),b=(d=h.GetPerimeter())-u+c),l<_&&l<b)break;i=_<b?t:s}const s=i,n=s.parent,r=this.AllocateNode();r.parent=n,delete r.userData,r.aabb.Combine2(e,s.aabb),r.height=s.height+1,n?(n.child1===s?n.child1=r:n.child2=r,r.child1=s,r.child2=t,s.parent=r,t.parent=r):(r.child1=s,r.child2=t,s.parent=r,t.parent=r,this.m_root=r);let l=t.parent;for(;null!==l;){const t=a((l=this.Balance(l)).child1),e=a(l.child2);l.height=1+o.b2Max(t.height,e.height),l.aabb.Combine2(t.aabb,e.aabb),l=l.parent}}RemoveLeaf(t){if(t===this.m_root)return void(this.m_root=null);const e=a(t.parent),i=e&&e.parent;let s;if(s=e.child1===t?a(e.child2):a(e.child1),i){i.child1===e?i.child1=s:i.child2=s,s.parent=i,this.FreeNode(e);let t=i;for(;t;){const e=a((t=this.Balance(t)).child1),i=a(t.child2);t.aabb.Combine2(e.aabb,i.aabb),t.height=1+o.b2Max(e.height,i.height),t=t.parent}}else this.m_root=s,s.parent=null,this.FreeNode(e)}Balance(t){if(t.IsLeaf()||t.height<2)return t;const e=a(t.child1),i=a(t.child2),s=i.height-e.height;if(s>1){const s=a(i.child1),n=a(i.child2);return i.child1=t,i.parent=t.parent,t.parent=i,null!==i.parent?i.parent.child1===t?i.parent.child1=i:i.parent.child2=i:this.m_root=i,s.height>n.height?(i.child2=s,t.child2=n,n.parent=t,t.aabb.Combine2(e.aabb,n.aabb),i.aabb.Combine2(t.aabb,s.aabb),t.height=1+o.b2Max(e.height,n.height),i.height=1+o.b2Max(t.height,s.height)):(i.child2=n,t.child2=s,s.parent=t,t.aabb.Combine2(e.aabb,s.aabb),i.aabb.Combine2(t.aabb,n.aabb),t.height=1+o.b2Max(e.height,s.height),i.height=1+o.b2Max(t.height,n.height)),i}if(s<-1){const s=a(e.child1),n=a(e.child2);return e.child1=t,e.parent=t.parent,t.parent=e,null!==e.parent?e.parent.child1===t?e.parent.child1=e:e.parent.child2=e:this.m_root=e,s.height>n.height?(e.child2=s,t.child1=n,n.parent=t,t.aabb.Combine2(i.aabb,n.aabb),e.aabb.Combine2(t.aabb,s.aabb),t.height=1+o.b2Max(i.height,n.height),e.height=1+o.b2Max(t.height,s.height)):(e.child2=n,t.child1=s,s.parent=t,t.aabb.Combine2(i.aabb,s.aabb),e.aabb.Combine2(t.aabb,n.aabb),t.height=1+o.b2Max(i.height,s.height),e.height=1+o.b2Max(t.height,n.height)),e}return t}GetHeight(){return null===this.m_root?0:this.m_root.height}static GetAreaNode(t){if(null===t)return 0;if(t.IsLeaf())return 0;let e=t.aabb.GetPerimeter();return e+=m.GetAreaNode(t.child1),e+=m.GetAreaNode(t.child2)}GetAreaRatio(){if(null===this.m_root)return 0;const t=this.m_root.aabb.GetPerimeter();return m.GetAreaNode(this.m_root)/t}ComputeHeightNode(t){if(!t||t.IsLeaf())return 0;const e=this.ComputeHeightNode(t.child1),i=this.ComputeHeightNode(t.child2);return 1+o.b2Max(e,i)}ComputeHeight(){return this.ComputeHeightNode(this.m_root)}ValidateStructure(t){if(null===t)return;this.m_root;const e=t;if(e.IsLeaf())return;const i=a(e.child1),s=a(e.child2);this.ValidateStructure(i),this.ValidateStructure(s)}ValidateMetrics(t){if(null===t)return;const e=t;if(e.IsLeaf())return;const i=a(e.child1),s=a(e.child2);m.s_aabb.Combine2(i.aabb,s.aabb),this.ValidateMetrics(i),this.ValidateMetrics(s)}Validate(){}static GetMaxBalanceNode(t,e){if(null===t)return e;if(t.height<=1)return e;const i=a(t.child1),s=a(t.child2),n=o.b2Abs(s.height-i.height);return o.b2Max(e,n)}GetMaxBalance(){return m.GetMaxBalanceNode(this.m_root,0)}RebuildBottomUp(){this.Validate()}static ShiftOriginNode(t,e){if(null===t)return;if(t.height<=1)return;const i=t.child1,s=t.child2;m.ShiftOriginNode(i,e),m.ShiftOriginNode(s,e),t.aabb.lowerBound.SelfSub(e),t.aabb.upperBound.SelfSub(e)}ShiftOrigin(t){m.ShiftOriginNode(this.m_root,t)}}m.s_r=new o.b2Vec2,m.s_v=new o.b2Vec2,m.s_abs_v=new o.b2Vec2,m.s_segmentAABB=new r.b2AABB,m.s_subInput=new r.b2RayCastInput,m.s_combinedAABB=new r.b2AABB,m.s_aabb=new r.b2AABB,m.s_node_id=0,e.b2DynamicTree=m},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(2),r=i(2),a=new o.b2Vec2,l=new o.b2Vec2,m=new o.b2Vec2,c=new o.b2Vec2;function _(t,e,i,n,r){const _=t.m_vertices,h=t.m_normals,u=n.m_count,d=n.m_vertices,b=o.b2Rot.MulRV(e.q,h[i],a),p=o.b2Rot.MulTRV(r.q,b,l);let f=0,y=s.b2_maxFloat;for(let t=0;t<u;++t){const e=o.b2Vec2.DotVV(d[t],p);e<y&&(y=e,f=t)}const V=o.b2Transform.MulXV(e,_[i],m),x=o.b2Transform.MulXV(r,d[f],c);return o.b2Vec2.DotVV(o.b2Vec2.SubVV(x,V,o.b2Vec2.s_t0),b)}const h=new o.b2Vec2,u=new o.b2Vec2;function d(t,e,i,n,r){const a=e.m_count,l=e.m_normals,m=o.b2Vec2.SubVV(o.b2Transform.MulXV(r,n.m_centroid,o.b2Vec2.s_t0),o.b2Transform.MulXV(i,e.m_centroid,o.b2Vec2.s_t1),h),c=o.b2Rot.MulTRV(i.q,m,u);let d=0,b=-s.b2_maxFloat;for(let t=0;t<a;++t){const e=o.b2Vec2.DotVV(l[t],c);e>b&&(b=e,d=t)}let p=_(e,i,d,n,r);const f=(d+a-1)%a,y=_(e,i,f,n,r),V=(d+1)%a,x=_(e,i,V,n,r);let S=0,B=0,C=0;if(y>p&&y>x)C=-1,S=f,B=y;else{if(!(x>p))return t[0]=d,p;C=1,S=V,B=x}for(;(p=_(e,i,d=-1===C?(S+a-1)%a:(S+1)%a,n,r))>B;)S=d,B=p;return t[0]=S,B}const b=new o.b2Vec2;const p=r.b2ClipVertex.MakeArray(2),f=r.b2ClipVertex.MakeArray(2),y=r.b2ClipVertex.MakeArray(2),V=[0],x=[0],S=new o.b2Vec2,B=new o.b2Vec2,C=new o.b2Vec2,A=new o.b2Vec2,w=new o.b2Vec2,g=new o.b2Vec2,v=new o.b2Vec2,M=new o.b2Vec2;e.b2CollidePolygons=function(t,e,i,a,l){t.pointCount=0;const m=e.m_radius+a.m_radius,c=V;c[0]=0;const _=d(c,e,i,a,l);if(_>m)return;const h=x;h[0]=0;const u=d(h,a,l,e,i);if(u>m)return;let P,I,D,G,T=0,F=0;u>.98*_+.001?(P=a,I=e,D=l,G=i,T=h[0],t.type=r.b2ManifoldType.e_faceB,F=1):(P=e,I=a,D=i,G=l,T=c[0],t.type=r.b2ManifoldType.e_faceA,F=0);const R=p;!function(t,e,i,r,a,l){const m=e.m_normals,c=a.m_count,_=a.m_vertices,h=a.m_normals,u=o.b2Rot.MulTRV(l.q,o.b2Rot.MulRV(i.q,m[r],o.b2Vec2.s_t0),b);let d=0,p=s.b2_maxFloat;for(let t=0;t<c;++t){const e=o.b2Vec2.DotVV(u,h[t]);e<p&&(p=e,d=t)}const f=d,y=(f+1)%c,V=t[0];o.b2Transform.MulXV(l,_[f],V.v);const x=V.id.cf;x.indexA=r,x.indexB=f,x.typeA=n.b2ContactFeatureType.e_face,x.typeB=n.b2ContactFeatureType.e_vertex;const S=t[1];o.b2Transform.MulXV(l,_[y],S.v);const B=S.id.cf;B.indexA=r,B.indexB=y,B.typeA=n.b2ContactFeatureType.e_face,B.typeB=n.b2ContactFeatureType.e_vertex}(R,P,D,T,I,G);const L=P.m_count,k=P.m_vertices,E=T,q=(T+1)%L,z=k[E],O=k[q],J=o.b2Vec2.SubVV(O,z,S);J.Normalize();const j=o.b2Vec2.CrossVOne(J,B),N=o.b2Vec2.MidVV(z,O,C),W=o.b2Rot.MulRV(D.q,J,w),X=o.b2Vec2.CrossVOne(W,A),U=o.b2Transform.MulXV(D,z,v),Z=o.b2Transform.MulXV(D,O,M),H=o.b2Vec2.DotVV(X,U),Q=-o.b2Vec2.DotVV(W,U)+m,Y=o.b2Vec2.DotVV(W,Z)+m,K=f,$=y;let tt;const et=o.b2Vec2.NegV(W,g);if((tt=r.b2ClipSegmentToLine(K,R,et,Q,E))<2)return;if((tt=r.b2ClipSegmentToLine($,K,W,Y,q))<2)return;t.localNormal.Copy(j),t.localPoint.Copy(N);let it=0;for(let e=0;e<s.b2_maxManifoldPoints;++e){const i=$[e];if(o.b2Vec2.DotVV(X,i.v)-H<=m){const e=t.points[it];if(o.b2Transform.MulTXV(G,i.v,e.localPoint),e.id.Copy(i.id),F){const t=e.id.cf;e.id.cf.indexA=t.indexB,e.id.cf.indexB=t.indexA,e.id.cf.typeA=t.typeB,e.id.cf.typeB=t.typeA}++it}}t.pointCount=it}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(2),r=i(4);class a{constructor(){this.categoryBits=1,this.maskBits=65535,this.groupIndex=0}Clone(){return(new a).Copy(this)}Copy(t){return this.categoryBits=t.categoryBits,this.maskBits=t.maskBits,this.groupIndex=t.groupIndex||0,this}}a.DEFAULT=new a,e.b2Filter=a;e.b2FixtureDef=class{constructor(){this.userData=null,this.friction=.2,this.restitution=0,this.density=0,this.isSensor=!1,this.filter=new a}};class l{constructor(t){this.aabb=new n.b2AABB,this.childIndex=0,this.fixture=t}}e.b2FixtureProxy=l;class m{constructor(t,e){this.m_density=0,this.m_next=null,this.m_friction=0,this.m_restitution=0,this.m_proxies=[],this.m_proxyCount=0,this.m_filter=new a,this.m_isSensor=!1,this.m_userData=null,this.m_body=e,this.m_shape=t.shape.Clone()}GetType(){return this.m_shape.GetType()}GetShape(){return this.m_shape}SetSensor(t){t!==this.m_isSensor&&(this.m_body.SetAwake(!0),this.m_isSensor=t)}IsSensor(){return this.m_isSensor}SetFilterData(t){this.m_filter.Copy(t),this.Refilter()}GetFilterData(){return this.m_filter}Refilter(){let t=this.m_body.GetContactList();for(;t;){const e=t.contact,i=e.GetFixtureA(),s=e.GetFixtureB();i!==this&&s!==this||e.FlagForFiltering(),t=t.next}const e=this.m_body.GetWorld();if(null===e)return;const i=e.m_contactManager.m_broadPhase;for(let t=0;t<this.m_proxyCount;++t)i.TouchProxy(this.m_proxies[t].treeNode)}GetBody(){return this.m_body}GetNext(){return this.m_next}GetUserData(){return this.m_userData}SetUserData(t){this.m_userData=t}TestPoint(t){return this.m_shape.TestPoint(this.m_body.GetTransform(),t)}ComputeDistance(t,e,i){return this.m_shape.ComputeDistance(this.m_body.GetTransform(),t,e,i)}RayCast(t,e,i){return this.m_shape.RayCast(t,e,this.m_body.GetTransform(),i)}GetMassData(t=new r.b2MassData){return this.m_shape.ComputeMass(t,this.m_density),t}SetDensity(t){this.m_density=t}GetDensity(){return this.m_density}GetFriction(){return this.m_friction}SetFriction(t){this.m_friction=t}GetRestitution(){return this.m_restitution}SetRestitution(t){this.m_restitution=t}GetAABB(t){return this.m_proxies[t].aabb}Dump(t,e){t("    const fd: b2FixtureDef = new b2FixtureDef();\n"),t("    fd.friction = %.15f;\n",this.m_friction),t("    fd.restitution = %.15f;\n",this.m_restitution),t("    fd.density = %.15f;\n",this.m_density),t("    fd.isSensor = %s;\n",this.m_isSensor?"true":"false"),t("    fd.filter.categoryBits = %d;\n",this.m_filter.categoryBits),t("    fd.filter.maskBits = %d;\n",this.m_filter.maskBits),t("    fd.filter.groupIndex = %d;\n",this.m_filter.groupIndex),this.m_shape.Dump(t),t("\n"),t("    fd.shape = shape;\n"),t("\n"),t("    bodies[%d].CreateFixture(fd);\n",e)}Create(t){this.m_userData=t.userData,this.m_friction=s.b2Maybe(t.friction,.2),this.m_restitution=s.b2Maybe(t.restitution,0),this.m_next=null,this.m_filter.Copy(s.b2Maybe(t.filter,a.DEFAULT)),this.m_isSensor=s.b2Maybe(t.isSensor,!1),this.m_proxies=s.b2MakeArray(this.m_shape.GetChildCount(),t=>new l(this)),this.m_proxyCount=0,this.m_density=s.b2Maybe(t.density,0)}Destroy(){}CreateProxies(t){const e=this.m_body.m_world.m_contactManager.m_broadPhase;this.m_proxyCount=this.m_shape.GetChildCount();for(let i=0;i<this.m_proxyCount;++i){const s=this.m_proxies[i]=new l(this);this.m_shape.ComputeAABB(s.aabb,t,i),s.treeNode=e.CreateProxy(s.aabb,s),s.childIndex=i}}DestroyProxies(){const t=this.m_body.m_world.m_contactManager.m_broadPhase;for(let e=0;e<this.m_proxyCount;++e){const i=this.m_proxies[e];delete i.treeNode.userData,t.DestroyProxy(i.treeNode),delete i.treeNode}this.m_proxyCount=0}TouchProxies(){const t=this.m_body.m_world.m_contactManager.m_broadPhase,e=this.m_proxyCount;for(let i=0;i<e;++i)t.TouchProxy(this.m_proxies[i].treeNode)}Synchronize(t,e){if(0===this.m_proxyCount)return;const i=this.m_body.m_world.m_contactManager.m_broadPhase;for(let s=0;s<this.m_proxyCount;++s){const n=this.m_proxies[s],r=m.Synchronize_s_aabb1,a=m.Synchronize_s_aabb2;this.m_shape.ComputeAABB(r,t,s),this.m_shape.ComputeAABB(a,e,s),n.aabb.Combine2(r,a);const l=o.b2Vec2.SubVV(e.p,t.p,m.Synchronize_s_displacement);i.MoveProxy(n.treeNode,n.aabb,l)}}}m.Synchronize_s_aabb1=new n.b2AABB,m.Synchronize_s_aabb2=new n.b2AABB,m.Synchronize_s_displacement=new o.b2Vec2,e.b2Fixture=m},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3),r=i(20);e.b2AreaJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_areaJoint),this.bodies=[],this.frequencyHz=0,this.dampingRatio=0}AddBody(t){this.bodies.push(t),1===this.bodies.length?this.bodyA=t:2===this.bodies.length&&(this.bodyB=t)}};e.b2AreaJoint=class extends n.b2Joint{constructor(t){super(t),this.m_frequencyHz=0,this.m_dampingRatio=0,this.m_impulse=0,this.m_targetArea=0,this.m_bodies=t.bodies,this.m_frequencyHz=s.b2Maybe(t.frequencyHz,0),this.m_dampingRatio=s.b2Maybe(t.dampingRatio,0),this.m_targetLengths=s.b2MakeNumberArray(t.bodies.length),this.m_normals=o.b2Vec2.MakeArray(t.bodies.length),this.m_joints=[],this.m_deltas=o.b2Vec2.MakeArray(t.bodies.length),this.m_delta=new o.b2Vec2;const e=new r.b2DistanceJointDef;e.frequencyHz=this.m_frequencyHz,e.dampingRatio=this.m_dampingRatio,this.m_targetArea=0;for(let t=0;t<this.m_bodies.length;++t){const i=this.m_bodies[t],s=this.m_bodies[(t+1)%this.m_bodies.length],n=i.GetWorldCenter(),r=s.GetWorldCenter();this.m_targetLengths[t]=o.b2Vec2.DistanceVV(n,r),this.m_targetArea+=o.b2Vec2.CrossVV(n,r),e.Initialize(i,s,n,r),this.m_joints[t]=i.GetWorld().CreateJoint(e)}this.m_targetArea*=.5}GetAnchorA(t){return t}GetAnchorB(t){return t}GetReactionForce(t,e){return e}GetReactionTorque(t){return 0}SetFrequency(t){this.m_frequencyHz=t;for(let e=0;e<this.m_joints.length;++e)this.m_joints[e].SetFrequency(t)}GetFrequency(){return this.m_frequencyHz}SetDampingRatio(t){this.m_dampingRatio=t;for(let e=0;e<this.m_joints.length;++e)this.m_joints[e].SetDampingRatio(t)}GetDampingRatio(){return this.m_dampingRatio}Dump(t){t("Area joint dumping is not supported.\n")}InitVelocityConstraints(t){for(let e=0;e<this.m_bodies.length;++e){const i=this.m_bodies[(e+this.m_bodies.length-1)%this.m_bodies.length],s=this.m_bodies[(e+1)%this.m_bodies.length],n=t.positions[i.m_islandIndex].c,r=t.positions[s.m_islandIndex].c,a=this.m_deltas[e];o.b2Vec2.SubVV(r,n,a)}if(t.step.warmStarting){this.m_impulse*=t.step.dtRatio;for(let e=0;e<this.m_bodies.length;++e){const i=this.m_bodies[e],s=t.velocities[i.m_islandIndex].v,o=this.m_deltas[e];s.x+=i.m_invMass*o.y*.5*this.m_impulse,s.y+=i.m_invMass*-o.x*.5*this.m_impulse}}else this.m_impulse=0}SolveVelocityConstraints(t){let e=0,i=0;for(let s=0;s<this.m_bodies.length;++s){const n=this.m_bodies[s],r=t.velocities[n.m_islandIndex].v,a=this.m_deltas[s];e+=a.LengthSquared()/n.GetMass(),i+=o.b2Vec2.CrossVV(r,a)}const s=-2*i/e;this.m_impulse+=s;for(let e=0;e<this.m_bodies.length;++e){const i=this.m_bodies[e],o=t.velocities[i.m_islandIndex].v,n=this.m_deltas[e];o.x+=i.m_invMass*n.y*.5*s,o.y+=i.m_invMass*-n.x*.5*s}}SolvePositionConstraints(t){let e=0,i=0;for(let n=0;n<this.m_bodies.length;++n){const r=this.m_bodies[n],a=this.m_bodies[(n+1)%this.m_bodies.length],l=t.positions[r.m_islandIndex].c,m=t.positions[a.m_islandIndex].c,c=o.b2Vec2.SubVV(m,l,this.m_delta);let _=c.Length();_<s.b2_epsilon&&(_=1),this.m_normals[n].x=c.y/_,this.m_normals[n].y=-c.x/_,e+=_,i+=o.b2Vec2.CrossVV(l,m)}i*=.5;const n=.5*(this.m_targetArea-i)/e;let r=!0;for(let e=0;e<this.m_bodies.length;++e){const i=this.m_bodies[e],a=t.positions[i.m_islandIndex].c,l=(e+1)%this.m_bodies.length,m=o.b2Vec2.AddVV(this.m_normals[e],this.m_normals[l],this.m_delta);m.SelfMul(n);const c=m.LengthSquared();c>o.b2Sq(s.b2_maxLinearCorrection)&&m.SelfMul(s.b2_maxLinearCorrection/o.b2Sqrt(c)),c>o.b2Sq(s.b2_linearSlop)&&(r=!1),a.x+=m.x,a.y+=m.y}return r}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2FrictionJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_frictionJoint),this.localAnchorA=new o.b2Vec2,this.localAnchorB=new o.b2Vec2,this.maxForce=0,this.maxTorque=0}Initialize(t,e,i){this.bodyA=t,this.bodyB=e,this.bodyA.GetLocalPoint(i,this.localAnchorA),this.bodyB.GetLocalPoint(i,this.localAnchorB)}};class r extends n.b2Joint{constructor(t){super(t),this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_linearImpulse=new o.b2Vec2,this.m_angularImpulse=0,this.m_maxForce=0,this.m_maxTorque=0,this.m_indexA=0,this.m_indexB=0,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_linearMass=new o.b2Mat22,this.m_angularMass=0,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_K=new o.b2Mat22,this.m_localAnchorA.Copy(t.localAnchorA),this.m_localAnchorB.Copy(t.localAnchorB),this.m_linearImpulse.SetZero(),this.m_maxForce=s.b2Maybe(t.maxForce,0),this.m_maxTorque=s.b2Maybe(t.maxTorque,0),this.m_linearMass.SetZero()}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].a,i=t.velocities[this.m_indexA].v;let s=t.velocities[this.m_indexA].w;const n=t.positions[this.m_indexB].a,r=t.velocities[this.m_indexB].v;let a=t.velocities[this.m_indexB].w;const l=this.m_qA.SetAngle(e),m=this.m_qB.SetAngle(n);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const c=o.b2Rot.MulRV(l,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const _=o.b2Rot.MulRV(m,this.m_lalcB,this.m_rB),h=this.m_invMassA,u=this.m_invMassB,d=this.m_invIA,b=this.m_invIB,p=this.m_K;if(p.ex.x=h+u+d*c.y*c.y+b*_.y*_.y,p.ex.y=-d*c.x*c.y-b*_.x*_.y,p.ey.x=p.ex.y,p.ey.y=h+u+d*c.x*c.x+b*_.x*_.x,p.GetInverse(this.m_linearMass),this.m_angularMass=d+b,this.m_angularMass>0&&(this.m_angularMass=1/this.m_angularMass),t.step.warmStarting){this.m_linearImpulse.SelfMul(t.step.dtRatio),this.m_angularImpulse*=t.step.dtRatio;const e=this.m_linearImpulse;i.SelfMulSub(h,e),s-=d*(o.b2Vec2.CrossVV(this.m_rA,e)+this.m_angularImpulse),r.SelfMulAdd(u,e),a+=b*(o.b2Vec2.CrossVV(this.m_rB,e)+this.m_angularImpulse)}else this.m_linearImpulse.SetZero(),this.m_angularImpulse=0;t.velocities[this.m_indexA].w=s,t.velocities[this.m_indexB].w=a}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let n=t.velocities[this.m_indexB].w;const a=this.m_invMassA,l=this.m_invMassB,m=this.m_invIA,c=this.m_invIB,_=t.step.dt;{const t=n-i;let e=-this.m_angularMass*t;const s=this.m_angularImpulse,r=_*this.m_maxTorque;this.m_angularImpulse=o.b2Clamp(this.m_angularImpulse+e,-r,r),i-=m*(e=this.m_angularImpulse-s),n+=c*e}{const t=o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(s,n,this.m_rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(e,i,this.m_rA,o.b2Vec2.s_t1),r.SolveVelocityConstraints_s_Cdot_v2),h=o.b2Mat22.MulMV(this.m_linearMass,t,r.SolveVelocityConstraints_s_impulseV).SelfNeg(),u=r.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);this.m_linearImpulse.SelfAdd(h);const d=_*this.m_maxForce;this.m_linearImpulse.LengthSquared()>d*d&&(this.m_linearImpulse.Normalize(),this.m_linearImpulse.SelfMul(d)),o.b2Vec2.SubVV(this.m_linearImpulse,u,h),e.SelfMulSub(a,h),i-=m*o.b2Vec2.CrossVV(this.m_rA,h),s.SelfMulAdd(l,h),n+=c*o.b2Vec2.CrossVV(this.m_rB,h)}t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=n}SolvePositionConstraints(t){return!0}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return e.x=t*this.m_linearImpulse.x,e.y=t*this.m_linearImpulse.y,e}GetReactionTorque(t){return t*this.m_angularImpulse}GetLocalAnchorA(){return this.m_localAnchorA}GetLocalAnchorB(){return this.m_localAnchorB}SetMaxForce(t){this.m_maxForce=t}GetMaxForce(){return this.m_maxForce}SetMaxTorque(t){this.m_maxTorque=t}GetMaxTorque(){return this.m_maxTorque}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2FrictionJointDef = new b2FrictionJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.maxForce = %.15f;\n",this.m_maxForce),t("  jd.maxTorque = %.15f;\n",this.m_maxTorque),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.SolveVelocityConstraints_s_Cdot_v2=new o.b2Vec2,r.SolveVelocityConstraints_s_impulseV=new o.b2Vec2,r.SolveVelocityConstraints_s_oldImpulseV=new o.b2Vec2,e.b2FrictionJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2GearJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_gearJoint),this.ratio=1}};class r extends n.b2Joint{constructor(t){let e,i;super(t),this.m_typeA=n.b2JointType.e_unknownJoint,this.m_typeB=n.b2JointType.e_unknownJoint,this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_localAnchorC=new o.b2Vec2,this.m_localAnchorD=new o.b2Vec2,this.m_localAxisC=new o.b2Vec2,this.m_localAxisD=new o.b2Vec2,this.m_referenceAngleA=0,this.m_referenceAngleB=0,this.m_constant=0,this.m_ratio=0,this.m_impulse=0,this.m_indexA=0,this.m_indexB=0,this.m_indexC=0,this.m_indexD=0,this.m_lcA=new o.b2Vec2,this.m_lcB=new o.b2Vec2,this.m_lcC=new o.b2Vec2,this.m_lcD=new o.b2Vec2,this.m_mA=0,this.m_mB=0,this.m_mC=0,this.m_mD=0,this.m_iA=0,this.m_iB=0,this.m_iC=0,this.m_iD=0,this.m_JvAC=new o.b2Vec2,this.m_JvBD=new o.b2Vec2,this.m_JwA=0,this.m_JwB=0,this.m_JwC=0,this.m_JwD=0,this.m_mass=0,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_qC=new o.b2Rot,this.m_qD=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_lalcC=new o.b2Vec2,this.m_lalcD=new o.b2Vec2,this.m_joint1=t.joint1,this.m_joint2=t.joint2,this.m_typeA=this.m_joint1.GetType(),this.m_typeB=this.m_joint2.GetType(),this.m_bodyC=this.m_joint1.GetBodyA(),this.m_bodyA=this.m_joint1.GetBodyB();const r=this.m_bodyA.m_xf,a=this.m_bodyA.m_sweep.a,l=this.m_bodyC.m_xf,m=this.m_bodyC.m_sweep.a;if(this.m_typeA===n.b2JointType.e_revoluteJoint){const i=t.joint1;this.m_localAnchorC.Copy(i.m_localAnchorA),this.m_localAnchorA.Copy(i.m_localAnchorB),this.m_referenceAngleA=i.m_referenceAngle,this.m_localAxisC.SetZero(),e=a-m-this.m_referenceAngleA}else{const i=t.joint1;this.m_localAnchorC.Copy(i.m_localAnchorA),this.m_localAnchorA.Copy(i.m_localAnchorB),this.m_referenceAngleA=i.m_referenceAngle,this.m_localAxisC.Copy(i.m_localXAxisA);const s=this.m_localAnchorC,n=o.b2Rot.MulTRV(l.q,o.b2Vec2.AddVV(o.b2Rot.MulRV(r.q,this.m_localAnchorA,o.b2Vec2.s_t0),o.b2Vec2.SubVV(r.p,l.p,o.b2Vec2.s_t1),o.b2Vec2.s_t0),o.b2Vec2.s_t0);e=o.b2Vec2.DotVV(o.b2Vec2.SubVV(n,s,o.b2Vec2.s_t0),this.m_localAxisC)}this.m_bodyD=this.m_joint2.GetBodyA(),this.m_bodyB=this.m_joint2.GetBodyB();const c=this.m_bodyB.m_xf,_=this.m_bodyB.m_sweep.a,h=this.m_bodyD.m_xf,u=this.m_bodyD.m_sweep.a;if(this.m_typeB===n.b2JointType.e_revoluteJoint){const e=t.joint2;this.m_localAnchorD.Copy(e.m_localAnchorA),this.m_localAnchorB.Copy(e.m_localAnchorB),this.m_referenceAngleB=e.m_referenceAngle,this.m_localAxisD.SetZero(),i=_-u-this.m_referenceAngleB}else{const e=t.joint2;this.m_localAnchorD.Copy(e.m_localAnchorA),this.m_localAnchorB.Copy(e.m_localAnchorB),this.m_referenceAngleB=e.m_referenceAngle,this.m_localAxisD.Copy(e.m_localXAxisA);const s=this.m_localAnchorD,n=o.b2Rot.MulTRV(h.q,o.b2Vec2.AddVV(o.b2Rot.MulRV(c.q,this.m_localAnchorB,o.b2Vec2.s_t0),o.b2Vec2.SubVV(c.p,h.p,o.b2Vec2.s_t1),o.b2Vec2.s_t0),o.b2Vec2.s_t0);i=o.b2Vec2.DotVV(o.b2Vec2.SubVV(n,s,o.b2Vec2.s_t0),this.m_localAxisD)}this.m_ratio=s.b2Maybe(t.ratio,1),this.m_constant=e+this.m_ratio*i,this.m_impulse=0}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_indexC=this.m_bodyC.m_islandIndex,this.m_indexD=this.m_bodyD.m_islandIndex,this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter),this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter),this.m_mA=this.m_bodyA.m_invMass,this.m_mB=this.m_bodyB.m_invMass,this.m_mC=this.m_bodyC.m_invMass,this.m_mD=this.m_bodyD.m_invMass,this.m_iA=this.m_bodyA.m_invI,this.m_iB=this.m_bodyB.m_invI,this.m_iC=this.m_bodyC.m_invI,this.m_iD=this.m_bodyD.m_invI;const e=t.positions[this.m_indexA].a,i=t.velocities[this.m_indexA].v;let s=t.velocities[this.m_indexA].w;const a=t.positions[this.m_indexB].a,l=t.velocities[this.m_indexB].v;let m=t.velocities[this.m_indexB].w;const c=t.positions[this.m_indexC].a,_=t.velocities[this.m_indexC].v;let h=t.velocities[this.m_indexC].w;const u=t.positions[this.m_indexD].a,d=t.velocities[this.m_indexD].v;let b=t.velocities[this.m_indexD].w;const p=this.m_qA.SetAngle(e),f=this.m_qB.SetAngle(a),y=this.m_qC.SetAngle(c),V=this.m_qD.SetAngle(u);if(this.m_mass=0,this.m_typeA===n.b2JointType.e_revoluteJoint)this.m_JvAC.SetZero(),this.m_JwA=1,this.m_JwC=1,this.m_mass+=this.m_iA+this.m_iC;else{const t=o.b2Rot.MulRV(y,this.m_localAxisC,r.InitVelocityConstraints_s_u);o.b2Vec2.SubVV(this.m_localAnchorC,this.m_lcC,this.m_lalcC);const e=o.b2Rot.MulRV(y,this.m_lalcC,r.InitVelocityConstraints_s_rC);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_lcA,this.m_lalcA);const i=o.b2Rot.MulRV(p,this.m_lalcA,r.InitVelocityConstraints_s_rA);this.m_JvAC.Copy(t),this.m_JwC=o.b2Vec2.CrossVV(e,t),this.m_JwA=o.b2Vec2.CrossVV(i,t),this.m_mass+=this.m_mC+this.m_mA+this.m_iC*this.m_JwC*this.m_JwC+this.m_iA*this.m_JwA*this.m_JwA}if(this.m_typeB===n.b2JointType.e_revoluteJoint)this.m_JvBD.SetZero(),this.m_JwB=this.m_ratio,this.m_JwD=this.m_ratio,this.m_mass+=this.m_ratio*this.m_ratio*(this.m_iB+this.m_iD);else{const t=o.b2Rot.MulRV(V,this.m_localAxisD,r.InitVelocityConstraints_s_u);o.b2Vec2.SubVV(this.m_localAnchorD,this.m_lcD,this.m_lalcD);const e=o.b2Rot.MulRV(V,this.m_lalcD,r.InitVelocityConstraints_s_rD);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_lcB,this.m_lalcB);const i=o.b2Rot.MulRV(f,this.m_lalcB,r.InitVelocityConstraints_s_rB);o.b2Vec2.MulSV(this.m_ratio,t,this.m_JvBD),this.m_JwD=this.m_ratio*o.b2Vec2.CrossVV(e,t),this.m_JwB=this.m_ratio*o.b2Vec2.CrossVV(i,t),this.m_mass+=this.m_ratio*this.m_ratio*(this.m_mD+this.m_mB)+this.m_iD*this.m_JwD*this.m_JwD+this.m_iB*this.m_JwB*this.m_JwB}this.m_mass=this.m_mass>0?1/this.m_mass:0,t.step.warmStarting?(i.SelfMulAdd(this.m_mA*this.m_impulse,this.m_JvAC),s+=this.m_iA*this.m_impulse*this.m_JwA,l.SelfMulAdd(this.m_mB*this.m_impulse,this.m_JvBD),m+=this.m_iB*this.m_impulse*this.m_JwB,_.SelfMulSub(this.m_mC*this.m_impulse,this.m_JvAC),h-=this.m_iC*this.m_impulse*this.m_JwC,d.SelfMulSub(this.m_mD*this.m_impulse,this.m_JvBD),b-=this.m_iD*this.m_impulse*this.m_JwD):this.m_impulse=0,t.velocities[this.m_indexA].w=s,t.velocities[this.m_indexB].w=m,t.velocities[this.m_indexC].w=h,t.velocities[this.m_indexD].w=b}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let n=t.velocities[this.m_indexB].w;const r=t.velocities[this.m_indexC].v;let a=t.velocities[this.m_indexC].w;const l=t.velocities[this.m_indexD].v;let m=t.velocities[this.m_indexD].w,c=o.b2Vec2.DotVV(this.m_JvAC,o.b2Vec2.SubVV(e,r,o.b2Vec2.s_t0))+o.b2Vec2.DotVV(this.m_JvBD,o.b2Vec2.SubVV(s,l,o.b2Vec2.s_t0));c+=this.m_JwA*i-this.m_JwC*a+(this.m_JwB*n-this.m_JwD*m);const _=-this.m_mass*c;this.m_impulse+=_,e.SelfMulAdd(this.m_mA*_,this.m_JvAC),i+=this.m_iA*_*this.m_JwA,s.SelfMulAdd(this.m_mB*_,this.m_JvBD),n+=this.m_iB*_*this.m_JwB,r.SelfMulSub(this.m_mC*_,this.m_JvAC),a-=this.m_iC*_*this.m_JwC,l.SelfMulSub(this.m_mD*_,this.m_JvBD),m-=this.m_iD*_*this.m_JwD,t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=n,t.velocities[this.m_indexC].w=a,t.velocities[this.m_indexD].w=m}SolvePositionConstraints(t){const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const a=t.positions[this.m_indexB].c;let l=t.positions[this.m_indexB].a;const m=t.positions[this.m_indexC].c;let c=t.positions[this.m_indexC].a;const _=t.positions[this.m_indexD].c;let h=t.positions[this.m_indexD].a;const u=this.m_qA.SetAngle(i),d=this.m_qB.SetAngle(l),b=this.m_qC.SetAngle(c),p=this.m_qD.SetAngle(h);let f,y;const V=this.m_JvAC,x=this.m_JvBD;let S,B,C,A,w=0;if(this.m_typeA===n.b2JointType.e_revoluteJoint)V.SetZero(),S=1,C=1,w+=this.m_iA+this.m_iC,f=i-c-this.m_referenceAngleA;else{const t=o.b2Rot.MulRV(b,this.m_localAxisC,r.SolvePositionConstraints_s_u),i=o.b2Rot.MulRV(b,this.m_lalcC,r.SolvePositionConstraints_s_rC),s=o.b2Rot.MulRV(u,this.m_lalcA,r.SolvePositionConstraints_s_rA);V.Copy(t),C=o.b2Vec2.CrossVV(i,t),S=o.b2Vec2.CrossVV(s,t),w+=this.m_mC+this.m_mA+this.m_iC*C*C+this.m_iA*S*S;const n=this.m_lalcC,a=o.b2Rot.MulTRV(b,o.b2Vec2.AddVV(s,o.b2Vec2.SubVV(e,m,o.b2Vec2.s_t0),o.b2Vec2.s_t0),o.b2Vec2.s_t0);f=o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,n,o.b2Vec2.s_t0),this.m_localAxisC)}if(this.m_typeB===n.b2JointType.e_revoluteJoint)x.SetZero(),B=this.m_ratio,A=this.m_ratio,w+=this.m_ratio*this.m_ratio*(this.m_iB+this.m_iD),y=l-h-this.m_referenceAngleB;else{const t=o.b2Rot.MulRV(p,this.m_localAxisD,r.SolvePositionConstraints_s_u),e=o.b2Rot.MulRV(p,this.m_lalcD,r.SolvePositionConstraints_s_rD),i=o.b2Rot.MulRV(d,this.m_lalcB,r.SolvePositionConstraints_s_rB);o.b2Vec2.MulSV(this.m_ratio,t,x),A=this.m_ratio*o.b2Vec2.CrossVV(e,t),B=this.m_ratio*o.b2Vec2.CrossVV(i,t),w+=this.m_ratio*this.m_ratio*(this.m_mD+this.m_mB)+this.m_iD*A*A+this.m_iB*B*B;const s=this.m_lalcD,n=o.b2Rot.MulTRV(p,o.b2Vec2.AddVV(i,o.b2Vec2.SubVV(a,_,o.b2Vec2.s_t0),o.b2Vec2.s_t0),o.b2Vec2.s_t0);y=o.b2Vec2.DotVV(o.b2Vec2.SubVV(n,s,o.b2Vec2.s_t0),this.m_localAxisD)}const g=f+this.m_ratio*y-this.m_constant;let v=0;return w>0&&(v=-g/w),e.SelfMulAdd(this.m_mA*v,V),i+=this.m_iA*v*S,a.SelfMulAdd(this.m_mB*v,x),l+=this.m_iB*v*B,m.SelfMulSub(this.m_mC*v,V),c-=this.m_iC*v*C,_.SelfMulSub(this.m_mD*v,x),h-=this.m_iD*v*A,t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=l,t.positions[this.m_indexC].a=c,t.positions[this.m_indexD].a=h,0<s.b2_linearSlop}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return o.b2Vec2.MulSV(t*this.m_impulse,this.m_JvAC,e)}GetReactionTorque(t){return t*this.m_impulse*this.m_JwA}GetJoint1(){return this.m_joint1}GetJoint2(){return this.m_joint2}GetRatio(){return this.m_ratio}SetRatio(t){this.m_ratio=t}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex,s=this.m_joint1.m_index,o=this.m_joint2.m_index;t("  const jd: b2GearJointDef = new b2GearJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.joint1 = joints[%d];\n",s),t("  jd.joint2 = joints[%d];\n",o),t("  jd.ratio = %.15f;\n",this.m_ratio),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.InitVelocityConstraints_s_u=new o.b2Vec2,r.InitVelocityConstraints_s_rA=new o.b2Vec2,r.InitVelocityConstraints_s_rB=new o.b2Vec2,r.InitVelocityConstraints_s_rC=new o.b2Vec2,r.InitVelocityConstraints_s_rD=new o.b2Vec2,r.SolvePositionConstraints_s_u=new o.b2Vec2,r.SolvePositionConstraints_s_rA=new o.b2Vec2,r.SolvePositionConstraints_s_rB=new o.b2Vec2,r.SolvePositionConstraints_s_rC=new o.b2Vec2,r.SolvePositionConstraints_s_rD=new o.b2Vec2,e.b2GearJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2MotorJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_motorJoint),this.linearOffset=new o.b2Vec2(0,0),this.angularOffset=0,this.maxForce=1,this.maxTorque=1,this.correctionFactor=.3}Initialize(t,e){this.bodyA=t,this.bodyB=e,this.bodyA.GetLocalPoint(this.bodyB.GetPosition(),this.linearOffset);const i=this.bodyA.GetAngle(),s=this.bodyB.GetAngle();this.angularOffset=s-i}};class r extends n.b2Joint{constructor(t){super(t),this.m_linearOffset=new o.b2Vec2,this.m_angularOffset=0,this.m_linearImpulse=new o.b2Vec2,this.m_angularImpulse=0,this.m_maxForce=0,this.m_maxTorque=0,this.m_correctionFactor=.3,this.m_indexA=0,this.m_indexB=0,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_linearError=new o.b2Vec2,this.m_angularError=0,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_linearMass=new o.b2Mat22,this.m_angularMass=0,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_K=new o.b2Mat22,this.m_linearOffset.Copy(s.b2Maybe(t.linearOffset,o.b2Vec2.ZERO)),this.m_linearImpulse.SetZero(),this.m_maxForce=s.b2Maybe(t.maxForce,0),this.m_maxTorque=s.b2Maybe(t.maxTorque,0),this.m_correctionFactor=s.b2Maybe(t.correctionFactor,.3)}GetAnchorA(t){const e=this.m_bodyA.GetPosition();return t.x=e.x,t.y=e.y,t}GetAnchorB(t){const e=this.m_bodyB.GetPosition();return t.x=e.x,t.y=e.y,t}GetReactionForce(t,e){return o.b2Vec2.MulSV(t,this.m_linearImpulse,e)}GetReactionTorque(t){return t*this.m_angularImpulse}SetLinearOffset(t){o.b2Vec2.IsEqualToV(t,this.m_linearOffset)||(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_linearOffset.Copy(t))}GetLinearOffset(){return this.m_linearOffset}SetAngularOffset(t){t!==this.m_angularOffset&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_angularOffset=t)}GetAngularOffset(){return this.m_angularOffset}SetMaxForce(t){this.m_maxForce=t}GetMaxForce(){return this.m_maxForce}SetMaxTorque(t){this.m_maxTorque=t}GetMaxTorque(){return this.m_maxTorque}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].c,i=t.positions[this.m_indexA].a,s=t.velocities[this.m_indexA].v;let n=t.velocities[this.m_indexA].w;const r=t.positions[this.m_indexB].c,a=t.positions[this.m_indexB].a,l=t.velocities[this.m_indexB].v;let m=t.velocities[this.m_indexB].w;const c=this.m_qA.SetAngle(i),_=this.m_qB.SetAngle(a),h=o.b2Rot.MulRV(c,o.b2Vec2.SubVV(this.m_linearOffset,this.m_localCenterA,o.b2Vec2.s_t0),this.m_rA),u=o.b2Rot.MulRV(_,o.b2Vec2.NegV(this.m_localCenterB,o.b2Vec2.s_t0),this.m_rB),d=this.m_invMassA,b=this.m_invMassB,p=this.m_invIA,f=this.m_invIB,y=this.m_K;if(y.ex.x=d+b+p*h.y*h.y+f*u.y*u.y,y.ex.y=-p*h.x*h.y-f*u.x*u.y,y.ey.x=y.ex.y,y.ey.y=d+b+p*h.x*h.x+f*u.x*u.x,y.GetInverse(this.m_linearMass),this.m_angularMass=p+f,this.m_angularMass>0&&(this.m_angularMass=1/this.m_angularMass),o.b2Vec2.SubVV(o.b2Vec2.AddVV(r,u,o.b2Vec2.s_t0),o.b2Vec2.AddVV(e,h,o.b2Vec2.s_t1),this.m_linearError),this.m_angularError=a-i-this.m_angularOffset,t.step.warmStarting){this.m_linearImpulse.SelfMul(t.step.dtRatio),this.m_angularImpulse*=t.step.dtRatio;const e=this.m_linearImpulse;s.SelfMulSub(d,e),n-=p*(o.b2Vec2.CrossVV(h,e)+this.m_angularImpulse),l.SelfMulAdd(b,e),m+=f*(o.b2Vec2.CrossVV(u,e)+this.m_angularImpulse)}else this.m_linearImpulse.SetZero(),this.m_angularImpulse=0;t.velocities[this.m_indexA].w=n,t.velocities[this.m_indexB].w=m}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let n=t.velocities[this.m_indexB].w;const a=this.m_invMassA,l=this.m_invMassB,m=this.m_invIA,c=this.m_invIB,_=t.step.dt,h=t.step.inv_dt;{const t=n-i+h*this.m_correctionFactor*this.m_angularError;let e=-this.m_angularMass*t;const s=this.m_angularImpulse,r=_*this.m_maxTorque;this.m_angularImpulse=o.b2Clamp(this.m_angularImpulse+e,-r,r),i-=m*(e=this.m_angularImpulse-s),n+=c*e}{const t=this.m_rA,u=this.m_rB,d=o.b2Vec2.AddVV(o.b2Vec2.SubVV(o.b2Vec2.AddVV(s,o.b2Vec2.CrossSV(n,u,o.b2Vec2.s_t0),o.b2Vec2.s_t0),o.b2Vec2.AddVV(e,o.b2Vec2.CrossSV(i,t,o.b2Vec2.s_t1),o.b2Vec2.s_t1),o.b2Vec2.s_t2),o.b2Vec2.MulSV(h*this.m_correctionFactor,this.m_linearError,o.b2Vec2.s_t3),r.SolveVelocityConstraints_s_Cdot_v2),b=o.b2Mat22.MulMV(this.m_linearMass,d,r.SolveVelocityConstraints_s_impulse_v2).SelfNeg(),p=r.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);this.m_linearImpulse.SelfAdd(b);const f=_*this.m_maxForce;this.m_linearImpulse.LengthSquared()>f*f&&(this.m_linearImpulse.Normalize(),this.m_linearImpulse.SelfMul(f)),o.b2Vec2.SubVV(this.m_linearImpulse,p,b),e.SelfMulSub(a,b),i-=m*o.b2Vec2.CrossVV(t,b),s.SelfMulAdd(l,b),n+=c*o.b2Vec2.CrossVV(u,b)}t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=n}SolvePositionConstraints(t){return!0}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2MotorJointDef = new b2MotorJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.linearOffset.Set(%.15f, %.15f);\n",this.m_linearOffset.x,this.m_linearOffset.y),t("  jd.angularOffset = %.15f;\n",this.m_angularOffset),t("  jd.maxForce = %.15f;\n",this.m_maxForce),t("  jd.maxTorque = %.15f;\n",this.m_maxTorque),t("  jd.correctionFactor = %.15f;\n",this.m_correctionFactor),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.SolveVelocityConstraints_s_Cdot_v2=new o.b2Vec2,r.SolveVelocityConstraints_s_impulse_v2=new o.b2Vec2,r.SolveVelocityConstraints_s_oldImpulse_v2=new o.b2Vec2,e.b2MotorJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2MouseJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_mouseJoint),this.target=new o.b2Vec2,this.maxForce=0,this.frequencyHz=5,this.dampingRatio=.7}};class r extends n.b2Joint{constructor(t){super(t),this.m_localAnchorB=new o.b2Vec2,this.m_targetA=new o.b2Vec2,this.m_frequencyHz=0,this.m_dampingRatio=0,this.m_beta=0,this.m_impulse=new o.b2Vec2,this.m_maxForce=0,this.m_gamma=0,this.m_indexA=0,this.m_indexB=0,this.m_rB=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassB=0,this.m_invIB=0,this.m_mass=new o.b2Mat22,this.m_C=new o.b2Vec2,this.m_qB=new o.b2Rot,this.m_lalcB=new o.b2Vec2,this.m_K=new o.b2Mat22,this.m_targetA.Copy(s.b2Maybe(t.target,o.b2Vec2.ZERO)),o.b2Transform.MulTXV(this.m_bodyB.GetTransform(),this.m_targetA,this.m_localAnchorB),this.m_maxForce=s.b2Maybe(t.maxForce,0),this.m_impulse.SetZero(),this.m_frequencyHz=s.b2Maybe(t.frequencyHz,0),this.m_dampingRatio=s.b2Maybe(t.dampingRatio,0),this.m_beta=0,this.m_gamma=0}SetTarget(t){this.m_bodyB.IsAwake()||this.m_bodyB.SetAwake(!0),this.m_targetA.Copy(t)}GetTarget(){return this.m_targetA}SetMaxForce(t){this.m_maxForce=t}GetMaxForce(){return this.m_maxForce}SetFrequency(t){this.m_frequencyHz=t}GetFrequency(){return this.m_frequencyHz}SetDampingRatio(t){this.m_dampingRatio=t}GetDampingRatio(){return this.m_dampingRatio}InitVelocityConstraints(t){this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexB].c,i=t.positions[this.m_indexB].a,n=t.velocities[this.m_indexB].v;let r=t.velocities[this.m_indexB].w;const a=this.m_qB.SetAngle(i),l=this.m_bodyB.GetMass(),m=2*s.b2_pi*this.m_frequencyHz,c=2*l*this.m_dampingRatio*m,_=l*(m*m),h=t.step.dt;this.m_gamma=h*(c+h*_),0!==this.m_gamma&&(this.m_gamma=1/this.m_gamma),this.m_beta=h*_*this.m_gamma,o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB),o.b2Rot.MulRV(a,this.m_lalcB,this.m_rB);const u=this.m_K;u.ex.x=this.m_invMassB+this.m_invIB*this.m_rB.y*this.m_rB.y+this.m_gamma,u.ex.y=-this.m_invIB*this.m_rB.x*this.m_rB.y,u.ey.x=u.ex.y,u.ey.y=this.m_invMassB+this.m_invIB*this.m_rB.x*this.m_rB.x+this.m_gamma,u.GetInverse(this.m_mass),this.m_C.x=e.x+this.m_rB.x-this.m_targetA.x,this.m_C.y=e.y+this.m_rB.y-this.m_targetA.y,this.m_C.SelfMul(this.m_beta),r*=.98,t.step.warmStarting?(this.m_impulse.SelfMul(t.step.dtRatio),n.x+=this.m_invMassB*this.m_impulse.x,n.y+=this.m_invMassB*this.m_impulse.y,r+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,this.m_impulse)):this.m_impulse.SetZero(),t.velocities[this.m_indexB].w=r}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexB].v;let i=t.velocities[this.m_indexB].w;const s=o.b2Vec2.AddVCrossSV(e,i,this.m_rB,r.SolveVelocityConstraints_s_Cdot),n=o.b2Mat22.MulMV(this.m_mass,o.b2Vec2.AddVV(s,o.b2Vec2.AddVV(this.m_C,o.b2Vec2.MulSV(this.m_gamma,this.m_impulse,o.b2Vec2.s_t0),o.b2Vec2.s_t0),o.b2Vec2.s_t0).SelfNeg(),r.SolveVelocityConstraints_s_impulse),a=r.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);this.m_impulse.SelfAdd(n);const l=t.step.dt*this.m_maxForce;this.m_impulse.LengthSquared()>l*l&&this.m_impulse.SelfMul(l/this.m_impulse.Length()),o.b2Vec2.SubVV(this.m_impulse,a,n),e.SelfMulAdd(this.m_invMassB,n),i+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,n),t.velocities[this.m_indexB].w=i}SolvePositionConstraints(t){return!0}GetAnchorA(t){return t.x=this.m_targetA.x,t.y=this.m_targetA.y,t}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return o.b2Vec2.MulSV(t,this.m_impulse,e)}GetReactionTorque(t){return 0}Dump(t){t("Mouse joint dumping is not supported.\n")}ShiftOrigin(t){this.m_targetA.SelfSub(t)}}r.SolveVelocityConstraints_s_Cdot=new o.b2Vec2,r.SolveVelocityConstraints_s_impulse=new o.b2Vec2,r.SolveVelocityConstraints_s_oldImpulse=new o.b2Vec2,e.b2MouseJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2PrismaticJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_prismaticJoint),this.localAnchorA=new o.b2Vec2,this.localAnchorB=new o.b2Vec2,this.localAxisA=new o.b2Vec2(1,0),this.referenceAngle=0,this.enableLimit=!1,this.lowerTranslation=0,this.upperTranslation=0,this.enableMotor=!1,this.maxMotorForce=0,this.motorSpeed=0}Initialize(t,e,i,s){this.bodyA=t,this.bodyB=e,this.bodyA.GetLocalPoint(i,this.localAnchorA),this.bodyB.GetLocalPoint(i,this.localAnchorB),this.bodyA.GetLocalVector(s,this.localAxisA),this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle()}};class r extends n.b2Joint{constructor(t){super(t),this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_localXAxisA=new o.b2Vec2,this.m_localYAxisA=new o.b2Vec2,this.m_referenceAngle=0,this.m_impulse=new o.b2Vec3(0,0,0),this.m_motorImpulse=0,this.m_lowerTranslation=0,this.m_upperTranslation=0,this.m_maxMotorForce=0,this.m_motorSpeed=0,this.m_enableLimit=!1,this.m_enableMotor=!1,this.m_limitState=n.b2LimitState.e_inactiveLimit,this.m_indexA=0,this.m_indexB=0,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_axis=new o.b2Vec2(0,0),this.m_perp=new o.b2Vec2(0,0),this.m_s1=0,this.m_s2=0,this.m_a1=0,this.m_a2=0,this.m_K=new o.b2Mat33,this.m_K3=new o.b2Mat33,this.m_K2=new o.b2Mat22,this.m_motorMass=0,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localAnchorA.Copy(s.b2Maybe(t.localAnchorA,o.b2Vec2.ZERO)),this.m_localAnchorB.Copy(s.b2Maybe(t.localAnchorB,o.b2Vec2.ZERO)),this.m_localXAxisA.Copy(s.b2Maybe(t.localAxisA,new o.b2Vec2(1,0))).SelfNormalize(),o.b2Vec2.CrossOneV(this.m_localXAxisA,this.m_localYAxisA),this.m_referenceAngle=s.b2Maybe(t.referenceAngle,0),this.m_lowerTranslation=s.b2Maybe(t.lowerTranslation,0),this.m_upperTranslation=s.b2Maybe(t.upperTranslation,0),this.m_maxMotorForce=s.b2Maybe(t.maxMotorForce,0),this.m_motorSpeed=s.b2Maybe(t.motorSpeed,0),this.m_enableLimit=s.b2Maybe(t.enableLimit,!1),this.m_enableMotor=s.b2Maybe(t.enableMotor,!1)}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].c,i=t.positions[this.m_indexA].a,a=t.velocities[this.m_indexA].v;let l=t.velocities[this.m_indexA].w;const m=t.positions[this.m_indexB].c,c=t.positions[this.m_indexB].a,_=t.velocities[this.m_indexB].v;let h=t.velocities[this.m_indexB].w;const u=this.m_qA.SetAngle(i),d=this.m_qB.SetAngle(c);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const b=o.b2Rot.MulRV(u,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const p=o.b2Rot.MulRV(d,this.m_lalcB,this.m_rB),f=o.b2Vec2.AddVV(o.b2Vec2.SubVV(m,e,o.b2Vec2.s_t0),o.b2Vec2.SubVV(p,b,o.b2Vec2.s_t1),r.InitVelocityConstraints_s_d),y=this.m_invMassA,V=this.m_invMassB,x=this.m_invIA,S=this.m_invIB;if(o.b2Rot.MulRV(u,this.m_localXAxisA,this.m_axis),this.m_a1=o.b2Vec2.CrossVV(o.b2Vec2.AddVV(f,b,o.b2Vec2.s_t0),this.m_axis),this.m_a2=o.b2Vec2.CrossVV(p,this.m_axis),this.m_motorMass=y+V+x*this.m_a1*this.m_a1+S*this.m_a2*this.m_a2,this.m_motorMass>0&&(this.m_motorMass=1/this.m_motorMass),o.b2Rot.MulRV(u,this.m_localYAxisA,this.m_perp),this.m_s1=o.b2Vec2.CrossVV(o.b2Vec2.AddVV(f,b,o.b2Vec2.s_t0),this.m_perp),this.m_s2=o.b2Vec2.CrossVV(p,this.m_perp),this.m_K.ex.x=y+V+x*this.m_s1*this.m_s1+S*this.m_s2*this.m_s2,this.m_K.ex.y=x*this.m_s1+S*this.m_s2,this.m_K.ex.z=x*this.m_s1*this.m_a1+S*this.m_s2*this.m_a2,this.m_K.ey.x=this.m_K.ex.y,this.m_K.ey.y=x+S,0===this.m_K.ey.y&&(this.m_K.ey.y=1),this.m_K.ey.z=x*this.m_a1+S*this.m_a2,this.m_K.ez.x=this.m_K.ex.z,this.m_K.ez.y=this.m_K.ey.z,this.m_K.ez.z=y+V+x*this.m_a1*this.m_a1+S*this.m_a2*this.m_a2,this.m_enableLimit){const t=o.b2Vec2.DotVV(this.m_axis,f);o.b2Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*s.b2_linearSlop?this.m_limitState=n.b2LimitState.e_equalLimits:t<=this.m_lowerTranslation?this.m_limitState!==n.b2LimitState.e_atLowerLimit&&(this.m_limitState=n.b2LimitState.e_atLowerLimit,this.m_impulse.z=0):t>=this.m_upperTranslation?this.m_limitState!==n.b2LimitState.e_atUpperLimit&&(this.m_limitState=n.b2LimitState.e_atUpperLimit,this.m_impulse.z=0):(this.m_limitState=n.b2LimitState.e_inactiveLimit,this.m_impulse.z=0)}else this.m_limitState=n.b2LimitState.e_inactiveLimit,this.m_impulse.z=0;if(this.m_enableMotor||(this.m_motorImpulse=0),t.step.warmStarting){this.m_impulse.SelfMul(t.step.dtRatio),this.m_motorImpulse*=t.step.dtRatio;const e=o.b2Vec2.AddVV(o.b2Vec2.MulSV(this.m_impulse.x,this.m_perp,o.b2Vec2.s_t0),o.b2Vec2.MulSV(this.m_motorImpulse+this.m_impulse.z,this.m_axis,o.b2Vec2.s_t1),r.InitVelocityConstraints_s_P),i=this.m_impulse.x*this.m_s1+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a1,s=this.m_impulse.x*this.m_s2+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a2;a.SelfMulSub(y,e),l-=x*i,_.SelfMulAdd(V,e),h+=S*s}else this.m_impulse.SetZero(),this.m_motorImpulse=0;t.velocities[this.m_indexA].w=l,t.velocities[this.m_indexB].w=h}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let a=t.velocities[this.m_indexB].w;const l=this.m_invMassA,m=this.m_invMassB,c=this.m_invIA,_=this.m_invIB;if(this.m_enableMotor&&this.m_limitState!==n.b2LimitState.e_equalLimits){const n=o.b2Vec2.DotVV(this.m_axis,o.b2Vec2.SubVV(s,e,o.b2Vec2.s_t0))+this.m_a2*a-this.m_a1*i;let h=this.m_motorMass*(this.m_motorSpeed-n);const u=this.m_motorImpulse,d=t.step.dt*this.m_maxMotorForce;this.m_motorImpulse=o.b2Clamp(this.m_motorImpulse+h,-d,d),h=this.m_motorImpulse-u;const b=o.b2Vec2.MulSV(h,this.m_axis,r.SolveVelocityConstraints_s_P),p=h*this.m_a1,f=h*this.m_a2;e.SelfMulSub(l,b),i-=c*p,s.SelfMulAdd(m,b),a+=_*f}const h=o.b2Vec2.DotVV(this.m_perp,o.b2Vec2.SubVV(s,e,o.b2Vec2.s_t0))+this.m_s2*a-this.m_s1*i,u=a-i;if(this.m_enableLimit&&this.m_limitState!==n.b2LimitState.e_inactiveLimit){const t=o.b2Vec2.DotVV(this.m_axis,o.b2Vec2.SubVV(s,e,o.b2Vec2.s_t0))+this.m_a2*a-this.m_a1*i,d=r.SolveVelocityConstraints_s_f1.Copy(this.m_impulse),b=this.m_K.Solve33(-h,-u,-t,r.SolveVelocityConstraints_s_df3);this.m_impulse.SelfAdd(b),this.m_limitState===n.b2LimitState.e_atLowerLimit?this.m_impulse.z=o.b2Max(this.m_impulse.z,0):this.m_limitState===n.b2LimitState.e_atUpperLimit&&(this.m_impulse.z=o.b2Min(this.m_impulse.z,0));const p=-h-(this.m_impulse.z-d.z)*this.m_K.ez.x,f=-u-(this.m_impulse.z-d.z)*this.m_K.ez.y,y=this.m_K.Solve22(p,f,r.SolveVelocityConstraints_s_f2r);y.x+=d.x,y.y+=d.y,this.m_impulse.x=y.x,this.m_impulse.y=y.y,b.x=this.m_impulse.x-d.x,b.y=this.m_impulse.y-d.y,b.z=this.m_impulse.z-d.z;const V=o.b2Vec2.AddVV(o.b2Vec2.MulSV(b.x,this.m_perp,o.b2Vec2.s_t0),o.b2Vec2.MulSV(b.z,this.m_axis,o.b2Vec2.s_t1),r.SolveVelocityConstraints_s_P),x=b.x*this.m_s1+b.y+b.z*this.m_a1,S=b.x*this.m_s2+b.y+b.z*this.m_a2;e.SelfMulSub(l,V),i-=c*x,s.SelfMulAdd(m,V),a+=_*S}else{const t=this.m_K.Solve22(-h,-u,r.SolveVelocityConstraints_s_df2);this.m_impulse.x+=t.x,this.m_impulse.y+=t.y;const n=o.b2Vec2.MulSV(t.x,this.m_perp,r.SolveVelocityConstraints_s_P),d=t.x*this.m_s1+t.y,b=t.x*this.m_s2+t.y;e.SelfMulSub(l,n),i-=c*d,s.SelfMulAdd(m,n),a+=_*b}t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=a}SolvePositionConstraints(t){const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const n=t.positions[this.m_indexB].c;let a=t.positions[this.m_indexB].a;const l=this.m_qA.SetAngle(i),m=this.m_qB.SetAngle(a),c=this.m_invMassA,_=this.m_invMassB,h=this.m_invIA,u=this.m_invIB,d=o.b2Rot.MulRV(l,this.m_lalcA,this.m_rA),b=o.b2Rot.MulRV(m,this.m_lalcB,this.m_rB),p=o.b2Vec2.SubVV(o.b2Vec2.AddVV(n,b,o.b2Vec2.s_t0),o.b2Vec2.AddVV(e,d,o.b2Vec2.s_t1),r.SolvePositionConstraints_s_d),f=o.b2Rot.MulRV(l,this.m_localXAxisA,this.m_axis),y=o.b2Vec2.CrossVV(o.b2Vec2.AddVV(p,d,o.b2Vec2.s_t0),f),V=o.b2Vec2.CrossVV(b,f),x=o.b2Rot.MulRV(l,this.m_localYAxisA,this.m_perp),S=o.b2Vec2.CrossVV(o.b2Vec2.AddVV(p,d,o.b2Vec2.s_t0),x),B=o.b2Vec2.CrossVV(b,x);let C=r.SolvePositionConstraints_s_impulse;const A=o.b2Vec2.DotVV(x,p),w=a-i-this.m_referenceAngle;let g=o.b2Abs(A);const v=o.b2Abs(w);let M=!1,P=0;if(this.m_enableLimit){const t=o.b2Vec2.DotVV(f,p);o.b2Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*s.b2_linearSlop?(P=o.b2Clamp(t,-s.b2_maxLinearCorrection,s.b2_maxLinearCorrection),g=o.b2Max(g,o.b2Abs(t)),M=!0):t<=this.m_lowerTranslation?(P=o.b2Clamp(t-this.m_lowerTranslation+s.b2_linearSlop,-s.b2_maxLinearCorrection,0),g=o.b2Max(g,this.m_lowerTranslation-t),M=!0):t>=this.m_upperTranslation&&(P=o.b2Clamp(t-this.m_upperTranslation-s.b2_linearSlop,0,s.b2_maxLinearCorrection),g=o.b2Max(g,t-this.m_upperTranslation),M=!0)}if(M){const t=c+_+h*S*S+u*B*B,e=h*S+u*B,i=h*S*y+u*B*V;let s=h+u;0===s&&(s=1);const o=h*y+u*V,n=c+_+h*y*y+u*V*V,r=this.m_K3;r.ex.SetXYZ(t,e,i),r.ey.SetXYZ(e,s,o),r.ez.SetXYZ(i,o,n),C=r.Solve33(-A,-w,-P,C)}else{const t=c+_+h*S*S+u*B*B,e=h*S+u*B;let i=h+u;0===i&&(i=1);const s=this.m_K2;s.ex.Set(t,e),s.ey.Set(e,i);const o=s.Solve(-A,-w,r.SolvePositionConstraints_s_impulse1);C.x=o.x,C.y=o.y,C.z=0}const I=o.b2Vec2.AddVV(o.b2Vec2.MulSV(C.x,x,o.b2Vec2.s_t0),o.b2Vec2.MulSV(C.z,f,o.b2Vec2.s_t1),r.SolvePositionConstraints_s_P),D=C.x*S+C.y+C.z*y,G=C.x*B+C.y+C.z*V;return e.SelfMulSub(c,I),i-=h*D,n.SelfMulAdd(_,I),a+=u*G,t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=a,g<=s.b2_linearSlop&&v<=s.b2_angularSlop}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return e.x=t*(this.m_impulse.x*this.m_perp.x+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.x),e.y=t*(this.m_impulse.x*this.m_perp.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.y),e}GetReactionTorque(t){return t*this.m_impulse.y}GetLocalAnchorA(){return this.m_localAnchorA}GetLocalAnchorB(){return this.m_localAnchorB}GetLocalAxisA(){return this.m_localXAxisA}GetReferenceAngle(){return this.m_referenceAngle}GetJointTranslation(){const t=this.m_bodyA.GetWorldPoint(this.m_localAnchorA,r.GetJointTranslation_s_pA),e=this.m_bodyB.GetWorldPoint(this.m_localAnchorB,r.GetJointTranslation_s_pB),i=o.b2Vec2.SubVV(e,t,r.GetJointTranslation_s_d),s=this.m_bodyA.GetWorldVector(this.m_localXAxisA,r.GetJointTranslation_s_axis);return o.b2Vec2.DotVV(i,s)}GetJointSpeed(){const t=this.m_bodyA,e=this.m_bodyB;o.b2Vec2.SubVV(this.m_localAnchorA,t.m_sweep.localCenter,this.m_lalcA);const i=o.b2Rot.MulRV(t.m_xf.q,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,e.m_sweep.localCenter,this.m_lalcB);const s=o.b2Rot.MulRV(e.m_xf.q,this.m_lalcB,this.m_rB),n=o.b2Vec2.AddVV(t.m_sweep.c,i,o.b2Vec2.s_t0),r=o.b2Vec2.AddVV(e.m_sweep.c,s,o.b2Vec2.s_t1),a=o.b2Vec2.SubVV(r,n,o.b2Vec2.s_t2),l=t.GetWorldVector(this.m_localXAxisA,this.m_axis),m=t.m_linearVelocity,c=e.m_linearVelocity,_=t.m_angularVelocity,h=e.m_angularVelocity;return o.b2Vec2.DotVV(a,o.b2Vec2.CrossSV(_,l,o.b2Vec2.s_t0))+o.b2Vec2.DotVV(l,o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(c,h,s,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(m,_,i,o.b2Vec2.s_t1),o.b2Vec2.s_t0))}IsLimitEnabled(){return this.m_enableLimit}EnableLimit(t){t!==this.m_enableLimit&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_enableLimit=t,this.m_impulse.z=0)}GetLowerLimit(){return this.m_lowerTranslation}GetUpperLimit(){return this.m_upperTranslation}SetLimits(t,e){t===this.m_lowerTranslation&&e===this.m_upperTranslation||(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_lowerTranslation=t,this.m_upperTranslation=e,this.m_impulse.z=0)}IsMotorEnabled(){return this.m_enableMotor}EnableMotor(t){t!==this.m_enableMotor&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_enableMotor=t)}SetMotorSpeed(t){t!==this.m_motorSpeed&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_motorSpeed=t)}GetMotorSpeed(){return this.m_motorSpeed}SetMaxMotorForce(t){t!==this.m_maxMotorForce&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_maxMotorForce=t)}GetMaxMotorForce(){return this.m_maxMotorForce}GetMotorForce(t){return t*this.m_motorImpulse}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.localAxisA.Set(%.15f, %.15f);\n",this.m_localXAxisA.x,this.m_localXAxisA.y),t("  jd.referenceAngle = %.15f;\n",this.m_referenceAngle),t("  jd.enableLimit = %s;\n",this.m_enableLimit?"true":"false"),t("  jd.lowerTranslation = %.15f;\n",this.m_lowerTranslation),t("  jd.upperTranslation = %.15f;\n",this.m_upperTranslation),t("  jd.enableMotor = %s;\n",this.m_enableMotor?"true":"false"),t("  jd.motorSpeed = %.15f;\n",this.m_motorSpeed),t("  jd.maxMotorForce = %.15f;\n",this.m_maxMotorForce),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.InitVelocityConstraints_s_d=new o.b2Vec2,r.InitVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_f2r=new o.b2Vec2,r.SolveVelocityConstraints_s_f1=new o.b2Vec3,r.SolveVelocityConstraints_s_df3=new o.b2Vec3,r.SolveVelocityConstraints_s_df2=new o.b2Vec2,r.SolvePositionConstraints_s_d=new o.b2Vec2,r.SolvePositionConstraints_s_impulse=new o.b2Vec3,r.SolvePositionConstraints_s_impulse1=new o.b2Vec2,r.SolvePositionConstraints_s_P=new o.b2Vec2,r.GetJointTranslation_s_pA=new o.b2Vec2,r.GetJointTranslation_s_pB=new o.b2Vec2,r.GetJointTranslation_s_d=new o.b2Vec2,r.GetJointTranslation_s_axis=new o.b2Vec2,e.b2PrismaticJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2_minPulleyLength=2;e.b2PulleyJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_pulleyJoint),this.groundAnchorA=new o.b2Vec2(-1,1),this.groundAnchorB=new o.b2Vec2(1,1),this.localAnchorA=new o.b2Vec2(-1,0),this.localAnchorB=new o.b2Vec2(1,0),this.lengthA=0,this.lengthB=0,this.ratio=1,this.collideConnected=!0}Initialize(t,e,i,s,n,r,a){this.bodyA=t,this.bodyB=e,this.groundAnchorA.Copy(i),this.groundAnchorB.Copy(s),this.bodyA.GetLocalPoint(n,this.localAnchorA),this.bodyB.GetLocalPoint(r,this.localAnchorB),this.lengthA=o.b2Vec2.DistanceVV(n,i),this.lengthB=o.b2Vec2.DistanceVV(r,s),this.ratio=a}};class r extends n.b2Joint{constructor(t){super(t),this.m_groundAnchorA=new o.b2Vec2,this.m_groundAnchorB=new o.b2Vec2,this.m_lengthA=0,this.m_lengthB=0,this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_constant=0,this.m_ratio=0,this.m_impulse=0,this.m_indexA=0,this.m_indexB=0,this.m_uA=new o.b2Vec2,this.m_uB=new o.b2Vec2,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_mass=0,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_groundAnchorA.Copy(s.b2Maybe(t.groundAnchorA,new o.b2Vec2(-1,1))),this.m_groundAnchorB.Copy(s.b2Maybe(t.groundAnchorB,new o.b2Vec2(1,0))),this.m_localAnchorA.Copy(s.b2Maybe(t.localAnchorA,new o.b2Vec2(-1,0))),this.m_localAnchorB.Copy(s.b2Maybe(t.localAnchorB,new o.b2Vec2(1,0))),this.m_lengthA=s.b2Maybe(t.lengthA,0),this.m_lengthB=s.b2Maybe(t.lengthB,0),this.m_ratio=s.b2Maybe(t.ratio,1),this.m_constant=s.b2Maybe(t.lengthA,0)+this.m_ratio*s.b2Maybe(t.lengthB,0),this.m_impulse=0}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].c,i=t.positions[this.m_indexA].a,n=t.velocities[this.m_indexA].v;let a=t.velocities[this.m_indexA].w;const l=t.positions[this.m_indexB].c,m=t.positions[this.m_indexB].a,c=t.velocities[this.m_indexB].v;let _=t.velocities[this.m_indexB].w;const h=this.m_qA.SetAngle(i),u=this.m_qB.SetAngle(m);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA),o.b2Rot.MulRV(h,this.m_lalcA,this.m_rA),o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB),o.b2Rot.MulRV(u,this.m_lalcB,this.m_rB),this.m_uA.Copy(e).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA),this.m_uB.Copy(l).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);const d=this.m_uA.Length(),b=this.m_uB.Length();d>10*s.b2_linearSlop?this.m_uA.SelfMul(1/d):this.m_uA.SetZero(),b>10*s.b2_linearSlop?this.m_uB.SelfMul(1/b):this.m_uB.SetZero();const p=o.b2Vec2.CrossVV(this.m_rA,this.m_uA),f=o.b2Vec2.CrossVV(this.m_rB,this.m_uB),y=this.m_invMassA+this.m_invIA*p*p,V=this.m_invMassB+this.m_invIB*f*f;if(this.m_mass=y+this.m_ratio*this.m_ratio*V,this.m_mass>0&&(this.m_mass=1/this.m_mass),t.step.warmStarting){this.m_impulse*=t.step.dtRatio;const e=o.b2Vec2.MulSV(-this.m_impulse,this.m_uA,r.InitVelocityConstraints_s_PA),i=o.b2Vec2.MulSV(-this.m_ratio*this.m_impulse,this.m_uB,r.InitVelocityConstraints_s_PB);n.SelfMulAdd(this.m_invMassA,e),a+=this.m_invIA*o.b2Vec2.CrossVV(this.m_rA,e),c.SelfMulAdd(this.m_invMassB,i),_+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,i)}else this.m_impulse=0;t.velocities[this.m_indexA].w=a,t.velocities[this.m_indexB].w=_}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let n=t.velocities[this.m_indexB].w;const a=o.b2Vec2.AddVCrossSV(e,i,this.m_rA,r.SolveVelocityConstraints_s_vpA),l=o.b2Vec2.AddVCrossSV(s,n,this.m_rB,r.SolveVelocityConstraints_s_vpB),m=-o.b2Vec2.DotVV(this.m_uA,a)-this.m_ratio*o.b2Vec2.DotVV(this.m_uB,l),c=-this.m_mass*m;this.m_impulse+=c;const _=o.b2Vec2.MulSV(-c,this.m_uA,r.SolveVelocityConstraints_s_PA),h=o.b2Vec2.MulSV(-this.m_ratio*c,this.m_uB,r.SolveVelocityConstraints_s_PB);e.SelfMulAdd(this.m_invMassA,_),i+=this.m_invIA*o.b2Vec2.CrossVV(this.m_rA,_),s.SelfMulAdd(this.m_invMassB,h),n+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,h),t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=n}SolvePositionConstraints(t){const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const n=t.positions[this.m_indexB].c;let a=t.positions[this.m_indexB].a;const l=this.m_qA.SetAngle(i),m=this.m_qB.SetAngle(a);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const c=o.b2Rot.MulRV(l,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const _=o.b2Rot.MulRV(m,this.m_lalcB,this.m_rB),h=this.m_uA.Copy(e).SelfAdd(c).SelfSub(this.m_groundAnchorA),u=this.m_uB.Copy(n).SelfAdd(_).SelfSub(this.m_groundAnchorB),d=h.Length(),b=u.Length();d>10*s.b2_linearSlop?h.SelfMul(1/d):h.SetZero(),b>10*s.b2_linearSlop?u.SelfMul(1/b):u.SetZero();const p=o.b2Vec2.CrossVV(c,h),f=o.b2Vec2.CrossVV(_,u),y=this.m_invMassA+this.m_invIA*p*p,V=this.m_invMassB+this.m_invIB*f*f;let x=y+this.m_ratio*this.m_ratio*V;x>0&&(x=1/x);const S=this.m_constant-d-this.m_ratio*b,B=o.b2Abs(S),C=-x*S,A=o.b2Vec2.MulSV(-C,h,r.SolvePositionConstraints_s_PA),w=o.b2Vec2.MulSV(-this.m_ratio*C,u,r.SolvePositionConstraints_s_PB);return e.SelfMulAdd(this.m_invMassA,A),i+=this.m_invIA*o.b2Vec2.CrossVV(c,A),n.SelfMulAdd(this.m_invMassB,w),a+=this.m_invIB*o.b2Vec2.CrossVV(_,w),t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=a,B<s.b2_linearSlop}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return e.x=t*this.m_impulse*this.m_uB.x,e.y=t*this.m_impulse*this.m_uB.y,e}GetReactionTorque(t){return 0}GetGroundAnchorA(){return this.m_groundAnchorA}GetGroundAnchorB(){return this.m_groundAnchorB}GetLengthA(){return this.m_lengthA}GetLengthB(){return this.m_lengthB}GetRatio(){return this.m_ratio}GetCurrentLengthA(){const t=this.m_bodyA.GetWorldPoint(this.m_localAnchorA,r.GetCurrentLengthA_s_p),e=this.m_groundAnchorA;return o.b2Vec2.DistanceVV(t,e)}GetCurrentLengthB(){const t=this.m_bodyB.GetWorldPoint(this.m_localAnchorB,r.GetCurrentLengthB_s_p),e=this.m_groundAnchorB;return o.b2Vec2.DistanceVV(t,e)}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2PulleyJointDef = new b2PulleyJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.groundAnchorA.Set(%.15f, %.15f);\n",this.m_groundAnchorA.x,this.m_groundAnchorA.y),t("  jd.groundAnchorB.Set(%.15f, %.15f);\n",this.m_groundAnchorB.x,this.m_groundAnchorB.y),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.lengthA = %.15f;\n",this.m_lengthA),t("  jd.lengthB = %.15f;\n",this.m_lengthB),t("  jd.ratio = %.15f;\n",this.m_ratio),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}ShiftOrigin(t){this.m_groundAnchorA.SelfSub(t),this.m_groundAnchorB.SelfSub(t)}}r.InitVelocityConstraints_s_PA=new o.b2Vec2,r.InitVelocityConstraints_s_PB=new o.b2Vec2,r.SolveVelocityConstraints_s_vpA=new o.b2Vec2,r.SolveVelocityConstraints_s_vpB=new o.b2Vec2,r.SolveVelocityConstraints_s_PA=new o.b2Vec2,r.SolveVelocityConstraints_s_PB=new o.b2Vec2,r.SolvePositionConstraints_s_PA=new o.b2Vec2,r.SolvePositionConstraints_s_PB=new o.b2Vec2,r.GetCurrentLengthA_s_p=new o.b2Vec2,r.GetCurrentLengthB_s_p=new o.b2Vec2,e.b2PulleyJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2RevoluteJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_revoluteJoint),this.localAnchorA=new o.b2Vec2(0,0),this.localAnchorB=new o.b2Vec2(0,0),this.referenceAngle=0,this.enableLimit=!1,this.lowerAngle=0,this.upperAngle=0,this.enableMotor=!1,this.motorSpeed=0,this.maxMotorTorque=0}Initialize(t,e,i){this.bodyA=t,this.bodyB=e,this.bodyA.GetLocalPoint(i,this.localAnchorA),this.bodyB.GetLocalPoint(i,this.localAnchorB),this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle()}};class r extends n.b2Joint{constructor(t){super(t),this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_impulse=new o.b2Vec3,this.m_motorImpulse=0,this.m_enableMotor=!1,this.m_maxMotorTorque=0,this.m_motorSpeed=0,this.m_enableLimit=!1,this.m_referenceAngle=0,this.m_lowerAngle=0,this.m_upperAngle=0,this.m_indexA=0,this.m_indexB=0,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_mass=new o.b2Mat33,this.m_motorMass=0,this.m_limitState=n.b2LimitState.e_inactiveLimit,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_K=new o.b2Mat22,this.m_localAnchorA.Copy(s.b2Maybe(t.localAnchorA,o.b2Vec2.ZERO)),this.m_localAnchorB.Copy(s.b2Maybe(t.localAnchorB,o.b2Vec2.ZERO)),this.m_referenceAngle=s.b2Maybe(t.referenceAngle,0),this.m_impulse.SetZero(),this.m_motorImpulse=0,this.m_lowerAngle=s.b2Maybe(t.lowerAngle,0),this.m_upperAngle=s.b2Maybe(t.upperAngle,0),this.m_maxMotorTorque=s.b2Maybe(t.maxMotorTorque,0),this.m_motorSpeed=s.b2Maybe(t.motorSpeed,0),this.m_enableLimit=s.b2Maybe(t.enableLimit,!1),this.m_enableMotor=s.b2Maybe(t.enableMotor,!1),this.m_limitState=n.b2LimitState.e_inactiveLimit}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].a,i=t.velocities[this.m_indexA].v;let a=t.velocities[this.m_indexA].w;const l=t.positions[this.m_indexB].a,m=t.velocities[this.m_indexB].v;let c=t.velocities[this.m_indexB].w;const _=this.m_qA.SetAngle(e),h=this.m_qB.SetAngle(l);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA),o.b2Rot.MulRV(_,this.m_lalcA,this.m_rA),o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB),o.b2Rot.MulRV(h,this.m_lalcB,this.m_rB);const u=this.m_invMassA,d=this.m_invMassB,b=this.m_invIA,p=this.m_invIB,f=b+p===0;if(this.m_mass.ex.x=u+d+this.m_rA.y*this.m_rA.y*b+this.m_rB.y*this.m_rB.y*p,this.m_mass.ey.x=-this.m_rA.y*this.m_rA.x*b-this.m_rB.y*this.m_rB.x*p,this.m_mass.ez.x=-this.m_rA.y*b-this.m_rB.y*p,this.m_mass.ex.y=this.m_mass.ey.x,this.m_mass.ey.y=u+d+this.m_rA.x*this.m_rA.x*b+this.m_rB.x*this.m_rB.x*p,this.m_mass.ez.y=this.m_rA.x*b+this.m_rB.x*p,this.m_mass.ex.z=this.m_mass.ez.x,this.m_mass.ey.z=this.m_mass.ez.y,this.m_mass.ez.z=b+p,this.m_motorMass=b+p,this.m_motorMass>0&&(this.m_motorMass=1/this.m_motorMass),this.m_enableMotor&&!f||(this.m_motorImpulse=0),this.m_enableLimit&&!f){const t=l-e-this.m_referenceAngle;o.b2Abs(this.m_upperAngle-this.m_lowerAngle)<2*s.b2_angularSlop?this.m_limitState=n.b2LimitState.e_equalLimits:t<=this.m_lowerAngle?(this.m_limitState!==n.b2LimitState.e_atLowerLimit&&(this.m_impulse.z=0),this.m_limitState=n.b2LimitState.e_atLowerLimit):t>=this.m_upperAngle?(this.m_limitState!==n.b2LimitState.e_atUpperLimit&&(this.m_impulse.z=0),this.m_limitState=n.b2LimitState.e_atUpperLimit):(this.m_limitState=n.b2LimitState.e_inactiveLimit,this.m_impulse.z=0)}else this.m_limitState=n.b2LimitState.e_inactiveLimit;if(t.step.warmStarting){this.m_impulse.SelfMul(t.step.dtRatio),this.m_motorImpulse*=t.step.dtRatio;const e=r.InitVelocityConstraints_s_P.Set(this.m_impulse.x,this.m_impulse.y);i.SelfMulSub(u,e),a-=b*(o.b2Vec2.CrossVV(this.m_rA,e)+this.m_motorImpulse+this.m_impulse.z),m.SelfMulAdd(d,e),c+=p*(o.b2Vec2.CrossVV(this.m_rB,e)+this.m_motorImpulse+this.m_impulse.z)}else this.m_impulse.SetZero(),this.m_motorImpulse=0;t.velocities[this.m_indexA].w=a,t.velocities[this.m_indexB].w=c}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let a=t.velocities[this.m_indexB].w;const l=this.m_invMassA,m=this.m_invMassB,c=this.m_invIA,_=this.m_invIB,h=c+_===0;if(this.m_enableMotor&&this.m_limitState!==n.b2LimitState.e_equalLimits&&!h){const e=a-i-this.m_motorSpeed;let s=-this.m_motorMass*e;const n=this.m_motorImpulse,r=t.step.dt*this.m_maxMotorTorque;this.m_motorImpulse=o.b2Clamp(this.m_motorImpulse+s,-r,r),i-=c*(s=this.m_motorImpulse-n),a+=_*s}if(this.m_enableLimit&&this.m_limitState!==n.b2LimitState.e_inactiveLimit&&!h){const t=o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(s,a,this.m_rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(e,i,this.m_rA,o.b2Vec2.s_t1),r.SolveVelocityConstraints_s_Cdot1),h=a-i,u=this.m_mass.Solve33(t.x,t.y,h,r.SolveVelocityConstraints_s_impulse_v3).SelfNeg();if(this.m_limitState===n.b2LimitState.e_equalLimits)this.m_impulse.SelfAdd(u);else if(this.m_limitState===n.b2LimitState.e_atLowerLimit){if(this.m_impulse.z+u.z<0){const e=-t.x+this.m_impulse.z*this.m_mass.ez.x,i=-t.y+this.m_impulse.z*this.m_mass.ez.y,s=this.m_mass.Solve22(e,i,r.SolveVelocityConstraints_s_reduced_v2);u.x=s.x,u.y=s.y,u.z=-this.m_impulse.z,this.m_impulse.x+=s.x,this.m_impulse.y+=s.y,this.m_impulse.z=0}else this.m_impulse.SelfAdd(u)}else if(this.m_limitState===n.b2LimitState.e_atUpperLimit){if(this.m_impulse.z+u.z>0){const e=-t.x+this.m_impulse.z*this.m_mass.ez.x,i=-t.y+this.m_impulse.z*this.m_mass.ez.y,s=this.m_mass.Solve22(e,i,r.SolveVelocityConstraints_s_reduced_v2);u.x=s.x,u.y=s.y,u.z=-this.m_impulse.z,this.m_impulse.x+=s.x,this.m_impulse.y+=s.y,this.m_impulse.z=0}else this.m_impulse.SelfAdd(u)}const d=r.SolveVelocityConstraints_s_P.Set(u.x,u.y);e.SelfMulSub(l,d),i-=c*(o.b2Vec2.CrossVV(this.m_rA,d)+u.z),s.SelfMulAdd(m,d),a+=_*(o.b2Vec2.CrossVV(this.m_rB,d)+u.z)}else{const t=o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(s,a,this.m_rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(e,i,this.m_rA,o.b2Vec2.s_t1),r.SolveVelocityConstraints_s_Cdot_v2),n=this.m_mass.Solve22(-t.x,-t.y,r.SolveVelocityConstraints_s_impulse_v2);this.m_impulse.x+=n.x,this.m_impulse.y+=n.y,e.SelfMulSub(l,n),i-=c*o.b2Vec2.CrossVV(this.m_rA,n),s.SelfMulAdd(m,n),a+=_*o.b2Vec2.CrossVV(this.m_rB,n)}t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=a}SolvePositionConstraints(t){const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const a=t.positions[this.m_indexB].c;let l=t.positions[this.m_indexB].a;const m=this.m_qA.SetAngle(i),c=this.m_qB.SetAngle(l);let _=0,h=0;const u=this.m_invIA+this.m_invIB===0;if(this.m_enableLimit&&this.m_limitState!==n.b2LimitState.e_inactiveLimit&&!u){const t=l-i-this.m_referenceAngle;let e=0;if(this.m_limitState===n.b2LimitState.e_equalLimits){const i=o.b2Clamp(t-this.m_lowerAngle,-s.b2_maxAngularCorrection,s.b2_maxAngularCorrection);e=-this.m_motorMass*i,_=o.b2Abs(i)}else if(this.m_limitState===n.b2LimitState.e_atLowerLimit){let i=t-this.m_lowerAngle;_=-i,i=o.b2Clamp(i+s.b2_angularSlop,-s.b2_maxAngularCorrection,0),e=-this.m_motorMass*i}else if(this.m_limitState===n.b2LimitState.e_atUpperLimit){let i=t-this.m_upperAngle;_=i,i=o.b2Clamp(i-s.b2_angularSlop,0,s.b2_maxAngularCorrection),e=-this.m_motorMass*i}i-=this.m_invIA*e,l+=this.m_invIB*e}{m.SetAngle(i),c.SetAngle(l),o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const t=o.b2Rot.MulRV(m,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const s=o.b2Rot.MulRV(c,this.m_lalcB,this.m_rB),n=o.b2Vec2.SubVV(o.b2Vec2.AddVV(a,s,o.b2Vec2.s_t0),o.b2Vec2.AddVV(e,t,o.b2Vec2.s_t1),r.SolvePositionConstraints_s_C_v2);h=n.Length();const _=this.m_invMassA,u=this.m_invMassB,d=this.m_invIA,b=this.m_invIB,p=this.m_K;p.ex.x=_+u+d*t.y*t.y+b*s.y*s.y,p.ex.y=-d*t.x*t.y-b*s.x*s.y,p.ey.x=p.ex.y,p.ey.y=_+u+d*t.x*t.x+b*s.x*s.x;const f=p.Solve(n.x,n.y,r.SolvePositionConstraints_s_impulse).SelfNeg();e.SelfMulSub(_,f),i-=d*o.b2Vec2.CrossVV(t,f),a.SelfMulAdd(u,f),l+=b*o.b2Vec2.CrossVV(s,f)}return t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=l,h<=s.b2_linearSlop&&_<=s.b2_angularSlop}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return e.x=t*this.m_impulse.x,e.y=t*this.m_impulse.y,e}GetReactionTorque(t){return t*this.m_impulse.z}GetLocalAnchorA(){return this.m_localAnchorA}GetLocalAnchorB(){return this.m_localAnchorB}GetReferenceAngle(){return this.m_referenceAngle}GetJointAngle(){return this.m_bodyB.m_sweep.a-this.m_bodyA.m_sweep.a-this.m_referenceAngle}GetJointSpeed(){return this.m_bodyB.m_angularVelocity-this.m_bodyA.m_angularVelocity}IsMotorEnabled(){return this.m_enableMotor}EnableMotor(t){t!==this.m_enableMotor&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_enableMotor=t)}GetMotorTorque(t){return t*this.m_motorImpulse}GetMotorSpeed(){return this.m_motorSpeed}SetMaxMotorTorque(t){t!==this.m_maxMotorTorque&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_maxMotorTorque=t)}GetMaxMotorTorque(){return this.m_maxMotorTorque}IsLimitEnabled(){return this.m_enableLimit}EnableLimit(t){t!==this.m_enableLimit&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_enableLimit=t,this.m_impulse.z=0)}GetLowerLimit(){return this.m_lowerAngle}GetUpperLimit(){return this.m_upperAngle}SetLimits(t,e){t===this.m_lowerAngle&&e===this.m_upperAngle||(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_impulse.z=0,this.m_lowerAngle=t,this.m_upperAngle=e)}SetMotorSpeed(t){t!==this.m_motorSpeed&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_motorSpeed=t)}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.referenceAngle = %.15f;\n",this.m_referenceAngle),t("  jd.enableLimit = %s;\n",this.m_enableLimit?"true":"false"),t("  jd.lowerAngle = %.15f;\n",this.m_lowerAngle),t("  jd.upperAngle = %.15f;\n",this.m_upperAngle),t("  jd.enableMotor = %s;\n",this.m_enableMotor?"true":"false"),t("  jd.motorSpeed = %.15f;\n",this.m_motorSpeed),t("  jd.maxMotorTorque = %.15f;\n",this.m_maxMotorTorque),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.InitVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_Cdot_v2=new o.b2Vec2,r.SolveVelocityConstraints_s_Cdot1=new o.b2Vec2,r.SolveVelocityConstraints_s_impulse_v3=new o.b2Vec3,r.SolveVelocityConstraints_s_reduced_v2=new o.b2Vec2,r.SolveVelocityConstraints_s_impulse_v2=new o.b2Vec2,r.SolvePositionConstraints_s_C_v2=new o.b2Vec2,r.SolvePositionConstraints_s_impulse=new o.b2Vec2,e.b2RevoluteJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2RopeJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_ropeJoint),this.localAnchorA=new o.b2Vec2(-1,0),this.localAnchorB=new o.b2Vec2(1,0),this.maxLength=0}};class r extends n.b2Joint{constructor(t){super(t),this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_maxLength=0,this.m_length=0,this.m_impulse=0,this.m_indexA=0,this.m_indexB=0,this.m_u=new o.b2Vec2,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_mass=0,this.m_state=n.b2LimitState.e_inactiveLimit,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_localAnchorA.Copy(s.b2Maybe(t.localAnchorA,new o.b2Vec2(-1,0))),this.m_localAnchorB.Copy(s.b2Maybe(t.localAnchorB,new o.b2Vec2(1,0))),this.m_maxLength=s.b2Maybe(t.maxLength,0)}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].c,i=t.positions[this.m_indexA].a,a=t.velocities[this.m_indexA].v;let l=t.velocities[this.m_indexA].w;const m=t.positions[this.m_indexB].c,c=t.positions[this.m_indexB].a,_=t.velocities[this.m_indexB].v;let h=t.velocities[this.m_indexB].w;const u=this.m_qA.SetAngle(i),d=this.m_qB.SetAngle(c);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA),o.b2Rot.MulRV(u,this.m_lalcA,this.m_rA),o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB),o.b2Rot.MulRV(d,this.m_lalcB,this.m_rB),this.m_u.Copy(m).SelfAdd(this.m_rB).SelfSub(e).SelfSub(this.m_rA),this.m_length=this.m_u.Length();const b=this.m_length-this.m_maxLength;if(this.m_state=b>0?n.b2LimitState.e_atUpperLimit:n.b2LimitState.e_inactiveLimit,!(this.m_length>s.b2_linearSlop))return this.m_u.SetZero(),this.m_mass=0,void(this.m_impulse=0);this.m_u.SelfMul(1/this.m_length);const p=o.b2Vec2.CrossVV(this.m_rA,this.m_u),f=o.b2Vec2.CrossVV(this.m_rB,this.m_u),y=this.m_invMassA+this.m_invIA*p*p+this.m_invMassB+this.m_invIB*f*f;if(this.m_mass=0!==y?1/y:0,t.step.warmStarting){this.m_impulse*=t.step.dtRatio;const e=o.b2Vec2.MulSV(this.m_impulse,this.m_u,r.InitVelocityConstraints_s_P);a.SelfMulSub(this.m_invMassA,e),l-=this.m_invIA*o.b2Vec2.CrossVV(this.m_rA,e),_.SelfMulAdd(this.m_invMassB,e),h+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,e)}else this.m_impulse=0;t.velocities[this.m_indexA].w=l,t.velocities[this.m_indexB].w=h}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let n=t.velocities[this.m_indexB].w;const a=o.b2Vec2.AddVCrossSV(e,i,this.m_rA,r.SolveVelocityConstraints_s_vpA),l=o.b2Vec2.AddVCrossSV(s,n,this.m_rB,r.SolveVelocityConstraints_s_vpB),m=this.m_length-this.m_maxLength;let c=o.b2Vec2.DotVV(this.m_u,o.b2Vec2.SubVV(l,a,o.b2Vec2.s_t0));m<0&&(c+=t.step.inv_dt*m);let _=-this.m_mass*c;const h=this.m_impulse;this.m_impulse=o.b2Min(0,this.m_impulse+_),_=this.m_impulse-h;const u=o.b2Vec2.MulSV(_,this.m_u,r.SolveVelocityConstraints_s_P);e.SelfMulSub(this.m_invMassA,u),i-=this.m_invIA*o.b2Vec2.CrossVV(this.m_rA,u),s.SelfMulAdd(this.m_invMassB,u),n+=this.m_invIB*o.b2Vec2.CrossVV(this.m_rB,u),t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=n}SolvePositionConstraints(t){const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const n=t.positions[this.m_indexB].c;let a=t.positions[this.m_indexB].a;const l=this.m_qA.SetAngle(i),m=this.m_qB.SetAngle(a);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const c=o.b2Rot.MulRV(l,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const _=o.b2Rot.MulRV(m,this.m_lalcB,this.m_rB),h=this.m_u.Copy(n).SelfAdd(_).SelfSub(e).SelfSub(c),u=h.Normalize();let d=u-this.m_maxLength;d=o.b2Clamp(d,0,s.b2_maxLinearCorrection);const b=-this.m_mass*d,p=o.b2Vec2.MulSV(b,h,r.SolvePositionConstraints_s_P);return e.SelfMulSub(this.m_invMassA,p),i-=this.m_invIA*o.b2Vec2.CrossVV(c,p),n.SelfMulAdd(this.m_invMassB,p),a+=this.m_invIB*o.b2Vec2.CrossVV(_,p),t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=a,u-this.m_maxLength<s.b2_linearSlop}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return o.b2Vec2.MulSV(t*this.m_impulse,this.m_u,e)}GetReactionTorque(t){return 0}GetLocalAnchorA(){return this.m_localAnchorA}GetLocalAnchorB(){return this.m_localAnchorB}SetMaxLength(t){this.m_maxLength=t}GetMaxLength(){return this.m_maxLength}GetLimitState(){return this.m_state}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2RopeJointDef = new b2RopeJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.maxLength = %.15f;\n",this.m_maxLength),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.InitVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_vpA=new o.b2Vec2,r.SolveVelocityConstraints_s_vpB=new o.b2Vec2,r.SolveVelocityConstraints_s_P=new o.b2Vec2,r.SolvePositionConstraints_s_P=new o.b2Vec2,e.b2RopeJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2WeldJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_weldJoint),this.localAnchorA=new o.b2Vec2,this.localAnchorB=new o.b2Vec2,this.referenceAngle=0,this.frequencyHz=0,this.dampingRatio=0}Initialize(t,e,i){this.bodyA=t,this.bodyB=e,this.bodyA.GetLocalPoint(i,this.localAnchorA),this.bodyB.GetLocalPoint(i,this.localAnchorB),this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle()}};class r extends n.b2Joint{constructor(t){super(t),this.m_frequencyHz=0,this.m_dampingRatio=0,this.m_bias=0,this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_referenceAngle=0,this.m_gamma=0,this.m_impulse=new o.b2Vec3(0,0,0),this.m_indexA=0,this.m_indexB=0,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_mass=new o.b2Mat33,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_K=new o.b2Mat33,this.m_frequencyHz=s.b2Maybe(t.frequencyHz,0),this.m_dampingRatio=s.b2Maybe(t.dampingRatio,0),this.m_localAnchorA.Copy(s.b2Maybe(t.localAnchorA,o.b2Vec2.ZERO)),this.m_localAnchorB.Copy(s.b2Maybe(t.localAnchorB,o.b2Vec2.ZERO)),this.m_referenceAngle=s.b2Maybe(t.referenceAngle,0),this.m_impulse.SetZero()}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=t.positions[this.m_indexA].a,i=t.velocities[this.m_indexA].v;let n=t.velocities[this.m_indexA].w;const a=t.positions[this.m_indexB].a,l=t.velocities[this.m_indexB].v;let m=t.velocities[this.m_indexB].w;const c=this.m_qA.SetAngle(e),_=this.m_qB.SetAngle(a);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA),o.b2Rot.MulRV(c,this.m_lalcA,this.m_rA),o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB),o.b2Rot.MulRV(_,this.m_lalcB,this.m_rB);const h=this.m_invMassA,u=this.m_invMassB,d=this.m_invIA,b=this.m_invIB,p=this.m_K;if(p.ex.x=h+u+this.m_rA.y*this.m_rA.y*d+this.m_rB.y*this.m_rB.y*b,p.ey.x=-this.m_rA.y*this.m_rA.x*d-this.m_rB.y*this.m_rB.x*b,p.ez.x=-this.m_rA.y*d-this.m_rB.y*b,p.ex.y=p.ey.x,p.ey.y=h+u+this.m_rA.x*this.m_rA.x*d+this.m_rB.x*this.m_rB.x*b,p.ez.y=this.m_rA.x*d+this.m_rB.x*b,p.ex.z=p.ez.x,p.ey.z=p.ez.y,p.ez.z=d+b,this.m_frequencyHz>0){p.GetInverse22(this.m_mass);let i=d+b;const o=i>0?1/i:0,n=a-e-this.m_referenceAngle,r=2*s.b2_pi*this.m_frequencyHz,l=2*o*this.m_dampingRatio*r,m=o*r*r,c=t.step.dt;this.m_gamma=c*(l+c*m),this.m_gamma=0!==this.m_gamma?1/this.m_gamma:0,this.m_bias=n*c*m*this.m_gamma,i+=this.m_gamma,this.m_mass.ez.z=0!==i?1/i:0}else p.GetSymInverse33(this.m_mass),this.m_gamma=0,this.m_bias=0;if(t.step.warmStarting){this.m_impulse.SelfMul(t.step.dtRatio);const e=r.InitVelocityConstraints_s_P.Set(this.m_impulse.x,this.m_impulse.y);i.SelfMulSub(h,e),n-=d*(o.b2Vec2.CrossVV(this.m_rA,e)+this.m_impulse.z),l.SelfMulAdd(u,e),m+=b*(o.b2Vec2.CrossVV(this.m_rB,e)+this.m_impulse.z)}else this.m_impulse.SetZero();t.velocities[this.m_indexA].w=n,t.velocities[this.m_indexB].w=m}SolveVelocityConstraints(t){const e=t.velocities[this.m_indexA].v;let i=t.velocities[this.m_indexA].w;const s=t.velocities[this.m_indexB].v;let n=t.velocities[this.m_indexB].w;const a=this.m_invMassA,l=this.m_invMassB,m=this.m_invIA,c=this.m_invIB;if(this.m_frequencyHz>0){const t=n-i,_=-this.m_mass.ez.z*(t+this.m_bias+this.m_gamma*this.m_impulse.z);this.m_impulse.z+=_,i-=m*_,n+=c*_;const h=o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(s,n,this.m_rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(e,i,this.m_rA,o.b2Vec2.s_t1),r.SolveVelocityConstraints_s_Cdot1),u=o.b2Mat33.MulM33XY(this.m_mass,h.x,h.y,r.SolveVelocityConstraints_s_impulse1).SelfNeg();this.m_impulse.x+=u.x,this.m_impulse.y+=u.y;const d=u;e.SelfMulSub(a,d),i-=m*o.b2Vec2.CrossVV(this.m_rA,d),s.SelfMulAdd(l,d),n+=c*o.b2Vec2.CrossVV(this.m_rB,d)}else{const t=o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(s,n,this.m_rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(e,i,this.m_rA,o.b2Vec2.s_t1),r.SolveVelocityConstraints_s_Cdot1),_=n-i,h=o.b2Mat33.MulM33XYZ(this.m_mass,t.x,t.y,_,r.SolveVelocityConstraints_s_impulse).SelfNeg();this.m_impulse.SelfAdd(h);const u=r.SolveVelocityConstraints_s_P.Set(h.x,h.y);e.SelfMulSub(a,u),i-=m*(o.b2Vec2.CrossVV(this.m_rA,u)+h.z),s.SelfMulAdd(l,u),n+=c*(o.b2Vec2.CrossVV(this.m_rB,u)+h.z)}t.velocities[this.m_indexA].w=i,t.velocities[this.m_indexB].w=n}SolvePositionConstraints(t){const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const n=t.positions[this.m_indexB].c;let a=t.positions[this.m_indexB].a;const l=this.m_qA.SetAngle(i),m=this.m_qB.SetAngle(a),c=this.m_invMassA,_=this.m_invMassB,h=this.m_invIA,u=this.m_invIB;o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const d=o.b2Rot.MulRV(l,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const b=o.b2Rot.MulRV(m,this.m_lalcB,this.m_rB);let p,f;const y=this.m_K;if(y.ex.x=c+_+d.y*d.y*h+b.y*b.y*u,y.ey.x=-d.y*d.x*h-b.y*b.x*u,y.ez.x=-d.y*h-b.y*u,y.ex.y=y.ey.x,y.ey.y=c+_+d.x*d.x*h+b.x*b.x*u,y.ez.y=d.x*h+b.x*u,y.ex.z=y.ez.x,y.ey.z=y.ez.y,y.ez.z=h+u,this.m_frequencyHz>0){const t=o.b2Vec2.SubVV(o.b2Vec2.AddVV(n,b,o.b2Vec2.s_t0),o.b2Vec2.AddVV(e,d,o.b2Vec2.s_t1),r.SolvePositionConstraints_s_C1);p=t.Length(),f=0;const s=y.Solve22(t.x,t.y,r.SolvePositionConstraints_s_P).SelfNeg();e.SelfMulSub(c,s),i-=h*o.b2Vec2.CrossVV(d,s),n.SelfMulAdd(_,s),a+=u*o.b2Vec2.CrossVV(b,s)}else{const t=o.b2Vec2.SubVV(o.b2Vec2.AddVV(n,b,o.b2Vec2.s_t0),o.b2Vec2.AddVV(e,d,o.b2Vec2.s_t1),r.SolvePositionConstraints_s_C1),s=a-i-this.m_referenceAngle;p=t.Length(),f=o.b2Abs(s);const l=y.Solve33(t.x,t.y,s,r.SolvePositionConstraints_s_impulse).SelfNeg(),m=r.SolvePositionConstraints_s_P.Set(l.x,l.y);e.SelfMulSub(c,m),i-=h*(o.b2Vec2.CrossVV(this.m_rA,m)+l.z),n.SelfMulAdd(_,m),a+=u*(o.b2Vec2.CrossVV(this.m_rB,m)+l.z)}return t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=a,p<=s.b2_linearSlop&&f<=s.b2_angularSlop}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return e.x=t*this.m_impulse.x,e.y=t*this.m_impulse.y,e}GetReactionTorque(t){return t*this.m_impulse.z}GetLocalAnchorA(){return this.m_localAnchorA}GetLocalAnchorB(){return this.m_localAnchorB}GetReferenceAngle(){return this.m_referenceAngle}SetFrequency(t){this.m_frequencyHz=t}GetFrequency(){return this.m_frequencyHz}SetDampingRatio(t){this.m_dampingRatio=t}GetDampingRatio(){return this.m_dampingRatio}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2WeldJointDef = new b2WeldJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.referenceAngle = %.15f;\n",this.m_referenceAngle),t("  jd.frequencyHz = %.15f;\n",this.m_frequencyHz),t("  jd.dampingRatio = %.15f;\n",this.m_dampingRatio),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.InitVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_Cdot1=new o.b2Vec2,r.SolveVelocityConstraints_s_impulse1=new o.b2Vec2,r.SolveVelocityConstraints_s_impulse=new o.b2Vec3,r.SolveVelocityConstraints_s_P=new o.b2Vec2,r.SolvePositionConstraints_s_C1=new o.b2Vec2,r.SolvePositionConstraints_s_P=new o.b2Vec2,r.SolvePositionConstraints_s_impulse=new o.b2Vec3,e.b2WeldJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(3);e.b2WheelJointDef=class extends n.b2JointDef{constructor(){super(n.b2JointType.e_wheelJoint),this.localAnchorA=new o.b2Vec2(0,0),this.localAnchorB=new o.b2Vec2(0,0),this.localAxisA=new o.b2Vec2(1,0),this.enableMotor=!1,this.maxMotorTorque=0,this.motorSpeed=0,this.frequencyHz=2,this.dampingRatio=.7}Initialize(t,e,i,s){this.bodyA=t,this.bodyB=e,this.bodyA.GetLocalPoint(i,this.localAnchorA),this.bodyB.GetLocalPoint(i,this.localAnchorB),this.bodyA.GetLocalVector(s,this.localAxisA)}};class r extends n.b2Joint{constructor(t){super(t),this.m_frequencyHz=0,this.m_dampingRatio=0,this.m_localAnchorA=new o.b2Vec2,this.m_localAnchorB=new o.b2Vec2,this.m_localXAxisA=new o.b2Vec2,this.m_localYAxisA=new o.b2Vec2,this.m_impulse=0,this.m_motorImpulse=0,this.m_springImpulse=0,this.m_maxMotorTorque=0,this.m_motorSpeed=0,this.m_enableMotor=!1,this.m_indexA=0,this.m_indexB=0,this.m_localCenterA=new o.b2Vec2,this.m_localCenterB=new o.b2Vec2,this.m_invMassA=0,this.m_invMassB=0,this.m_invIA=0,this.m_invIB=0,this.m_ax=new o.b2Vec2,this.m_ay=new o.b2Vec2,this.m_sAx=0,this.m_sBx=0,this.m_sAy=0,this.m_sBy=0,this.m_mass=0,this.m_motorMass=0,this.m_springMass=0,this.m_bias=0,this.m_gamma=0,this.m_qA=new o.b2Rot,this.m_qB=new o.b2Rot,this.m_lalcA=new o.b2Vec2,this.m_lalcB=new o.b2Vec2,this.m_rA=new o.b2Vec2,this.m_rB=new o.b2Vec2,this.m_frequencyHz=s.b2Maybe(t.frequencyHz,2),this.m_dampingRatio=s.b2Maybe(t.dampingRatio,.7),this.m_localAnchorA.Copy(s.b2Maybe(t.localAnchorA,o.b2Vec2.ZERO)),this.m_localAnchorB.Copy(s.b2Maybe(t.localAnchorB,o.b2Vec2.ZERO)),this.m_localXAxisA.Copy(s.b2Maybe(t.localAxisA,o.b2Vec2.UNITX)),o.b2Vec2.CrossOneV(this.m_localXAxisA,this.m_localYAxisA),this.m_maxMotorTorque=s.b2Maybe(t.maxMotorTorque,0),this.m_motorSpeed=s.b2Maybe(t.motorSpeed,0),this.m_enableMotor=s.b2Maybe(t.enableMotor,!1),this.m_ax.SetZero(),this.m_ay.SetZero()}GetMotorSpeed(){return this.m_motorSpeed}GetMaxMotorTorque(){return this.m_maxMotorTorque}SetSpringFrequencyHz(t){this.m_frequencyHz=t}GetSpringFrequencyHz(){return this.m_frequencyHz}SetSpringDampingRatio(t){this.m_dampingRatio=t}GetSpringDampingRatio(){return this.m_dampingRatio}InitVelocityConstraints(t){this.m_indexA=this.m_bodyA.m_islandIndex,this.m_indexB=this.m_bodyB.m_islandIndex,this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter),this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter),this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;const e=this.m_invMassA,i=this.m_invMassB,n=this.m_invIA,a=this.m_invIB,l=t.positions[this.m_indexA].c,m=t.positions[this.m_indexA].a,c=t.velocities[this.m_indexA].v;let _=t.velocities[this.m_indexA].w;const h=t.positions[this.m_indexB].c,u=t.positions[this.m_indexB].a,d=t.velocities[this.m_indexB].v;let b=t.velocities[this.m_indexB].w;const p=this.m_qA.SetAngle(m),f=this.m_qB.SetAngle(u);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const y=o.b2Rot.MulRV(p,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const V=o.b2Rot.MulRV(f,this.m_lalcB,this.m_rB),x=o.b2Vec2.SubVV(o.b2Vec2.AddVV(h,V,o.b2Vec2.s_t0),o.b2Vec2.AddVV(l,y,o.b2Vec2.s_t1),r.InitVelocityConstraints_s_d);if(o.b2Rot.MulRV(p,this.m_localYAxisA,this.m_ay),this.m_sAy=o.b2Vec2.CrossVV(o.b2Vec2.AddVV(x,y,o.b2Vec2.s_t0),this.m_ay),this.m_sBy=o.b2Vec2.CrossVV(V,this.m_ay),this.m_mass=e+i+n*this.m_sAy*this.m_sAy+a*this.m_sBy*this.m_sBy,this.m_mass>0&&(this.m_mass=1/this.m_mass),this.m_springMass=0,this.m_bias=0,this.m_gamma=0,this.m_frequencyHz>0){o.b2Rot.MulRV(p,this.m_localXAxisA,this.m_ax),this.m_sAx=o.b2Vec2.CrossVV(o.b2Vec2.AddVV(x,y,o.b2Vec2.s_t0),this.m_ax),this.m_sBx=o.b2Vec2.CrossVV(V,this.m_ax);const r=e+i+n*this.m_sAx*this.m_sAx+a*this.m_sBx*this.m_sBx;if(r>0){this.m_springMass=1/r;const e=o.b2Vec2.DotVV(x,this.m_ax),i=2*s.b2_pi*this.m_frequencyHz,n=2*this.m_springMass*this.m_dampingRatio*i,a=this.m_springMass*i*i,l=t.step.dt;this.m_gamma=l*(n+l*a),this.m_gamma>0&&(this.m_gamma=1/this.m_gamma),this.m_bias=e*l*a*this.m_gamma,this.m_springMass=r+this.m_gamma,this.m_springMass>0&&(this.m_springMass=1/this.m_springMass)}}else this.m_springImpulse=0;if(this.m_enableMotor?(this.m_motorMass=n+a,this.m_motorMass>0&&(this.m_motorMass=1/this.m_motorMass)):(this.m_motorMass=0,this.m_motorImpulse=0),t.step.warmStarting){this.m_impulse*=t.step.dtRatio,this.m_springImpulse*=t.step.dtRatio,this.m_motorImpulse*=t.step.dtRatio;const e=o.b2Vec2.AddVV(o.b2Vec2.MulSV(this.m_impulse,this.m_ay,o.b2Vec2.s_t0),o.b2Vec2.MulSV(this.m_springImpulse,this.m_ax,o.b2Vec2.s_t1),r.InitVelocityConstraints_s_P),i=this.m_impulse*this.m_sAy+this.m_springImpulse*this.m_sAx+this.m_motorImpulse,s=this.m_impulse*this.m_sBy+this.m_springImpulse*this.m_sBx+this.m_motorImpulse;c.SelfMulSub(this.m_invMassA,e),_-=this.m_invIA*i,d.SelfMulAdd(this.m_invMassB,e),b+=this.m_invIB*s}else this.m_impulse=0,this.m_springImpulse=0,this.m_motorImpulse=0;t.velocities[this.m_indexA].w=_,t.velocities[this.m_indexB].w=b}SolveVelocityConstraints(t){const e=this.m_invMassA,i=this.m_invMassB,s=this.m_invIA,n=this.m_invIB,a=t.velocities[this.m_indexA].v;let l=t.velocities[this.m_indexA].w;const m=t.velocities[this.m_indexB].v;let c=t.velocities[this.m_indexB].w;{const t=o.b2Vec2.DotVV(this.m_ax,o.b2Vec2.SubVV(m,a,o.b2Vec2.s_t0))+this.m_sBx*c-this.m_sAx*l,_=-this.m_springMass*(t+this.m_bias+this.m_gamma*this.m_springImpulse);this.m_springImpulse+=_;const h=o.b2Vec2.MulSV(_,this.m_ax,r.SolveVelocityConstraints_s_P),u=_*this.m_sAx,d=_*this.m_sBx;a.SelfMulSub(e,h),l-=s*u,m.SelfMulAdd(i,h),c+=n*d}{const e=c-l-this.m_motorSpeed;let i=-this.m_motorMass*e;const r=this.m_motorImpulse,a=t.step.dt*this.m_maxMotorTorque;this.m_motorImpulse=o.b2Clamp(this.m_motorImpulse+i,-a,a),l-=s*(i=this.m_motorImpulse-r),c+=n*i}{const t=o.b2Vec2.DotVV(this.m_ay,o.b2Vec2.SubVV(m,a,o.b2Vec2.s_t0))+this.m_sBy*c-this.m_sAy*l,_=-this.m_mass*t;this.m_impulse+=_;const h=o.b2Vec2.MulSV(_,this.m_ay,r.SolveVelocityConstraints_s_P),u=_*this.m_sAy,d=_*this.m_sBy;a.SelfMulSub(e,h),l-=s*u,m.SelfMulAdd(i,h),c+=n*d}t.velocities[this.m_indexA].w=l,t.velocities[this.m_indexB].w=c}SolvePositionConstraints(t){const e=t.positions[this.m_indexA].c;let i=t.positions[this.m_indexA].a;const n=t.positions[this.m_indexB].c;let a=t.positions[this.m_indexB].a;const l=this.m_qA.SetAngle(i),m=this.m_qB.SetAngle(a);o.b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);const c=o.b2Rot.MulRV(l,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);const _=o.b2Rot.MulRV(m,this.m_lalcB,this.m_rB),h=o.b2Vec2.AddVV(o.b2Vec2.SubVV(n,e,o.b2Vec2.s_t0),o.b2Vec2.SubVV(_,c,o.b2Vec2.s_t1),r.SolvePositionConstraints_s_d),u=o.b2Rot.MulRV(l,this.m_localYAxisA,this.m_ay),d=o.b2Vec2.CrossVV(o.b2Vec2.AddVV(h,c,o.b2Vec2.s_t0),u),b=o.b2Vec2.CrossVV(_,u),p=o.b2Vec2.DotVV(h,this.m_ay),f=this.m_invMassA+this.m_invMassB+this.m_invIA*this.m_sAy*this.m_sAy+this.m_invIB*this.m_sBy*this.m_sBy;let y;y=0!==f?-p/f:0;const V=o.b2Vec2.MulSV(y,u,r.SolvePositionConstraints_s_P),x=y*d,S=y*b;return e.SelfMulSub(this.m_invMassA,V),i-=this.m_invIA*x,n.SelfMulAdd(this.m_invMassB,V),a+=this.m_invIB*S,t.positions[this.m_indexA].a=i,t.positions[this.m_indexB].a=a,o.b2Abs(p)<=s.b2_linearSlop}GetDefinition(t){return t}GetAnchorA(t){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,t)}GetAnchorB(t){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,t)}GetReactionForce(t,e){return e.x=t*(this.m_impulse*this.m_ay.x+this.m_springImpulse*this.m_ax.x),e.y=t*(this.m_impulse*this.m_ay.y+this.m_springImpulse*this.m_ax.y),e}GetReactionTorque(t){return t*this.m_motorImpulse}GetLocalAnchorA(){return this.m_localAnchorA}GetLocalAnchorB(){return this.m_localAnchorB}GetLocalAxisA(){return this.m_localXAxisA}GetJointTranslation(){return this.GetPrismaticJointTranslation()}GetJointLinearSpeed(){return this.GetPrismaticJointSpeed()}GetJointAngle(){return this.GetRevoluteJointAngle()}GetJointAngularSpeed(){return this.GetRevoluteJointSpeed()}GetPrismaticJointTranslation(){const t=this.m_bodyA,e=this.m_bodyB,i=t.GetWorldPoint(this.m_localAnchorA,new o.b2Vec2),s=e.GetWorldPoint(this.m_localAnchorB,new o.b2Vec2),n=o.b2Vec2.SubVV(s,i,new o.b2Vec2),r=t.GetWorldVector(this.m_localXAxisA,new o.b2Vec2);return o.b2Vec2.DotVV(n,r)}GetPrismaticJointSpeed(){const t=this.m_bodyA,e=this.m_bodyB;o.b2Vec2.SubVV(this.m_localAnchorA,t.m_sweep.localCenter,this.m_lalcA);const i=o.b2Rot.MulRV(t.m_xf.q,this.m_lalcA,this.m_rA);o.b2Vec2.SubVV(this.m_localAnchorB,e.m_sweep.localCenter,this.m_lalcB);const s=o.b2Rot.MulRV(e.m_xf.q,this.m_lalcB,this.m_rB),n=o.b2Vec2.AddVV(t.m_sweep.c,i,o.b2Vec2.s_t0),r=o.b2Vec2.AddVV(e.m_sweep.c,s,o.b2Vec2.s_t1),a=o.b2Vec2.SubVV(r,n,o.b2Vec2.s_t2),l=t.GetWorldVector(this.m_localXAxisA,new o.b2Vec2),m=t.m_linearVelocity,c=e.m_linearVelocity,_=t.m_angularVelocity,h=e.m_angularVelocity;return o.b2Vec2.DotVV(a,o.b2Vec2.CrossSV(_,l,o.b2Vec2.s_t0))+o.b2Vec2.DotVV(l,o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(c,h,s,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(m,_,i,o.b2Vec2.s_t1),o.b2Vec2.s_t0))}GetRevoluteJointAngle(){return this.m_bodyB.m_sweep.a-this.m_bodyA.m_sweep.a}GetRevoluteJointSpeed(){const t=this.m_bodyA.m_angularVelocity;return this.m_bodyB.m_angularVelocity-t}IsMotorEnabled(){return this.m_enableMotor}EnableMotor(t){t!==this.m_enableMotor&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_enableMotor=t)}SetMotorSpeed(t){t!==this.m_motorSpeed&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_motorSpeed=t)}SetMaxMotorTorque(t){t!==this.m_maxMotorTorque&&(this.m_bodyA.SetAwake(!0),this.m_bodyB.SetAwake(!0),this.m_maxMotorTorque=t)}GetMotorTorque(t){return t*this.m_motorImpulse}Dump(t){const e=this.m_bodyA.m_islandIndex,i=this.m_bodyB.m_islandIndex;t("  const jd: b2WheelJointDef = new b2WheelJointDef();\n"),t("  jd.bodyA = bodies[%d];\n",e),t("  jd.bodyB = bodies[%d];\n",i),t("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false"),t("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y),t("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y),t("  jd.localAxisA.Set(%.15f, %.15f);\n",this.m_localXAxisA.x,this.m_localXAxisA.y),t("  jd.enableMotor = %s;\n",this.m_enableMotor?"true":"false"),t("  jd.motorSpeed = %.15f;\n",this.m_motorSpeed),t("  jd.maxMotorTorque = %.15f;\n",this.m_maxMotorTorque),t("  jd.frequencyHz = %.15f;\n",this.m_frequencyHz),t("  jd.dampingRatio = %.15f;\n",this.m_dampingRatio),t("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index)}}r.InitVelocityConstraints_s_d=new o.b2Vec2,r.InitVelocityConstraints_s_P=new o.b2Vec2,r.SolveVelocityConstraints_s_P=new o.b2Vec2,r.SolvePositionConstraints_s_d=new o.b2Vec2,r.SolvePositionConstraints_s_P=new o.b2Vec2,e.b2WheelJoint=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(24),o=i(2),n=i(40),r=i(11),a=i(12);e.b2ContactManager=class{constructor(){this.m_broadPhase=new s.b2BroadPhase,this.m_contactList=null,this.m_contactCount=0,this.m_contactFilter=a.b2ContactFilter.b2_defaultFilter,this.m_contactListener=a.b2ContactListener.b2_defaultListener,this.m_allocator=null,this.m_contactFactory=new n.b2ContactFactory(this.m_allocator)}AddPair(t,e){let i=t.fixture,s=e.fixture,o=t.childIndex,n=e.childIndex,r=i.GetBody(),a=s.GetBody();if(r===a)return;let l=a.GetContactList();for(;l;){if(l.other===r){const t=l.contact.GetFixtureA(),e=l.contact.GetFixtureB(),r=l.contact.GetChildIndexA(),a=l.contact.GetChildIndexB();if(t===i&&e===s&&r===o&&a===n)return;if(t===s&&e===i&&r===n&&a===o)return}l=l.next}if(this.m_contactFilter&&!this.m_contactFilter.ShouldCollide(i,s))return;const m=this.m_contactFactory.Create(i,o,s,n);null!==m&&(i=m.GetFixtureA(),s=m.GetFixtureB(),o=m.GetChildIndexA(),n=m.GetChildIndexB(),r=i.m_body,a=s.m_body,m.m_prev=null,m.m_next=this.m_contactList,null!==this.m_contactList&&(this.m_contactList.m_prev=m),this.m_contactList=m,m.m_nodeA.contact=m,m.m_nodeA.other=a,m.m_nodeA.prev=null,m.m_nodeA.next=r.m_contactList,null!==r.m_contactList&&(r.m_contactList.prev=m.m_nodeA),r.m_contactList=m.m_nodeA,m.m_nodeB.contact=m,m.m_nodeB.other=r,m.m_nodeB.prev=null,m.m_nodeB.next=a.m_contactList,null!==a.m_contactList&&(a.m_contactList.prev=m.m_nodeB),a.m_contactList=m.m_nodeB,i.IsSensor()||s.IsSensor()||(r.SetAwake(!0),a.SetAwake(!0)),++this.m_contactCount)}FindNewContacts(){this.m_broadPhase.UpdatePairs((t,e)=>{this.AddPair(t,e)})}Destroy(t){const e=t.GetFixtureA(),i=t.GetFixtureB(),s=e.GetBody(),o=i.GetBody();this.m_contactListener&&t.IsTouching()&&this.m_contactListener.EndContact(t),t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t===this.m_contactList&&(this.m_contactList=t.m_next),t.m_nodeA.prev&&(t.m_nodeA.prev.next=t.m_nodeA.next),t.m_nodeA.next&&(t.m_nodeA.next.prev=t.m_nodeA.prev),t.m_nodeA===s.m_contactList&&(s.m_contactList=t.m_nodeA.next),t.m_nodeB.prev&&(t.m_nodeB.prev.next=t.m_nodeB.next),t.m_nodeB.next&&(t.m_nodeB.next.prev=t.m_nodeB.prev),t.m_nodeB===o.m_contactList&&(o.m_contactList=t.m_nodeB.next),this.m_contactFactory.Destroy(t),--this.m_contactCount}Collide(){let t=this.m_contactList;for(;t;){const e=t.GetFixtureA(),i=t.GetFixtureB(),s=t.GetChildIndexA(),n=t.GetChildIndexB(),a=e.GetBody(),l=i.GetBody();if(t.m_filterFlag){if(this.m_contactFilter&&!this.m_contactFilter.ShouldCollide(e,i)){const e=t;t=e.m_next,this.Destroy(e);continue}t.m_filterFlag=!1}const m=a.IsAwake()&&a.m_type!==r.b2BodyType.b2_staticBody,c=l.IsAwake()&&l.m_type!==r.b2BodyType.b2_staticBody;if(!m&&!c){t=t.m_next;continue}const _=e.m_proxies[s].treeNode,h=i.m_proxies[n].treeNode;if(o.b2TestOverlapAABB(_.aabb,h.aabb))t.Update(this.m_contactListener),t=t.m_next;else{const e=t;t=e.m_next,this.Destroy(e)}}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(4),n=i(41),r=i(42),a=i(43),l=i(44),m=i(45),c=i(46),_=i(47);class h{constructor(){this.createFcn=null,this.destroyFcn=null,this.primary=!1}}e.b2ContactRegister=h;e.b2ContactFactory=class{constructor(t){this.m_allocator=null,this.m_allocator=t,this.InitializeRegisters()}AddType(t,e,i,o){const n=s.b2MakeArray(256,e=>t(this.m_allocator));function r(e){return n.pop()||t(e)}function a(t,e){n.push(t)}this.m_registers[i][o].createFcn=r,this.m_registers[i][o].destroyFcn=a,this.m_registers[i][o].primary=!0,i!==o&&(this.m_registers[o][i].createFcn=r,this.m_registers[o][i].destroyFcn=a,this.m_registers[o][i].primary=!1)}InitializeRegisters(){this.m_registers=[];for(let t=0;t<o.b2ShapeType.e_shapeTypeCount;t++){this.m_registers[t]=[];for(let e=0;e<o.b2ShapeType.e_shapeTypeCount;e++)this.m_registers[t][e]=new h}this.AddType(n.b2CircleContact.Create,n.b2CircleContact.Destroy,o.b2ShapeType.e_circleShape,o.b2ShapeType.e_circleShape),this.AddType(a.b2PolygonAndCircleContact.Create,a.b2PolygonAndCircleContact.Destroy,o.b2ShapeType.e_polygonShape,o.b2ShapeType.e_circleShape),this.AddType(r.b2PolygonContact.Create,r.b2PolygonContact.Destroy,o.b2ShapeType.e_polygonShape,o.b2ShapeType.e_polygonShape),this.AddType(l.b2EdgeAndCircleContact.Create,l.b2EdgeAndCircleContact.Destroy,o.b2ShapeType.e_edgeShape,o.b2ShapeType.e_circleShape),this.AddType(m.b2EdgeAndPolygonContact.Create,m.b2EdgeAndPolygonContact.Destroy,o.b2ShapeType.e_edgeShape,o.b2ShapeType.e_polygonShape),this.AddType(c.b2ChainAndCircleContact.Create,c.b2ChainAndCircleContact.Destroy,o.b2ShapeType.e_chainShape,o.b2ShapeType.e_circleShape),this.AddType(_.b2ChainAndPolygonContact.Create,_.b2ChainAndPolygonContact.Destroy,o.b2ShapeType.e_chainShape,o.b2ShapeType.e_polygonShape)}Create(t,e,i,s){const o=t.GetType(),n=i.GetType(),r=this.m_registers[o][n];if(r.createFcn){const o=r.createFcn(this.m_allocator);return r.primary?o.Reset(t,e,i,s):o.Reset(i,s,t,e),o}return null}Destroy(t){const e=t.m_fixtureA,i=t.m_fixtureB;t.m_manifold.pointCount>0&&!e.IsSensor()&&!i.IsSensor()&&(e.GetBody().SetAwake(!0),i.GetBody().SetAwake(!0));const s=e.GetType(),o=i.GetType(),n=this.m_registers[s][o];n.destroyFcn&&n.destroyFcn(t,this.m_allocator)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(19),o=i(5);class n extends o.b2Contact{constructor(){super()}static Create(t){return new n}static Destroy(t,e){}Reset(t,e,i,s){super.Reset(t,e,i,s)}Evaluate(t,e,i){const o=this.m_fixtureA.GetShape(),n=this.m_fixtureB.GetShape();s.b2CollideCircles(t,o,e,n,i)}}e.b2CircleContact=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(26),o=i(5);class n extends o.b2Contact{constructor(){super()}static Create(t){return new n}static Destroy(t,e){}Reset(t,e,i,s){super.Reset(t,e,i,s)}Evaluate(t,e,i){const o=this.m_fixtureA.GetShape(),n=this.m_fixtureB.GetShape();s.b2CollidePolygons(t,o,e,n,i)}}e.b2PolygonContact=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(19),o=i(5);class n extends o.b2Contact{constructor(){super()}static Create(t){return new n}static Destroy(t,e){}Reset(t,e,i,s){super.Reset(t,e,i,s)}Evaluate(t,e,i){const o=this.m_fixtureA.GetShape(),n=this.m_fixtureB.GetShape();s.b2CollidePolygonAndCircle(t,o,e,n,i)}}e.b2PolygonAndCircleContact=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(9),o=i(5);class n extends o.b2Contact{constructor(){super()}static Create(t){return new n}static Destroy(t,e){}Reset(t,e,i,s){super.Reset(t,e,i,s)}Evaluate(t,e,i){const o=this.m_fixtureA.GetShape(),n=this.m_fixtureB.GetShape();s.b2CollideEdgeAndCircle(t,o,e,n,i)}}e.b2EdgeAndCircleContact=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(9),o=i(5);class n extends o.b2Contact{constructor(){super()}static Create(t){return new n}static Destroy(t,e){}Reset(t,e,i,s){super.Reset(t,e,i,s)}Evaluate(t,e,i){const o=this.m_fixtureA.GetShape(),n=this.m_fixtureB.GetShape();s.b2CollideEdgeAndPolygon(t,o,e,n,i)}}e.b2EdgeAndPolygonContact=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(9),o=i(10),n=i(5);class r extends n.b2Contact{constructor(){super()}static Create(t){return new r}static Destroy(t,e){}Reset(t,e,i,s){super.Reset(t,e,i,s)}Evaluate(t,e,i){const o=this.m_fixtureA.GetShape(),n=this.m_fixtureB.GetShape(),a=o,l=r.Evaluate_s_edge;a.GetChildEdge(l,this.m_indexA),s.b2CollideEdgeAndCircle(t,l,e,n,i)}}r.Evaluate_s_edge=new o.b2EdgeShape,e.b2ChainAndCircleContact=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(9),o=i(10),n=i(5);class r extends n.b2Contact{constructor(){super()}static Create(t){return new r}static Destroy(t,e){}Reset(t,e,i,s){super.Reset(t,e,i,s)}Evaluate(t,e,i){const o=this.m_fixtureA.GetShape(),n=this.m_fixtureB.GetShape(),a=o,l=r.Evaluate_s_edge;a.GetChildEdge(l,this.m_indexA),s.b2CollideEdgeAndPolygon(t,l,e,n,i)}}r.Evaluate_s_edge=new o.b2EdgeShape,e.b2ChainAndPolygonContact=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(0),n=i(0),r=i(0),a=i(1),l=i(14),m=i(49),c=i(11),_=i(13),h=i(12);class u{constructor(){this.m_allocator=null,this.m_bodies=[],this.m_contacts=[],this.m_joints=[],this.m_positions=_.b2Position.MakeArray(1024),this.m_velocities=_.b2Velocity.MakeArray(1024),this.m_bodyCount=0,this.m_jointCount=0,this.m_contactCount=0,this.m_bodyCapacity=0,this.m_contactCapacity=0,this.m_jointCapacity=0}Initialize(t,e,i,s,o){if(this.m_bodyCapacity=t,this.m_contactCapacity=e,this.m_jointCapacity=i,this.m_bodyCount=0,this.m_contactCount=0,this.m_jointCount=0,this.m_allocator=s,this.m_listener=o,this.m_positions.length<t){const e=a.b2Max(2*this.m_positions.length,t);for(;this.m_positions.length<e;)this.m_positions[this.m_positions.length]=new _.b2Position}if(this.m_velocities.length<t){const e=a.b2Max(2*this.m_velocities.length,t);for(;this.m_velocities.length<e;)this.m_velocities[this.m_velocities.length]=new _.b2Velocity}}Clear(){this.m_bodyCount=0,this.m_contactCount=0,this.m_jointCount=0}AddBody(t){t.m_islandIndex=this.m_bodyCount,this.m_bodies[this.m_bodyCount++]=t}AddContact(t){this.m_contacts[this.m_contactCount++]=t}AddJoint(t){this.m_joints[this.m_jointCount++]=t}Solve(t,e,i,l){const m=u.s_timer.Reset(),_=e.dt;for(let t=0;t<this.m_bodyCount;++t){const e=this.m_bodies[t];this.m_positions[t].c.Copy(e.m_sweep.c);const s=e.m_sweep.a,o=this.m_velocities[t].v.Copy(e.m_linearVelocity);let n=e.m_angularVelocity;e.m_sweep.c0.Copy(e.m_sweep.c),e.m_sweep.a0=e.m_sweep.a,e.m_type===c.b2BodyType.b2_dynamicBody&&(o.x+=_*(e.m_gravityScale*i.x+e.m_invMass*e.m_force.x),o.y+=_*(e.m_gravityScale*i.y+e.m_invMass*e.m_force.y),n+=_*e.m_invI*e.m_torque,o.SelfMul(1/(1+_*e.m_linearDamping)),n*=1/(1+_*e.m_angularDamping)),this.m_positions[t].a=s,this.m_velocities[t].w=n}m.Reset();const h=u.s_solverData;h.step.Copy(e),h.positions=this.m_positions,h.velocities=this.m_velocities;const d=u.s_contactSolverDef;d.step.Copy(e),d.contacts=this.m_contacts,d.count=this.m_contactCount,d.positions=this.m_positions,d.velocities=this.m_velocities,d.allocator=this.m_allocator;const b=u.s_contactSolver.Initialize(d);b.InitializeVelocityConstraints(),e.warmStarting&&b.WarmStart();for(let t=0;t<this.m_jointCount;++t)this.m_joints[t].InitVelocityConstraints(h);t.solveInit=m.GetMilliseconds(),m.Reset();for(let t=0;t<e.velocityIterations;++t){for(let t=0;t<this.m_jointCount;++t)this.m_joints[t].SolveVelocityConstraints(h);b.SolveVelocityConstraints()}b.StoreImpulses(),t.solveVelocity=m.GetMilliseconds();for(let t=0;t<this.m_bodyCount;++t){const e=this.m_positions[t].c;let i=this.m_positions[t].a;const s=this.m_velocities[t].v;let r=this.m_velocities[t].w;const l=a.b2Vec2.MulSV(_,s,u.s_translation);if(a.b2Vec2.DotVV(l,l)>o.b2_maxTranslationSquared){const t=o.b2_maxTranslation/l.Length();s.SelfMul(t)}const m=_*r;if(m*m>n.b2_maxRotationSquared){r*=n.b2_maxRotation/a.b2Abs(m)}e.x+=_*s.x,e.y+=_*s.y,i+=_*r,this.m_positions[t].a=i,this.m_velocities[t].w=r}m.Reset();let p=!1;for(let t=0;t<e.positionIterations;++t){const t=b.SolvePositionConstraints();let e=!0;for(let t=0;t<this.m_jointCount;++t){const i=this.m_joints[t].SolvePositionConstraints(h);e=e&&i}if(t&&e){p=!0;break}}for(let t=0;t<this.m_bodyCount;++t){const e=this.m_bodies[t];e.m_sweep.c.Copy(this.m_positions[t].c),e.m_sweep.a=this.m_positions[t].a,e.m_linearVelocity.Copy(this.m_velocities[t].v),e.m_angularVelocity=this.m_velocities[t].w,e.SynchronizeTransform()}if(t.solvePosition=m.GetMilliseconds(),this.Report(b.m_velocityConstraints),l){let t=s.b2_maxFloat;const e=r.b2_linearSleepTolerance*r.b2_linearSleepTolerance,i=r.b2_angularSleepTolerance*r.b2_angularSleepTolerance;for(let s=0;s<this.m_bodyCount;++s){const o=this.m_bodies[s];o.GetType()!==c.b2BodyType.b2_staticBody&&(!o.m_autoSleepFlag||o.m_angularVelocity*o.m_angularVelocity>i||a.b2Vec2.DotVV(o.m_linearVelocity,o.m_linearVelocity)>e?(o.m_sleepTime=0,t=0):(o.m_sleepTime+=_,t=a.b2Min(t,o.m_sleepTime)))}if(t>=s.b2_timeToSleep&&p)for(let t=0;t<this.m_bodyCount;++t){this.m_bodies[t].SetAwake(!1)}}}SolveTOI(t,e,i){for(let t=0;t<this.m_bodyCount;++t){const e=this.m_bodies[t];this.m_positions[t].c.Copy(e.m_sweep.c),this.m_positions[t].a=e.m_sweep.a,this.m_velocities[t].v.Copy(e.m_linearVelocity),this.m_velocities[t].w=e.m_angularVelocity}const s=u.s_contactSolverDef;s.contacts=this.m_contacts,s.count=this.m_contactCount,s.allocator=this.m_allocator,s.step.Copy(t),s.positions=this.m_positions,s.velocities=this.m_velocities;const r=u.s_contactSolver.Initialize(s);for(let s=0;s<t.positionIterations;++s){if(r.SolveTOIPositionConstraints(e,i))break}this.m_bodies[e].m_sweep.c0.Copy(this.m_positions[e].c),this.m_bodies[e].m_sweep.a0=this.m_positions[e].a,this.m_bodies[i].m_sweep.c0.Copy(this.m_positions[i].c),this.m_bodies[i].m_sweep.a0=this.m_positions[i].a,r.InitializeVelocityConstraints();for(let e=0;e<t.velocityIterations;++e)r.SolveVelocityConstraints();const l=t.dt;for(let t=0;t<this.m_bodyCount;++t){const e=this.m_positions[t].c;let i=this.m_positions[t].a;const s=this.m_velocities[t].v;let r=this.m_velocities[t].w;const m=a.b2Vec2.MulSV(l,s,u.s_translation);if(a.b2Vec2.DotVV(m,m)>o.b2_maxTranslationSquared){const t=o.b2_maxTranslation/m.Length();s.SelfMul(t)}const c=l*r;if(c*c>n.b2_maxRotationSquared){r*=n.b2_maxRotation/a.b2Abs(c)}e.SelfMulAdd(l,s),i+=l*r,this.m_positions[t].a=i,this.m_velocities[t].w=r;const _=this.m_bodies[t];_.m_sweep.c.Copy(e),_.m_sweep.a=i,_.m_linearVelocity.Copy(s),_.m_angularVelocity=r,_.SynchronizeTransform()}this.Report(r.m_velocityConstraints)}Report(t){if(null!==this.m_listener)for(let e=0;e<this.m_contactCount;++e){const i=this.m_contacts[e];if(!i)continue;const s=t[e],o=u.s_impulse;o.count=s.pointCount;for(let t=0;t<s.pointCount;++t)o.normalImpulses[t]=s.points[t].normalImpulse,o.tangentImpulses[t]=s.points[t].tangentImpulse;this.m_listener.PostSolve(i,o)}}}u.s_timer=new l.b2Timer,u.s_solverData=new _.b2SolverData,u.s_contactSolverDef=new m.b2ContactSolverDef,u.s_contactSolver=new m.b2ContactSolver,u.s_translation=new a.b2Vec2,u.s_impulse=new h.b2ContactImpulse,e.b2Island=u},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(2),r=i(2),a=i(13);e.g_blockSolve=!1;class l{constructor(){this.rA=new o.b2Vec2,this.rB=new o.b2Vec2,this.normalImpulse=0,this.tangentImpulse=0,this.normalMass=0,this.tangentMass=0,this.velocityBias=0}static MakeArray(t){return s.b2MakeArray(t,t=>new l)}}e.b2VelocityConstraintPoint=l;class m{constructor(){this.points=l.MakeArray(s.b2_maxManifoldPoints),this.normal=new o.b2Vec2,this.tangent=new o.b2Vec2,this.normalMass=new o.b2Mat22,this.K=new o.b2Mat22,this.indexA=0,this.indexB=0,this.invMassA=0,this.invMassB=0,this.invIA=0,this.invIB=0,this.friction=0,this.restitution=0,this.tangentSpeed=0,this.pointCount=0,this.contactIndex=0}static MakeArray(t){return s.b2MakeArray(t,t=>new m)}}e.b2ContactVelocityConstraint=m;class c{constructor(){this.localPoints=o.b2Vec2.MakeArray(s.b2_maxManifoldPoints),this.localNormal=new o.b2Vec2,this.localPoint=new o.b2Vec2,this.indexA=0,this.indexB=0,this.invMassA=0,this.invMassB=0,this.localCenterA=new o.b2Vec2,this.localCenterB=new o.b2Vec2,this.invIA=0,this.invIB=0,this.type=r.b2ManifoldType.e_unknown,this.radiusA=0,this.radiusB=0,this.pointCount=0}static MakeArray(t){return s.b2MakeArray(t,t=>new c)}}e.b2ContactPositionConstraint=c;e.b2ContactSolverDef=class{constructor(){this.step=new a.b2TimeStep,this.count=0,this.allocator=null}};class _{constructor(){this.normal=new o.b2Vec2,this.point=new o.b2Vec2,this.separation=0}Initialize(t,e,i,s){const n=_.Initialize_s_pointA,a=_.Initialize_s_pointB,l=_.Initialize_s_planePoint,m=_.Initialize_s_clipPoint;switch(t.type){case r.b2ManifoldType.e_circles:o.b2Transform.MulXV(e,t.localPoint,n),o.b2Transform.MulXV(i,t.localPoints[0],a),o.b2Vec2.SubVV(a,n,this.normal).SelfNormalize(),o.b2Vec2.MidVV(n,a,this.point),this.separation=o.b2Vec2.DotVV(o.b2Vec2.SubVV(a,n,o.b2Vec2.s_t0),this.normal)-t.radiusA-t.radiusB;break;case r.b2ManifoldType.e_faceA:o.b2Rot.MulRV(e.q,t.localNormal,this.normal),o.b2Transform.MulXV(e,t.localPoint,l),o.b2Transform.MulXV(i,t.localPoints[s],m),this.separation=o.b2Vec2.DotVV(o.b2Vec2.SubVV(m,l,o.b2Vec2.s_t0),this.normal)-t.radiusA-t.radiusB,this.point.Copy(m);break;case r.b2ManifoldType.e_faceB:o.b2Rot.MulRV(i.q,t.localNormal,this.normal),o.b2Transform.MulXV(i,t.localPoint,l),o.b2Transform.MulXV(e,t.localPoints[s],m),this.separation=o.b2Vec2.DotVV(o.b2Vec2.SubVV(m,l,o.b2Vec2.s_t0),this.normal)-t.radiusA-t.radiusB,this.point.Copy(m),this.normal.SelfNeg()}}}_.Initialize_s_pointA=new o.b2Vec2,_.Initialize_s_pointB=new o.b2Vec2,_.Initialize_s_planePoint=new o.b2Vec2,_.Initialize_s_clipPoint=new o.b2Vec2,e.b2PositionSolverManifold=_;class h{constructor(){this.m_step=new a.b2TimeStep,this.m_allocator=null,this.m_positionConstraints=c.MakeArray(1024),this.m_velocityConstraints=m.MakeArray(1024),this.m_count=0}Initialize(t){if(this.m_step.Copy(t.step),this.m_allocator=t.allocator,this.m_count=t.count,this.m_positionConstraints.length<this.m_count){const t=o.b2Max(2*this.m_positionConstraints.length,this.m_count);for(;this.m_positionConstraints.length<t;)this.m_positionConstraints[this.m_positionConstraints.length]=new c}if(this.m_velocityConstraints.length<this.m_count){const t=o.b2Max(2*this.m_velocityConstraints.length,this.m_count);for(;this.m_velocityConstraints.length<t;)this.m_velocityConstraints[this.m_velocityConstraints.length]=new m}this.m_positions=t.positions,this.m_velocities=t.velocities,this.m_contacts=t.contacts;for(let t=0;t<this.m_count;++t){const e=this.m_contacts[t],i=e.m_fixtureA,s=e.m_fixtureB,o=i.GetShape(),n=s.GetShape(),r=o.m_radius,a=n.m_radius,l=i.GetBody(),m=s.GetBody(),c=e.GetManifold(),_=c.pointCount,h=this.m_velocityConstraints[t];h.friction=e.m_friction,h.restitution=e.m_restitution,h.tangentSpeed=e.m_tangentSpeed,h.indexA=l.m_islandIndex,h.indexB=m.m_islandIndex,h.invMassA=l.m_invMass,h.invMassB=m.m_invMass,h.invIA=l.m_invI,h.invIB=m.m_invI,h.contactIndex=t,h.pointCount=_,h.K.SetZero(),h.normalMass.SetZero();const u=this.m_positionConstraints[t];u.indexA=l.m_islandIndex,u.indexB=m.m_islandIndex,u.invMassA=l.m_invMass,u.invMassB=m.m_invMass,u.localCenterA.Copy(l.m_sweep.localCenter),u.localCenterB.Copy(m.m_sweep.localCenter),u.invIA=l.m_invI,u.invIB=m.m_invI,u.localNormal.Copy(c.localNormal),u.localPoint.Copy(c.localPoint),u.pointCount=_,u.radiusA=r,u.radiusB=a,u.type=c.type;for(let t=0;t<_;++t){const e=c.points[t],i=h.points[t];this.m_step.warmStarting?(i.normalImpulse=this.m_step.dtRatio*e.normalImpulse,i.tangentImpulse=this.m_step.dtRatio*e.tangentImpulse):(i.normalImpulse=0,i.tangentImpulse=0),i.rA.SetZero(),i.rB.SetZero(),i.normalMass=0,i.tangentMass=0,i.velocityBias=0,u.localPoints[t].Copy(e.localPoint)}}return this}InitializeVelocityConstraints(){const t=h.InitializeVelocityConstraints_s_xfA,i=h.InitializeVelocityConstraints_s_xfB,n=h.InitializeVelocityConstraints_s_worldManifold;for(let r=0;r<this.m_count;++r){const a=this.m_velocityConstraints[r],l=this.m_positionConstraints[r],m=l.radiusA,c=l.radiusB,_=this.m_contacts[a.contactIndex].GetManifold(),h=a.indexA,u=a.indexB,d=a.invMassA,b=a.invMassB,p=a.invIA,f=a.invIB,y=l.localCenterA,V=l.localCenterB,x=this.m_positions[h].c,S=this.m_positions[h].a,B=this.m_velocities[h].v,C=this.m_velocities[h].w,A=this.m_positions[u].c,w=this.m_positions[u].a,g=this.m_velocities[u].v,v=this.m_velocities[u].w;t.q.SetAngle(S),i.q.SetAngle(w),o.b2Vec2.SubVV(x,o.b2Rot.MulRV(t.q,y,o.b2Vec2.s_t0),t.p),o.b2Vec2.SubVV(A,o.b2Rot.MulRV(i.q,V,o.b2Vec2.s_t0),i.p),n.Initialize(_,t,m,i,c),a.normal.Copy(n.normal),o.b2Vec2.CrossVOne(a.normal,a.tangent);const M=a.pointCount;for(let t=0;t<M;++t){const e=a.points[t];o.b2Vec2.SubVV(n.points[t],x,e.rA),o.b2Vec2.SubVV(n.points[t],A,e.rB);const i=o.b2Vec2.CrossVV(e.rA,a.normal),r=o.b2Vec2.CrossVV(e.rB,a.normal),l=d+b+p*i*i+f*r*r;e.normalMass=l>0?1/l:0;const m=a.tangent,c=o.b2Vec2.CrossVV(e.rA,m),_=o.b2Vec2.CrossVV(e.rB,m),h=d+b+p*c*c+f*_*_;e.tangentMass=h>0?1/h:0,e.velocityBias=0;const u=o.b2Vec2.DotVV(a.normal,o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(g,v,e.rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(B,C,e.rA,o.b2Vec2.s_t1),o.b2Vec2.s_t0));u<-s.b2_velocityThreshold&&(e.velocityBias+=-a.restitution*u)}if(2===a.pointCount&&e.g_blockSolve){const t=a.points[0],e=a.points[1],i=o.b2Vec2.CrossVV(t.rA,a.normal),s=o.b2Vec2.CrossVV(t.rB,a.normal),n=o.b2Vec2.CrossVV(e.rA,a.normal),r=o.b2Vec2.CrossVV(e.rB,a.normal),l=d+b+p*i*i+f*s*s,m=d+b+p*n*n+f*r*r,c=d+b+p*i*n+f*s*r;l*l<1e3*(l*m-c*c)?(a.K.ex.Set(l,c),a.K.ey.Set(c,m),a.K.GetInverse(a.normalMass)):a.pointCount=1}}}WarmStart(){const t=h.WarmStart_s_P;for(let e=0;e<this.m_count;++e){const i=this.m_velocityConstraints[e],s=i.indexA,n=i.indexB,r=i.invMassA,a=i.invIA,l=i.invMassB,m=i.invIB,c=i.pointCount,_=this.m_velocities[s].v;let h=this.m_velocities[s].w;const u=this.m_velocities[n].v;let d=this.m_velocities[n].w;const b=i.normal,p=i.tangent;for(let e=0;e<c;++e){const s=i.points[e];o.b2Vec2.AddVV(o.b2Vec2.MulSV(s.normalImpulse,b,o.b2Vec2.s_t0),o.b2Vec2.MulSV(s.tangentImpulse,p,o.b2Vec2.s_t1),t),h-=a*o.b2Vec2.CrossVV(s.rA,t),_.SelfMulSub(r,t),d+=m*o.b2Vec2.CrossVV(s.rB,t),u.SelfMulAdd(l,t)}this.m_velocities[s].w=h,this.m_velocities[n].w=d}}SolveVelocityConstraints(){const t=h.SolveVelocityConstraints_s_dv,i=h.SolveVelocityConstraints_s_dv1,s=h.SolveVelocityConstraints_s_dv2,n=h.SolveVelocityConstraints_s_P,r=h.SolveVelocityConstraints_s_a,a=h.SolveVelocityConstraints_s_b,l=h.SolveVelocityConstraints_s_x,m=h.SolveVelocityConstraints_s_d,c=h.SolveVelocityConstraints_s_P1,_=h.SolveVelocityConstraints_s_P2,u=h.SolveVelocityConstraints_s_P1P2;for(let h=0;h<this.m_count;++h){const d=this.m_velocityConstraints[h],b=d.indexA,p=d.indexB,f=d.invMassA,y=d.invIA,V=d.invMassB,x=d.invIB,S=d.pointCount,B=this.m_velocities[b].v;let C=this.m_velocities[b].w;const A=this.m_velocities[p].v;let w=this.m_velocities[p].w;const g=d.normal,v=d.tangent,M=d.friction;for(let e=0;e<S;++e){const i=d.points[e];o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(A,w,i.rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(B,C,i.rA,o.b2Vec2.s_t1),t);const s=o.b2Vec2.DotVV(t,v)-d.tangentSpeed;let r=i.tangentMass*-s;const a=M*i.normalImpulse,l=o.b2Clamp(i.tangentImpulse+r,-a,a);r=l-i.tangentImpulse,i.tangentImpulse=l,o.b2Vec2.MulSV(r,v,n),B.SelfMulSub(f,n),C-=y*o.b2Vec2.CrossVV(i.rA,n),A.SelfMulAdd(V,n),w+=x*o.b2Vec2.CrossVV(i.rB,n)}if(1===d.pointCount||!1===e.g_blockSolve)for(let e=0;e<S;++e){const i=d.points[e];o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(A,w,i.rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(B,C,i.rA,o.b2Vec2.s_t1),t);const s=o.b2Vec2.DotVV(t,g);let r=-i.normalMass*(s-i.velocityBias);const a=o.b2Max(i.normalImpulse+r,0);r=a-i.normalImpulse,i.normalImpulse=a,o.b2Vec2.MulSV(r,g,n),B.SelfMulSub(f,n),C-=y*o.b2Vec2.CrossVV(i.rA,n),A.SelfMulAdd(V,n),w+=x*o.b2Vec2.CrossVV(i.rB,n)}else{const t=d.points[0],e=d.points[1];r.Set(t.normalImpulse,e.normalImpulse),o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(A,w,t.rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(B,C,t.rA,o.b2Vec2.s_t1),i),o.b2Vec2.SubVV(o.b2Vec2.AddVCrossSV(A,w,e.rB,o.b2Vec2.s_t0),o.b2Vec2.AddVCrossSV(B,C,e.rA,o.b2Vec2.s_t1),s);let n=o.b2Vec2.DotVV(i,g),h=o.b2Vec2.DotVV(s,g);for(a.x=n-t.velocityBias,a.y=h-e.velocityBias,a.SelfSub(o.b2Mat22.MulMV(d.K,r,o.b2Vec2.s_t0));;){if(o.b2Mat22.MulMV(d.normalMass,a,l).SelfNeg(),l.x>=0&&l.y>=0){o.b2Vec2.SubVV(l,r,m),o.b2Vec2.MulSV(m.x,g,c),o.b2Vec2.MulSV(m.y,g,_),o.b2Vec2.AddVV(c,_,u),B.SelfMulSub(f,u),C-=y*(o.b2Vec2.CrossVV(t.rA,c)+o.b2Vec2.CrossVV(e.rA,_)),A.SelfMulAdd(V,u),w+=x*(o.b2Vec2.CrossVV(t.rB,c)+o.b2Vec2.CrossVV(e.rB,_)),t.normalImpulse=l.x,e.normalImpulse=l.y;break}if(l.x=-t.normalMass*a.x,l.y=0,n=0,h=d.K.ex.y*l.x+a.y,l.x>=0&&h>=0){o.b2Vec2.SubVV(l,r,m),o.b2Vec2.MulSV(m.x,g,c),o.b2Vec2.MulSV(m.y,g,_),o.b2Vec2.AddVV(c,_,u),B.SelfMulSub(f,u),C-=y*(o.b2Vec2.CrossVV(t.rA,c)+o.b2Vec2.CrossVV(e.rA,_)),A.SelfMulAdd(V,u),w+=x*(o.b2Vec2.CrossVV(t.rB,c)+o.b2Vec2.CrossVV(e.rB,_)),t.normalImpulse=l.x,e.normalImpulse=l.y;break}if(l.x=0,l.y=-e.normalMass*a.y,n=d.K.ey.x*l.y+a.x,h=0,l.y>=0&&n>=0){o.b2Vec2.SubVV(l,r,m),o.b2Vec2.MulSV(m.x,g,c),o.b2Vec2.MulSV(m.y,g,_),o.b2Vec2.AddVV(c,_,u),B.SelfMulSub(f,u),C-=y*(o.b2Vec2.CrossVV(t.rA,c)+o.b2Vec2.CrossVV(e.rA,_)),A.SelfMulAdd(V,u),w+=x*(o.b2Vec2.CrossVV(t.rB,c)+o.b2Vec2.CrossVV(e.rB,_)),t.normalImpulse=l.x,e.normalImpulse=l.y;break}if(l.x=0,l.y=0,n=a.x,h=a.y,n>=0&&h>=0){o.b2Vec2.SubVV(l,r,m),o.b2Vec2.MulSV(m.x,g,c),o.b2Vec2.MulSV(m.y,g,_),o.b2Vec2.AddVV(c,_,u),B.SelfMulSub(f,u),C-=y*(o.b2Vec2.CrossVV(t.rA,c)+o.b2Vec2.CrossVV(e.rA,_)),A.SelfMulAdd(V,u),w+=x*(o.b2Vec2.CrossVV(t.rB,c)+o.b2Vec2.CrossVV(e.rB,_)),t.normalImpulse=l.x,e.normalImpulse=l.y;break}break}}this.m_velocities[b].w=C,this.m_velocities[p].w=w}}StoreImpulses(){for(let t=0;t<this.m_count;++t){const e=this.m_velocityConstraints[t],i=this.m_contacts[e.contactIndex].GetManifold();for(let t=0;t<e.pointCount;++t)i.points[t].normalImpulse=e.points[t].normalImpulse,i.points[t].tangentImpulse=e.points[t].tangentImpulse}}SolvePositionConstraints(){const t=h.SolvePositionConstraints_s_xfA,e=h.SolvePositionConstraints_s_xfB,i=h.SolvePositionConstraints_s_psm,n=h.SolvePositionConstraints_s_rA,r=h.SolvePositionConstraints_s_rB,a=h.SolvePositionConstraints_s_P;let l=0;for(let m=0;m<this.m_count;++m){const c=this.m_positionConstraints[m],_=c.indexA,h=c.indexB,u=c.localCenterA,d=c.invMassA,b=c.invIA,p=c.localCenterB,f=c.invMassB,y=c.invIB,V=c.pointCount,x=this.m_positions[_].c;let S=this.m_positions[_].a;const B=this.m_positions[h].c;let C=this.m_positions[h].a;for(let m=0;m<V;++m){t.q.SetAngle(S),e.q.SetAngle(C),o.b2Vec2.SubVV(x,o.b2Rot.MulRV(t.q,u,o.b2Vec2.s_t0),t.p),o.b2Vec2.SubVV(B,o.b2Rot.MulRV(e.q,p,o.b2Vec2.s_t0),e.p),i.Initialize(c,t,e,m);const _=i.normal,h=i.point,V=i.separation;o.b2Vec2.SubVV(h,x,n),o.b2Vec2.SubVV(h,B,r),l=o.b2Min(l,V);const A=o.b2Clamp(s.b2_baumgarte*(V+s.b2_linearSlop),-s.b2_maxLinearCorrection,0),w=o.b2Vec2.CrossVV(n,_),g=o.b2Vec2.CrossVV(r,_),v=d+f+b*w*w+y*g*g,M=v>0?-A/v:0;o.b2Vec2.MulSV(M,_,a),x.SelfMulSub(d,a),S-=b*o.b2Vec2.CrossVV(n,a),B.SelfMulAdd(f,a),C+=y*o.b2Vec2.CrossVV(r,a)}this.m_positions[_].a=S,this.m_positions[h].a=C}return l>-3*s.b2_linearSlop}SolveTOIPositionConstraints(t,e){const i=h.SolveTOIPositionConstraints_s_xfA,n=h.SolveTOIPositionConstraints_s_xfB,r=h.SolveTOIPositionConstraints_s_psm,a=h.SolveTOIPositionConstraints_s_rA,l=h.SolveTOIPositionConstraints_s_rB,m=h.SolveTOIPositionConstraints_s_P;let c=0;for(let _=0;_<this.m_count;++_){const h=this.m_positionConstraints[_],u=h.indexA,d=h.indexB,b=h.localCenterA,p=h.localCenterB,f=h.pointCount;let y=0,V=0;u!==t&&u!==e||(y=h.invMassA,V=h.invIA);let x=0,S=0;d!==t&&d!==e||(x=h.invMassB,S=h.invIB);const B=this.m_positions[u].c;let C=this.m_positions[u].a;const A=this.m_positions[d].c;let w=this.m_positions[d].a;for(let t=0;t<f;++t){i.q.SetAngle(C),n.q.SetAngle(w),o.b2Vec2.SubVV(B,o.b2Rot.MulRV(i.q,b,o.b2Vec2.s_t0),i.p),o.b2Vec2.SubVV(A,o.b2Rot.MulRV(n.q,p,o.b2Vec2.s_t0),n.p),r.Initialize(h,i,n,t);const e=r.normal,_=r.point,u=r.separation;o.b2Vec2.SubVV(_,B,a),o.b2Vec2.SubVV(_,A,l),c=o.b2Min(c,u);const d=o.b2Clamp(s.b2_toiBaumgarte*(u+s.b2_linearSlop),-s.b2_maxLinearCorrection,0),f=o.b2Vec2.CrossVV(a,e),g=o.b2Vec2.CrossVV(l,e),v=y+x+V*f*f+S*g*g,M=v>0?-d/v:0;o.b2Vec2.MulSV(M,e,m),B.SelfMulSub(y,m),C-=V*o.b2Vec2.CrossVV(a,m),A.SelfMulAdd(x,m),w+=S*o.b2Vec2.CrossVV(l,m)}this.m_positions[u].a=C,this.m_positions[d].a=w}return c>=-1.5*s.b2_linearSlop}}h.InitializeVelocityConstraints_s_xfA=new o.b2Transform,h.InitializeVelocityConstraints_s_xfB=new o.b2Transform,h.InitializeVelocityConstraints_s_worldManifold=new n.b2WorldManifold,h.WarmStart_s_P=new o.b2Vec2,h.SolveVelocityConstraints_s_dv=new o.b2Vec2,h.SolveVelocityConstraints_s_dv1=new o.b2Vec2,h.SolveVelocityConstraints_s_dv2=new o.b2Vec2,h.SolveVelocityConstraints_s_P=new o.b2Vec2,h.SolveVelocityConstraints_s_a=new o.b2Vec2,h.SolveVelocityConstraints_s_b=new o.b2Vec2,h.SolveVelocityConstraints_s_x=new o.b2Vec2,h.SolveVelocityConstraints_s_d=new o.b2Vec2,h.SolveVelocityConstraints_s_P1=new o.b2Vec2,h.SolveVelocityConstraints_s_P2=new o.b2Vec2,h.SolveVelocityConstraints_s_P1P2=new o.b2Vec2,h.SolvePositionConstraints_s_xfA=new o.b2Transform,h.SolvePositionConstraints_s_xfB=new o.b2Transform,h.SolvePositionConstraints_s_psm=new _,h.SolvePositionConstraints_s_rA=new o.b2Vec2,h.SolvePositionConstraints_s_rB=new o.b2Vec2,h.SolvePositionConstraints_s_P=new o.b2Vec2,h.SolveTOIPositionConstraints_s_xfA=new o.b2Transform,h.SolveTOIPositionConstraints_s_xfB=new o.b2Transform,h.SolveTOIPositionConstraints_s_psm=new _,h.SolveTOIPositionConstraints_s_rA=new o.b2Vec2,h.SolveTOIPositionConstraints_s_rB=new o.b2Vec2,h.SolveTOIPositionConstraints_s_P=new o.b2Vec2,e.b2ContactSolver=h},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(0),n=i(1),r=i(7),a=i(2),l=i(4),m=i(10),c=i(13),_=i(12),h=i(21),u=i(51),d=i(61);function b(t,e,i){const s=t[e];t[e]=t[i],t[i]=s}function p(t,e){return t<e}function f(t,e=0,i=t.length-e,s=p){let o=e;const n=[];let r=0;for(;;){for(;o+1<i;i++){const e=t[o+Math.floor(Math.random()*(i-o))];n[r++]=i;for(let n=o-1;;){for(;s(t[++n],e););for(;s(e,t[--i]););if(n>=i)break;b(t,n,i)}}if(0===r)break;o=i,i=n[--r]}return t}function y(t,e=0,i=t.length-e,s=p){return f(t,e,i,s)}function V(t,e,i=t.length){let s=0;for(let o=0;o<i;++o)e(t[o])||(o!==s?b(t,s++,o):++s);return s}function x(t,e,i,s,o){let n=i-e;for(;n>0;){const i=Math.floor(n/2);let r=e+i;o(t[r],s)?(e=++r,n-=i+1):n=i}return e}function S(t,e,i,s,o){let n=i-e;for(;n>0;){const i=Math.floor(n/2);let r=e+i;o(s,t[r])?n=i:(e=++r,n-=i+1)}return e}function B(t,e,i,s){let o=i;for(;e!==o;)b(t,e++,o++),o===s?o=i:e===i&&(i=o)}class C{constructor(t){this.data=[],this.count=0,this.capacity=0,this.allocator=t}Append(){return this.count>=this.capacity&&this.Grow(),this.count++}Reserve(t){if(!(this.capacity>=t)){for(let e=this.capacity;e<t;++e)this.data[e]=this.allocator();this.capacity=t}}Grow(){const t=this.capacity?2*this.capacity:s.b2_minParticleSystemBufferCapacity;this.Reserve(t)}Free(){0!==this.data.length&&(this.data=[],this.capacity=0,this.count=0)}Shorten(t){}Data(){return this.data}GetCount(){return this.count}SetCount(t){this.count=t}GetCapacity(){return this.capacity}RemoveIf(t){this.count=V(this.data,t,this.count)}Unique(t){this.count=function(t,e,i,s){if(e===i)return i;let o=e;for(;++e!==i;)s(t[o],t[e])||b(t,++o,e);return++o}(this.data,0,this.count,t)}}e.b2GrowableBuffer=C;class A extends _.b2QueryCallback{constructor(t){super(),this.m_system=t}ShouldQueryParticleSystem(t){return!1}ReportFixture(t){if(t.IsSensor())return!0;const e=t.GetShape().GetChildCount();for(let i=0;i<e;i++){const e=t.GetAABB(i),s=this.m_system.GetInsideBoundsEnumerator(e);let o;for(;(o=s.GetNext())>=0;)this.ReportFixtureAndParticle(t,i,o)}return!0}ReportParticle(t,e){return!1}ReportFixtureAndParticle(t,e,i){}}e.b2FixtureParticleQueryCallback=A;class w{constructor(){this.indexA=0,this.indexB=0,this.weight=0,this.normal=new n.b2Vec2,this.flags=0}SetIndices(t,e){this.indexA=t,this.indexB=e}SetWeight(t){this.weight=t}SetNormal(t){this.normal.Copy(t)}SetFlags(t){this.flags=t}GetIndexA(){return this.indexA}GetIndexB(){return this.indexB}GetWeight(){return this.weight}GetNormal(){return this.normal}GetFlags(){return this.flags}IsEqual(t){return this.indexA===t.indexA&&this.indexB===t.indexB&&this.flags===t.flags&&this.weight===t.weight&&this.normal.x===t.normal.x&&this.normal.y===t.normal.y}IsNotEqual(t){return!this.IsEqual(t)}ApproximatelyEqual(t){return this.indexA===t.indexA&&this.indexB===t.indexB&&this.flags===t.flags&&n.b2Abs(this.weight-t.weight)<.01&&n.b2Vec2.DistanceSquaredVV(this.normal,t.normal)<1e-4}}e.b2ParticleContact=w;class g{constructor(){this.index=0,this.weight=0,this.normal=new n.b2Vec2,this.mass=0}}e.b2ParticleBodyContact=g;class v{constructor(){this.indexA=0,this.indexB=0,this.flags=0,this.strength=0,this.distance=0}}e.b2ParticlePair=v;class M{constructor(){this.indexA=0,this.indexB=0,this.indexC=0,this.flags=0,this.strength=0,this.pa=new n.b2Vec2(0,0),this.pb=new n.b2Vec2(0,0),this.pc=new n.b2Vec2(0,0),this.ka=0,this.kb=0,this.kc=0,this.s=0}}e.b2ParticleTriad=M;class P{constructor(){this.strictContactCheck=!1,this.density=1,this.gravityScale=1,this.radius=1,this.maxCount=0,this.pressureStrength=.005,this.dampingStrength=1,this.elasticStrength=.25,this.springStrength=.25,this.viscousStrength=.25,this.surfaceTensionPressureStrength=.2,this.surfaceTensionNormalStrength=.2,this.repulsiveStrength=1,this.powderStrength=.5,this.ejectionStrength=.5,this.staticPressureStrength=.2,this.staticPressureRelaxation=.2,this.staticPressureIterations=8,this.colorMixingStrength=.5,this.destroyByAge=!0,this.lifetimeGranularity=1/60}Copy(t){return this.strictContactCheck=t.strictContactCheck,this.density=t.density,this.gravityScale=t.gravityScale,this.radius=t.radius,this.maxCount=t.maxCount,this.pressureStrength=t.pressureStrength,this.dampingStrength=t.dampingStrength,this.elasticStrength=t.elasticStrength,this.springStrength=t.springStrength,this.viscousStrength=t.viscousStrength,this.surfaceTensionPressureStrength=t.surfaceTensionPressureStrength,this.surfaceTensionNormalStrength=t.surfaceTensionNormalStrength,this.repulsiveStrength=t.repulsiveStrength,this.powderStrength=t.powderStrength,this.ejectionStrength=t.ejectionStrength,this.staticPressureStrength=t.staticPressureStrength,this.staticPressureRelaxation=t.staticPressureRelaxation,this.staticPressureIterations=t.staticPressureIterations,this.colorMixingStrength=t.colorMixingStrength,this.destroyByAge=t.destroyByAge,this.lifetimeGranularity=t.lifetimeGranularity,this}Clone(){return(new P).Copy(this)}}e.b2ParticleSystemDef=P;class I{constructor(t,e){this.m_paused=!1,this.m_timestamp=0,this.m_allParticleFlags=0,this.m_needsUpdateAllParticleFlags=!1,this.m_allGroupFlags=0,this.m_needsUpdateAllGroupFlags=!1,this.m_hasForce=!1,this.m_iterationIndex=0,this.m_inverseDensity=0,this.m_particleDiameter=0,this.m_inverseDiameter=0,this.m_squaredDiameter=0,this.m_count=0,this.m_internalAllocatedCapacity=0,this.m_handleIndexBuffer=new I.UserOverridableBuffer,this.m_flagsBuffer=new I.UserOverridableBuffer,this.m_positionBuffer=new I.UserOverridableBuffer,this.m_velocityBuffer=new I.UserOverridableBuffer,this.m_forceBuffer=[],this.m_weightBuffer=[],this.m_staticPressureBuffer=[],this.m_accumulationBuffer=[],this.m_accumulation2Buffer=[],this.m_depthBuffer=[],this.m_colorBuffer=new I.UserOverridableBuffer,this.m_groupBuffer=[],this.m_userDataBuffer=new I.UserOverridableBuffer,this.m_stuckThreshold=0,this.m_lastBodyContactStepBuffer=new I.UserOverridableBuffer,this.m_bodyContactCountBuffer=new I.UserOverridableBuffer,this.m_consecutiveContactStepsBuffer=new I.UserOverridableBuffer,this.m_stuckParticleBuffer=new C(()=>0),this.m_proxyBuffer=new C(()=>new I.Proxy),this.m_contactBuffer=new C(()=>new w),this.m_bodyContactBuffer=new C(()=>new g),this.m_pairBuffer=new C(()=>new v),this.m_triadBuffer=new C(()=>new M),this.m_expirationTimeBuffer=new I.UserOverridableBuffer,this.m_indexByExpirationTimeBuffer=new I.UserOverridableBuffer,this.m_timeElapsed=0,this.m_expirationTimeBufferRequiresSorting=!1,this.m_groupCount=0,this.m_groupList=null,this.m_def=new P,this.m_prev=null,this.m_next=null,this.SetStrictContactCheck(t.strictContactCheck),this.SetDensity(t.density),this.SetGravityScale(t.gravityScale),this.SetRadius(t.radius),this.SetMaxParticleCount(t.maxCount),this.m_def=t.Clone(),this.m_world=e,this.SetDestructionByAge(this.m_def.destroyByAge)}static computeTag(t,e){return(e+I.yOffset>>>0<<I.yShift)+(I.xScale*t+I.xOffset>>>0)>>>0}static computeRelativeTag(t,e,i){return t+(i<<I.yShift)+(e<<I.xShift)>>>0}Drop(){for(;this.m_groupList;)this.DestroyParticleGroup(this.m_groupList);this.FreeUserOverridableBuffer(this.m_handleIndexBuffer),this.FreeUserOverridableBuffer(this.m_flagsBuffer),this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer),this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer),this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer),this.FreeUserOverridableBuffer(this.m_positionBuffer),this.FreeUserOverridableBuffer(this.m_velocityBuffer),this.FreeUserOverridableBuffer(this.m_colorBuffer),this.FreeUserOverridableBuffer(this.m_userDataBuffer),this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer),this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer),this.FreeBuffer(this.m_forceBuffer,this.m_internalAllocatedCapacity),this.FreeBuffer(this.m_weightBuffer,this.m_internalAllocatedCapacity),this.FreeBuffer(this.m_staticPressureBuffer,this.m_internalAllocatedCapacity),this.FreeBuffer(this.m_accumulationBuffer,this.m_internalAllocatedCapacity),this.FreeBuffer(this.m_accumulation2Buffer,this.m_internalAllocatedCapacity),this.FreeBuffer(this.m_depthBuffer,this.m_internalAllocatedCapacity),this.FreeBuffer(this.m_groupBuffer,this.m_internalAllocatedCapacity)}CreateParticle(t){if(this.m_world.IsLocked())throw new Error;if(this.m_count>=this.m_internalAllocatedCapacity){const t=this.m_count?2*this.m_count:s.b2_minParticleSystemBufferCapacity;this.ReallocateInternalAllocatedBuffers(t)}if(this.m_count>=this.m_internalAllocatedCapacity){if(!this.m_def.destroyByAge)return s.b2_invalidParticleIndex;this.DestroyOldestParticle(0,!1),this.SolveZombie()}const e=this.m_count++;if(!this.m_flagsBuffer.data)throw new Error;if(this.m_flagsBuffer.data[e]=0,this.m_lastBodyContactStepBuffer.data&&(this.m_lastBodyContactStepBuffer.data[e]=0),this.m_bodyContactCountBuffer.data&&(this.m_bodyContactCountBuffer.data[e]=0),this.m_consecutiveContactStepsBuffer.data&&(this.m_consecutiveContactStepsBuffer.data[e]=0),!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;this.m_positionBuffer.data[e]=(this.m_positionBuffer.data[e]||new n.b2Vec2).Copy(s.b2Maybe(t.position,n.b2Vec2.ZERO)),this.m_velocityBuffer.data[e]=(this.m_velocityBuffer.data[e]||new n.b2Vec2).Copy(s.b2Maybe(t.velocity,n.b2Vec2.ZERO)),this.m_weightBuffer[e]=0,this.m_forceBuffer[e]=(this.m_forceBuffer[e]||new n.b2Vec2).SetZero(),this.m_staticPressureBuffer&&(this.m_staticPressureBuffer[e]=0),this.m_depthBuffer&&(this.m_depthBuffer[e]=0);const i=(new r.b2Color).Copy(s.b2Maybe(t.color,r.b2Color.ZERO));!this.m_colorBuffer.data&&i.IsZero()||(this.m_colorBuffer.data=this.RequestBuffer(this.m_colorBuffer.data),this.m_colorBuffer.data[e]=(this.m_colorBuffer.data[e]||new r.b2Color).Copy(i)),(this.m_userDataBuffer.data||t.userData)&&(this.m_userDataBuffer.data=this.RequestBuffer(this.m_userDataBuffer.data),this.m_userDataBuffer.data[e]=t.userData),this.m_handleIndexBuffer.data&&(this.m_handleIndexBuffer.data[e]=null);const o=this.m_proxyBuffer.data[this.m_proxyBuffer.Append()],a=s.b2Maybe(t.lifetime,0),l=a>0;if(this.m_expirationTimeBuffer.data||l){if(this.SetParticleLifetime(e,l?a:this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed())),!this.m_indexByExpirationTimeBuffer.data)throw new Error;this.m_indexByExpirationTimeBuffer.data[e]=e}o.index=e;const m=s.b2Maybe(t.group,null);return this.m_groupBuffer[e]=m,m&&(m.m_firstIndex<m.m_lastIndex?(this.RotateBuffer(m.m_firstIndex,m.m_lastIndex,e),m.m_lastIndex=e+1):(m.m_firstIndex=e,m.m_lastIndex=e+1)),this.SetParticleFlags(e,s.b2Maybe(t.flags,0)),e}GetParticleHandleFromIndex(t){this.m_handleIndexBuffer.data=this.RequestBuffer(this.m_handleIndexBuffer.data);let e=this.m_handleIndexBuffer.data[t];return e||((e=new h.b2ParticleHandle).SetIndex(t),this.m_handleIndexBuffer.data[t]=e,e)}DestroyParticle(t,e=!1){if(!this.m_flagsBuffer.data)throw new Error;let i=h.b2ParticleFlag.b2_zombieParticle;e&&(i|=h.b2ParticleFlag.b2_destructionListenerParticle),this.SetParticleFlags(t,this.m_flagsBuffer.data[t]|i)}DestroyOldestParticle(t,e=!1){const i=this.GetParticleCount();if(!this.m_indexByExpirationTimeBuffer.data)throw new Error;if(!this.m_expirationTimeBuffer.data)throw new Error;const s=this.m_indexByExpirationTimeBuffer.data[i-(t+1)],o=this.m_indexByExpirationTimeBuffer.data[t];this.DestroyParticle(this.m_expirationTimeBuffer.data[s]>0?s:o,e)}DestroyParticlesInShape(t,e,i=!1){const s=I.DestroyParticlesInShape_s_aabb;if(this.m_world.IsLocked())throw new Error;const o=new I.DestroyParticlesInShapeCallback(this,t,e,i),n=s;return t.ComputeAABB(n,e,0),this.m_world.QueryAABB(o,n),o.Destroyed()}CreateParticleGroup(t){const e=I.CreateParticleGroup_s_transform;if(this.m_world.IsLocked())throw new Error;const i=e;i.SetPositionAngle(s.b2Maybe(t.position,n.b2Vec2.ZERO),s.b2Maybe(t.angle,0));const o=this.m_count;if(t.shape&&this.CreateParticlesWithShapeForGroup(t.shape,t,i),t.shapes&&this.CreateParticlesWithShapesForGroup(t.shapes,s.b2Maybe(t.shapeCount,t.shapes.length),t,i),t.positionData){const e=s.b2Maybe(t.particleCount,t.positionData.length);for(let s=0;s<e;s++){const e=t.positionData[s];this.CreateParticleForGroup(t,i,e)}}const r=this.m_count;let a=new u.b2ParticleGroup(this);a.m_firstIndex=o,a.m_lastIndex=r,a.m_strength=s.b2Maybe(t.strength,1),a.m_userData=t.userData,a.m_transform.Copy(i),a.m_prev=null,a.m_next=this.m_groupList,this.m_groupList&&(this.m_groupList.m_prev=a),this.m_groupList=a,++this.m_groupCount;for(let t=o;t<r;t++)this.m_groupBuffer[t]=a;this.SetGroupFlags(a,s.b2Maybe(t.groupFlags,0));const l=new I.ConnectionFilter;return this.UpdateContacts(!0),this.UpdatePairsAndTriads(o,r,l),t.group&&(this.JoinParticleGroups(t.group,a),a=t.group),a}JoinParticleGroups(t,e){if(this.m_world.IsLocked())throw new Error;this.RotateBuffer(e.m_firstIndex,e.m_lastIndex,this.m_count),this.RotateBuffer(t.m_firstIndex,t.m_lastIndex,e.m_firstIndex);const i=new I.JoinParticleGroupsFilter(e.m_firstIndex);this.UpdateContacts(!0),this.UpdatePairsAndTriads(t.m_firstIndex,e.m_lastIndex,i);for(let i=e.m_firstIndex;i<e.m_lastIndex;i++)this.m_groupBuffer[i]=t;const s=t.m_groupFlags|e.m_groupFlags;this.SetGroupFlags(t,s),t.m_lastIndex=e.m_lastIndex,e.m_firstIndex=e.m_lastIndex,this.DestroyParticleGroup(e)}SplitParticleGroup(t){this.UpdateContacts(!0);const e=t.GetParticleCount(),i=s.b2MakeArray(e,t=>new I.ParticleListNode);I.InitializeParticleLists(t,i),this.MergeParticleListsInContact(t,i);const o=I.FindLongestParticleList(t,i);this.MergeZombieParticleListNodes(t,i,o),this.CreateParticleGroupsFromParticleList(t,i,o),this.UpdatePairsAndTriadsWithParticleList(t,i)}GetParticleGroupList(){return this.m_groupList}GetParticleGroupCount(){return this.m_groupCount}GetParticleCount(){return this.m_count}GetMaxParticleCount(){return this.m_def.maxCount}SetMaxParticleCount(t){this.m_def.maxCount=t}GetAllParticleFlags(){return this.m_allParticleFlags}GetAllGroupFlags(){return this.m_allGroupFlags}SetPaused(t){this.m_paused=t}GetPaused(){return this.m_paused}SetDensity(t){this.m_def.density=t,this.m_inverseDensity=1/this.m_def.density}GetDensity(){return this.m_def.density}SetGravityScale(t){this.m_def.gravityScale=t}GetGravityScale(){return this.m_def.gravityScale}SetDamping(t){this.m_def.dampingStrength=t}GetDamping(){return this.m_def.dampingStrength}SetStaticPressureIterations(t){this.m_def.staticPressureIterations=t}GetStaticPressureIterations(){return this.m_def.staticPressureIterations}SetRadius(t){this.m_particleDiameter=2*t,this.m_squaredDiameter=this.m_particleDiameter*this.m_particleDiameter,this.m_inverseDiameter=1/this.m_particleDiameter}GetRadius(){return this.m_particleDiameter/2}GetPositionBuffer(){if(!this.m_positionBuffer.data)throw new Error;return this.m_positionBuffer.data}GetVelocityBuffer(){if(!this.m_velocityBuffer.data)throw new Error;return this.m_velocityBuffer.data}GetColorBuffer(){return this.m_colorBuffer.data=this.RequestBuffer(this.m_colorBuffer.data),this.m_colorBuffer.data}GetGroupBuffer(){return this.m_groupBuffer}GetWeightBuffer(){return this.m_weightBuffer}GetUserDataBuffer(){return this.m_userDataBuffer.data=this.RequestBuffer(this.m_userDataBuffer.data),this.m_userDataBuffer.data}GetFlagsBuffer(){if(!this.m_flagsBuffer.data)throw new Error;return this.m_flagsBuffer.data}SetParticleFlags(t,e){if(!this.m_flagsBuffer.data)throw new Error;this.m_flagsBuffer.data[t]&~e&&(this.m_needsUpdateAllParticleFlags=!0),~this.m_allParticleFlags&e&&(e&h.b2ParticleFlag.b2_tensileParticle&&(this.m_accumulation2Buffer=this.RequestBuffer(this.m_accumulation2Buffer)),e&h.b2ParticleFlag.b2_colorMixingParticle&&(this.m_colorBuffer.data=this.RequestBuffer(this.m_colorBuffer.data)),this.m_allParticleFlags|=e),this.m_flagsBuffer.data[t]=e}GetParticleFlags(t){if(!this.m_flagsBuffer.data)throw new Error;return this.m_flagsBuffer.data[t]}SetFlagsBuffer(t,e){this.SetUserOverridableBuffer(this.m_flagsBuffer,t,e)}SetPositionBuffer(t,e){this.SetUserOverridableBuffer(this.m_positionBuffer,t,e)}SetVelocityBuffer(t,e){this.SetUserOverridableBuffer(this.m_velocityBuffer,t,e)}SetColorBuffer(t,e){this.SetUserOverridableBuffer(this.m_colorBuffer,t,e)}SetUserDataBuffer(t,e){this.SetUserOverridableBuffer(this.m_userDataBuffer,t,e)}GetContacts(){return this.m_contactBuffer.data}GetContactCount(){return this.m_contactBuffer.count}GetBodyContacts(){return this.m_bodyContactBuffer.data}GetBodyContactCount(){return this.m_bodyContactBuffer.count}GetPairs(){return this.m_pairBuffer.data}GetPairCount(){return this.m_pairBuffer.count}GetTriads(){return this.m_triadBuffer.data}GetTriadCount(){return this.m_triadBuffer.count}SetStuckThreshold(t){this.m_stuckThreshold=t,t>0&&(this.m_lastBodyContactStepBuffer.data=this.RequestBuffer(this.m_lastBodyContactStepBuffer.data),this.m_bodyContactCountBuffer.data=this.RequestBuffer(this.m_bodyContactCountBuffer.data),this.m_consecutiveContactStepsBuffer.data=this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data))}GetStuckCandidates(){return this.m_stuckParticleBuffer.Data()}GetStuckCandidateCount(){return this.m_stuckParticleBuffer.GetCount()}ComputeCollisionEnergy(){if(!this.m_velocityBuffer.data)throw new Error;const t=I.ComputeCollisionEnergy_s_v,e=this.m_velocityBuffer.data;let i=0;for(let s=0;s<this.m_contactBuffer.count;s++){const o=this.m_contactBuffer.data[s],r=o.indexA,a=o.indexB,l=o.normal,m=n.b2Vec2.SubVV(e[a],e[r],t),c=n.b2Vec2.DotVV(m,l);c<0&&(i+=c*c)}return.5*this.GetParticleMass()*i}SetStrictContactCheck(t){this.m_def.strictContactCheck=t}GetStrictContactCheck(){return this.m_def.strictContactCheck}SetParticleLifetime(t,e){const i=null===this.m_indexByExpirationTimeBuffer.data;if(this.m_expirationTimeBuffer.data=this.RequestBuffer(this.m_expirationTimeBuffer.data),this.m_indexByExpirationTimeBuffer.data=this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data),i){const t=this.GetParticleCount();for(let e=0;e<t;++e)this.m_indexByExpirationTimeBuffer.data[e]=e}const s=e/this.m_def.lifetimeGranularity,o=s>0?this.GetQuantizedTimeElapsed()+s:s;o!==this.m_expirationTimeBuffer.data[t]&&(this.m_expirationTimeBuffer.data[t]=o,this.m_expirationTimeBufferRequiresSorting=!0)}GetParticleLifetime(t){return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[t])}SetDestructionByAge(t){t&&this.GetExpirationTimeBuffer(),this.m_def.destroyByAge=t}GetDestructionByAge(){return this.m_def.destroyByAge}GetExpirationTimeBuffer(){return this.m_expirationTimeBuffer.data=this.RequestBuffer(this.m_expirationTimeBuffer.data),this.m_expirationTimeBuffer.data}ExpirationTimeToLifetime(t){return(t>0?t-this.GetQuantizedTimeElapsed():t)*this.m_def.lifetimeGranularity}GetIndexByExpirationTimeBuffer(){if(this.GetParticleCount()?this.SetParticleLifetime(0,this.GetParticleLifetime(0)):this.m_indexByExpirationTimeBuffer.data=this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data),!this.m_indexByExpirationTimeBuffer.data)throw new Error;return this.m_indexByExpirationTimeBuffer.data}ParticleApplyLinearImpulse(t,e){this.ApplyLinearImpulse(t,t+1,e)}ApplyLinearImpulse(t,e,i){if(!this.m_velocityBuffer.data)throw new Error;const s=this.m_velocityBuffer.data,o=(e-t)*this.GetParticleMass(),r=(new n.b2Vec2).Copy(i).SelfMul(1/o);for(let i=t;i<e;i++)s[i].SelfAdd(r)}static IsSignificantForce(t){return 0!==t.x||0!==t.y}ParticleApplyForce(t,e){if(!this.m_flagsBuffer.data)throw new Error;I.IsSignificantForce(e)&&this.ForceCanBeApplied(this.m_flagsBuffer.data[t])&&(this.PrepareForceBuffer(),this.m_forceBuffer[t].SelfAdd(e))}ApplyForce(t,e,i){const s=(new n.b2Vec2).Copy(i).SelfMul(1/(e-t));if(I.IsSignificantForce(s)){this.PrepareForceBuffer();for(let i=t;i<e;i++)this.m_forceBuffer[i].SelfAdd(s)}}GetNext(){return this.m_next}QueryAABB(t,e){if(0===this.m_proxyBuffer.count)return;const i=this.m_proxyBuffer.count,s=x(this.m_proxyBuffer.data,0,i,I.computeTag(this.m_inverseDiameter*e.lowerBound.x,this.m_inverseDiameter*e.lowerBound.y),I.Proxy.CompareProxyTag),o=S(this.m_proxyBuffer.data,s,i,I.computeTag(this.m_inverseDiameter*e.upperBound.x,this.m_inverseDiameter*e.upperBound.y),I.Proxy.CompareTagProxy);if(!this.m_positionBuffer.data)throw new Error;const n=this.m_positionBuffer.data;for(let i=s;i<o;++i){const s=this.m_proxyBuffer.data[i].index,o=n[s];if(e.lowerBound.x<o.x&&o.x<e.upperBound.x&&e.lowerBound.y<o.y&&o.y<e.upperBound.y&&!t.ReportParticle(this,s))break}}QueryShapeAABB(t,e,i,s=0){const o=I.QueryShapeAABB_s_aabb;e.ComputeAABB(o,i,s),this.QueryAABB(t,o)}QueryPointAABB(t,e,i=s.b2_linearSlop){const o=I.QueryPointAABB_s_aabb;o.lowerBound.Set(e.x-i,e.y-i),o.upperBound.Set(e.x+i,e.y+i),this.QueryAABB(t,o)}RayCast(t,e,i){const s=I.RayCast_s_aabb,o=I.RayCast_s_p,r=I.RayCast_s_v,a=I.RayCast_s_n,l=I.RayCast_s_point;if(0===this.m_proxyBuffer.count)return;if(!this.m_positionBuffer.data)throw new Error;const m=this.m_positionBuffer.data,c=s;n.b2Vec2.MinV(e,i,c.lowerBound),n.b2Vec2.MaxV(e,i,c.upperBound);let _=1;const h=n.b2Vec2.SubVV(i,e,r),u=n.b2Vec2.DotVV(h,h),d=this.GetInsideBoundsEnumerator(c);let b;for(;(b=d.GetNext())>=0;){const i=n.b2Vec2.SubVV(e,m[b],o),s=n.b2Vec2.DotVV(i,h),r=s*s-u*(n.b2Vec2.DotVV(i,i)-this.m_squaredDiameter);if(r>=0){const o=n.b2Sqrt(r);let m=(-s-o)/u;if(m>_)continue;if(m<0&&((m=(-s+o)/u)<0||m>_))continue;const c=n.b2Vec2.AddVMulSV(i,m,h,a);c.Normalize();const d=t.ReportParticle(this,b,n.b2Vec2.AddVMulSV(e,m,h,l),c,m);if((_=n.b2Min(_,d))<=0)break}}}ComputeAABB(t){const e=this.GetParticleCount();if(t.lowerBound.x=+s.b2_maxFloat,t.lowerBound.y=+s.b2_maxFloat,t.upperBound.x=-s.b2_maxFloat,t.upperBound.y=-s.b2_maxFloat,!this.m_positionBuffer.data)throw new Error;const i=this.m_positionBuffer.data;for(let s=0;s<e;s++){const e=i[s];n.b2Vec2.MinV(t.lowerBound,e,t.lowerBound),n.b2Vec2.MaxV(t.upperBound,e,t.upperBound)}t.lowerBound.x-=this.m_particleDiameter,t.lowerBound.y-=this.m_particleDiameter,t.upperBound.x+=this.m_particleDiameter,t.upperBound.y+=this.m_particleDiameter}FreeBuffer(t,e){null!==t&&(t.length=0)}FreeUserOverridableBuffer(t){0===t.userSuppliedCapacity&&this.FreeBuffer(t.data,this.m_internalAllocatedCapacity)}ReallocateBuffer3(t,e,i){if(i<=e)throw new Error;const s=t?t.slice():[];return s.length=i,s}ReallocateBuffer5(t,e,i,s,o){if(s<=i)throw new Error;if(e&&!(s<=e))throw new Error;return o&&!t||e||(t=this.ReallocateBuffer3(t,i,s)),t}ReallocateBuffer4(t,e,i,s){return this.ReallocateBuffer5(t.data,t.userSuppliedCapacity,e,i,s)}RequestBuffer(t){return t||(0===this.m_internalAllocatedCapacity&&this.ReallocateInternalAllocatedBuffers(s.b2_minParticleSystemBufferCapacity),(t=[]).length=this.m_internalAllocatedCapacity),t}ReallocateHandleBuffers(t){this.m_handleIndexBuffer.data=this.ReallocateBuffer4(this.m_handleIndexBuffer,this.m_internalAllocatedCapacity,t,!0)}ReallocateInternalAllocatedBuffers(t){function e(t,e){return e&&t>e?e:t}if(t=e(t=e(t=e(t=e(t=e(t=e(t,this.m_def.maxCount),this.m_flagsBuffer.userSuppliedCapacity),this.m_positionBuffer.userSuppliedCapacity),this.m_velocityBuffer.userSuppliedCapacity),this.m_colorBuffer.userSuppliedCapacity),this.m_userDataBuffer.userSuppliedCapacity),this.m_internalAllocatedCapacity<t){this.ReallocateHandleBuffers(t),this.m_flagsBuffer.data=this.ReallocateBuffer4(this.m_flagsBuffer,this.m_internalAllocatedCapacity,t,!1);const e=this.m_stuckThreshold>0;this.m_lastBodyContactStepBuffer.data=this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer,this.m_internalAllocatedCapacity,t,e),this.m_bodyContactCountBuffer.data=this.ReallocateBuffer4(this.m_bodyContactCountBuffer,this.m_internalAllocatedCapacity,t,e),this.m_consecutiveContactStepsBuffer.data=this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer,this.m_internalAllocatedCapacity,t,e),this.m_positionBuffer.data=this.ReallocateBuffer4(this.m_positionBuffer,this.m_internalAllocatedCapacity,t,!1),this.m_velocityBuffer.data=this.ReallocateBuffer4(this.m_velocityBuffer,this.m_internalAllocatedCapacity,t,!1),this.m_forceBuffer=this.ReallocateBuffer5(this.m_forceBuffer,0,this.m_internalAllocatedCapacity,t,!1),this.m_weightBuffer=this.ReallocateBuffer5(this.m_weightBuffer,0,this.m_internalAllocatedCapacity,t,!1),this.m_staticPressureBuffer=this.ReallocateBuffer5(this.m_staticPressureBuffer,0,this.m_internalAllocatedCapacity,t,!0),this.m_accumulationBuffer=this.ReallocateBuffer5(this.m_accumulationBuffer,0,this.m_internalAllocatedCapacity,t,!1),this.m_accumulation2Buffer=this.ReallocateBuffer5(this.m_accumulation2Buffer,0,this.m_internalAllocatedCapacity,t,!0),this.m_depthBuffer=this.ReallocateBuffer5(this.m_depthBuffer,0,this.m_internalAllocatedCapacity,t,!0),this.m_colorBuffer.data=this.ReallocateBuffer4(this.m_colorBuffer,this.m_internalAllocatedCapacity,t,!0),this.m_groupBuffer=this.ReallocateBuffer5(this.m_groupBuffer,0,this.m_internalAllocatedCapacity,t,!1),this.m_userDataBuffer.data=this.ReallocateBuffer4(this.m_userDataBuffer,this.m_internalAllocatedCapacity,t,!0),this.m_expirationTimeBuffer.data=this.ReallocateBuffer4(this.m_expirationTimeBuffer,this.m_internalAllocatedCapacity,t,!0),this.m_indexByExpirationTimeBuffer.data=this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer,this.m_internalAllocatedCapacity,t,!1),this.m_internalAllocatedCapacity=t}}CreateParticleForGroup(t,e,i){const o=new h.b2ParticleDef;o.flags=s.b2Maybe(t.flags,0),n.b2Transform.MulXV(e,i,o.position),n.b2Vec2.AddVV(s.b2Maybe(t.linearVelocity,n.b2Vec2.ZERO),n.b2Vec2.CrossSV(s.b2Maybe(t.angularVelocity,0),n.b2Vec2.SubVV(o.position,s.b2Maybe(t.position,n.b2Vec2.ZERO),n.b2Vec2.s_t0),n.b2Vec2.s_t0),o.velocity),o.color.Copy(s.b2Maybe(t.color,r.b2Color.ZERO)),o.lifetime=s.b2Maybe(t.lifetime,0),o.userData=t.userData,this.CreateParticle(o)}CreateParticlesStrokeShapeForGroup(t,e,i){const o=I.CreateParticlesStrokeShapeForGroup_s_edge,r=I.CreateParticlesStrokeShapeForGroup_s_d,a=I.CreateParticlesStrokeShapeForGroup_s_p;let m=s.b2Maybe(e.stride,0);0===m&&(m=this.GetParticleStride());let c=0;const _=t.GetChildCount();for(let s=0;s<_;s++){let _=null;t.GetType()===l.b2ShapeType.e_edgeShape?_=t:(_=o,t.GetChildEdge(_,s));const h=n.b2Vec2.SubVV(_.m_vertex2,_.m_vertex1,r),u=h.Length();for(;c<u;){const t=n.b2Vec2.AddVMulSV(_.m_vertex1,c/u,h,a);this.CreateParticleForGroup(e,i,t),c+=m}c-=u}}CreateParticlesFillShapeForGroup(t,e,i){const o=I.CreateParticlesFillShapeForGroup_s_aabb,r=I.CreateParticlesFillShapeForGroup_s_p;let a=s.b2Maybe(e.stride,0);0===a&&(a=this.GetParticleStride());const l=n.b2Transform.IDENTITY,m=o;t.ComputeAABB(m,l,0);for(let s=Math.floor(m.lowerBound.y/a)*a;s<m.upperBound.y;s+=a)for(let o=Math.floor(m.lowerBound.x/a)*a;o<m.upperBound.x;o+=a){const n=r.Set(o,s);t.TestPoint(l,n)&&this.CreateParticleForGroup(e,i,n)}}CreateParticlesWithShapeForGroup(t,e,i){switch(t.GetType()){case l.b2ShapeType.e_edgeShape:case l.b2ShapeType.e_chainShape:this.CreateParticlesStrokeShapeForGroup(t,e,i);break;case l.b2ShapeType.e_polygonShape:case l.b2ShapeType.e_circleShape:this.CreateParticlesFillShapeForGroup(t,e,i)}}CreateParticlesWithShapesForGroup(t,e,i,s){const o=new I.CompositeShape(t,e);this.CreateParticlesFillShapeForGroup(o,i,s)}CloneParticle(t,e){const i=new h.b2ParticleDef;if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;i.flags=this.m_flagsBuffer.data[t],i.position.Copy(this.m_positionBuffer.data[t]),i.velocity.Copy(this.m_velocityBuffer.data[t]),this.m_colorBuffer.data&&i.color.Copy(this.m_colorBuffer.data[t]),this.m_userDataBuffer.data&&(i.userData=this.m_userDataBuffer.data[t]),i.group=e;const s=this.CreateParticle(i);if(this.m_handleIndexBuffer.data){const e=this.m_handleIndexBuffer.data[t];e&&e.SetIndex(s),this.m_handleIndexBuffer.data[s]=e,this.m_handleIndexBuffer.data[t]=null}return this.m_lastBodyContactStepBuffer.data&&(this.m_lastBodyContactStepBuffer.data[s]=this.m_lastBodyContactStepBuffer.data[t]),this.m_bodyContactCountBuffer.data&&(this.m_bodyContactCountBuffer.data[s]=this.m_bodyContactCountBuffer.data[t]),this.m_consecutiveContactStepsBuffer.data&&(this.m_consecutiveContactStepsBuffer.data[s]=this.m_consecutiveContactStepsBuffer.data[t]),this.m_hasForce&&this.m_forceBuffer[s].Copy(this.m_forceBuffer[t]),this.m_staticPressureBuffer&&(this.m_staticPressureBuffer[s]=this.m_staticPressureBuffer[t]),this.m_depthBuffer&&(this.m_depthBuffer[s]=this.m_depthBuffer[t]),this.m_expirationTimeBuffer.data&&(this.m_expirationTimeBuffer.data[s]=this.m_expirationTimeBuffer.data[t]),s}DestroyParticlesInGroup(t,e=!1){for(let i=t.m_firstIndex;i<t.m_lastIndex;i++)this.DestroyParticle(i,e)}DestroyParticleGroup(t){this.m_world.m_destructionListener&&this.m_world.m_destructionListener.SayGoodbyeParticleGroup(t),this.SetGroupFlags(t,0);for(let e=t.m_firstIndex;e<t.m_lastIndex;e++)this.m_groupBuffer[e]=null;t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t===this.m_groupList&&(this.m_groupList=t.m_next),--this.m_groupCount}static ParticleCanBeConnected(t,e){return 0!=(t&(h.b2ParticleFlag.b2_wallParticle|h.b2ParticleFlag.b2_springParticle|h.b2ParticleFlag.b2_elasticParticle))||null!==e&&0!=(e.GetGroupFlags()&u.b2ParticleGroupFlag.b2_rigidParticleGroup)}UpdatePairsAndTriads(t,e,i){const o=I.UpdatePairsAndTriads_s_dab,r=I.UpdatePairsAndTriads_s_dbc,a=I.UpdatePairsAndTriads_s_dca;if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const l=this.m_positionBuffer.data;let m=0;for(let i=t;i<e;i++)m|=this.m_flagsBuffer.data[i];if(m&I.k_pairFlags)for(let s=0;s<this.m_contactBuffer.count;s++){const o=this.m_contactBuffer.data[s],r=o.indexA,a=o.indexB,m=this.m_flagsBuffer.data[r],c=this.m_flagsBuffer.data[a],_=this.m_groupBuffer[r],u=this.m_groupBuffer[a];if(r>=t&&r<e&&a>=t&&a<e&&!((m|c)&h.b2ParticleFlag.b2_zombieParticle)&&(m|c)&I.k_pairFlags&&(i.IsNecessary(r)||i.IsNecessary(a))&&I.ParticleCanBeConnected(m,_)&&I.ParticleCanBeConnected(c,u)&&i.ShouldCreatePair(r,a)){const t=this.m_pairBuffer.data[this.m_pairBuffer.Append()];t.indexA=r,t.indexB=a,t.flags=o.flags,t.strength=n.b2Min(_?_.m_strength:1,u?u.m_strength:1),t.distance=n.b2Vec2.DistanceVV(l[r],l[a])}y(this.m_pairBuffer.data,0,this.m_pairBuffer.count,I.ComparePairIndices),this.m_pairBuffer.Unique(I.MatchPairIndices)}if(m&I.k_triadFlags){const m=new d.b2VoronoiDiagram(e-t);for(let s=t;s<e;s++){const t=this.m_flagsBuffer.data[s],e=this.m_groupBuffer[s];t&h.b2ParticleFlag.b2_zombieParticle||!I.ParticleCanBeConnected(t,e)||m.AddGenerator(l[s],s,i.IsNecessary(s))}const c=this.GetParticleStride();m.Generate(c/2,2*c);const _=this,u=(t,e,m)=>{if(!_.m_flagsBuffer.data)throw new Error;const c=_.m_flagsBuffer.data[t],h=_.m_flagsBuffer.data[e],u=_.m_flagsBuffer.data[m];if((c|h|u)&I.k_triadFlags&&i.ShouldCreateTriad(t,e,m)){const i=l[t],d=l[e],b=l[m],p=n.b2Vec2.SubVV(i,d,o),f=n.b2Vec2.SubVV(d,b,r),y=n.b2Vec2.SubVV(b,i,a),V=s.b2_maxTriadDistanceSquared*_.m_squaredDiameter;if(n.b2Vec2.DotVV(p,p)>V||n.b2Vec2.DotVV(f,f)>V||n.b2Vec2.DotVV(y,y)>V)return;const x=_.m_groupBuffer[t],S=_.m_groupBuffer[e],B=_.m_groupBuffer[m],C=_.m_triadBuffer.data[_.m_triadBuffer.Append()];C.indexA=t,C.indexB=e,C.indexC=m,C.flags=c|h|u,C.strength=n.b2Min(n.b2Min(x?x.m_strength:1,S?S.m_strength:1),B?B.m_strength:1);const A=(i.x+d.x+b.x)/3,w=(i.y+d.y+b.y)/3;C.pa.x=i.x-A,C.pa.y=i.y-w,C.pb.x=d.x-A,C.pb.y=d.y-w,C.pc.x=b.x-A,C.pc.y=b.y-w,C.ka=-n.b2Vec2.DotVV(y,p),C.kb=-n.b2Vec2.DotVV(p,f),C.kc=-n.b2Vec2.DotVV(f,y),C.s=n.b2Vec2.CrossVV(i,d)+n.b2Vec2.CrossVV(d,b)+n.b2Vec2.CrossVV(b,i)}};m.GetNodes(u),y(this.m_triadBuffer.data,0,this.m_triadBuffer.count,I.CompareTriadIndices),this.m_triadBuffer.Unique(I.MatchTriadIndices)}}UpdatePairsAndTriadsWithReactiveParticles(){const t=new I.ReactiveFilter(this.m_flagsBuffer);if(this.UpdatePairsAndTriads(0,this.m_count,t),!this.m_flagsBuffer.data)throw new Error;for(let t=0;t<this.m_count;t++)this.m_flagsBuffer.data[t]&=~h.b2ParticleFlag.b2_reactiveParticle;this.m_allParticleFlags&=~h.b2ParticleFlag.b2_reactiveParticle}static ComparePairIndices(t,e){const i=t.indexA-e.indexA;return 0!==i?i<0:t.indexB<e.indexB}static MatchPairIndices(t,e){return t.indexA===e.indexA&&t.indexB===e.indexB}static CompareTriadIndices(t,e){const i=t.indexA-e.indexA;if(0!==i)return i<0;const s=t.indexB-e.indexB;return 0!==s?s<0:t.indexC<e.indexC}static MatchTriadIndices(t,e){return t.indexA===e.indexA&&t.indexB===e.indexB&&t.indexC===e.indexC}static InitializeParticleLists(t,e){const i=t.GetBufferIndex(),s=t.GetParticleCount();for(let t=0;t<s;t++){const s=e[t];s.list=s,s.next=null,s.count=1,s.index=t+i}}MergeParticleListsInContact(t,e){const i=t.GetBufferIndex();for(let s=0;s<this.m_contactBuffer.count;s++){const o=this.m_contactBuffer.data[s],n=o.indexA,r=o.indexB;if(!t.ContainsParticle(n)||!t.ContainsParticle(r))continue;let a=e[n-i].list,l=e[r-i].list;if(a!==l){if(a.count<l.count){const t=a;a=l,l=t}I.MergeParticleLists(a,l)}}}static MergeParticleLists(t,e){for(let i=e;;){i.list=t;const e=i.next;if(!e){i.next=t.next;break}i=e}t.next=e,t.count+=e.count,e.count=0}static FindLongestParticleList(t,e){const i=t.GetParticleCount();let s=e[0];for(let t=0;t<i;t++){const i=e[t];s.count<i.count&&(s=i)}return s}MergeZombieParticleListNodes(t,e,i){if(!this.m_flagsBuffer.data)throw new Error;const s=t.GetParticleCount();for(let t=0;t<s;t++){const s=e[t];s!==i&&this.m_flagsBuffer.data[s.index]&h.b2ParticleFlag.b2_zombieParticle&&I.MergeParticleListAndNode(i,s)}}static MergeParticleListAndNode(t,e){e.list=t,e.next=t.next,t.next=e,t.count++,e.count=0}CreateParticleGroupsFromParticleList(t,e,i){if(!this.m_flagsBuffer.data)throw new Error;const s=t.GetParticleCount(),o=new u.b2ParticleGroupDef;o.groupFlags=t.GetGroupFlags(),o.userData=t.GetUserData();for(let t=0;t<s;t++){const s=e[t];if(!s.count||s===i)continue;const n=this.CreateParticleGroup(o);for(let t=s;t;t=t.next){const e=t.index,i=this.CloneParticle(e,n);this.m_flagsBuffer.data[e]|=h.b2ParticleFlag.b2_zombieParticle,t.index=i}}}UpdatePairsAndTriadsWithParticleList(t,e){const i=t.GetBufferIndex();for(let s=0;s<this.m_pairBuffer.count;s++){const o=this.m_pairBuffer.data[s],n=o.indexA,r=o.indexB;t.ContainsParticle(n)&&(o.indexA=e[n-i].index),t.ContainsParticle(r)&&(o.indexB=e[r-i].index)}for(let s=0;s<this.m_triadBuffer.count;s++){const o=this.m_triadBuffer.data[s],n=o.indexA,r=o.indexB,a=o.indexC;t.ContainsParticle(n)&&(o.indexA=e[n-i].index),t.ContainsParticle(r)&&(o.indexB=e[r-i].index),t.ContainsParticle(a)&&(o.indexC=e[a-i].index)}}ComputeDepth(){const t=[];let e=0;for(let i=0;i<this.m_contactBuffer.count;i++){const s=this.m_contactBuffer.data[i],o=s.indexA,n=s.indexB,r=this.m_groupBuffer[o],a=this.m_groupBuffer[n];r&&r===a&&r.m_groupFlags&u.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth&&(t[e++]=s)}const i=[];let o=0;for(let t=this.m_groupList;t;t=t.GetNext())if(t.m_groupFlags&u.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth){i[o++]=t,this.SetGroupFlags(t,t.m_groupFlags&~u.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);for(let e=t.m_firstIndex;e<t.m_lastIndex;e++)this.m_accumulationBuffer[e]=0}for(let i=0;i<e;i++){const e=t[i],s=e.indexA,o=e.indexB,n=e.weight;this.m_accumulationBuffer[s]+=n,this.m_accumulationBuffer[o]+=n}for(let t=0;t<o;t++){const e=i[t];for(let t=e.m_firstIndex;t<e.m_lastIndex;t++){const e=this.m_accumulationBuffer[t];this.m_depthBuffer[t]=e<.8?0:s.b2_maxFloat}}const r=n.b2Sqrt(this.m_count)>>0;for(let i=0;i<r;i++){let i=!1;for(let s=0;s<e;s++){const e=t[s],o=e.indexA,n=e.indexB,r=1-e.weight,a=this.m_depthBuffer[o],l=this.m_depthBuffer[n],m=l+r,c=a+r;a>m&&(this.m_depthBuffer[o]=m,i=!0),l>c&&(this.m_depthBuffer[n]=c,i=!0)}if(!i)break}for(let t=0;t<o;t++){const e=i[t];for(let t=e.m_firstIndex;t<e.m_lastIndex;t++)this.m_depthBuffer[t]<s.b2_maxFloat?this.m_depthBuffer[t]*=this.m_particleDiameter:this.m_depthBuffer[t]=0}}GetInsideBoundsEnumerator(t){const e=I.computeTag(this.m_inverseDiameter*t.lowerBound.x-1,this.m_inverseDiameter*t.lowerBound.y-1),i=I.computeTag(this.m_inverseDiameter*t.upperBound.x+1,this.m_inverseDiameter*t.upperBound.y+1),s=this.m_proxyBuffer.count,o=x(this.m_proxyBuffer.data,0,s,e,I.Proxy.CompareProxyTag),n=S(this.m_proxyBuffer.data,0,s,i,I.Proxy.CompareTagProxy);return new I.InsideBoundsEnumerator(this,e,i,o,n)}UpdateAllParticleFlags(){if(!this.m_flagsBuffer.data)throw new Error;this.m_allParticleFlags=0;for(let t=0;t<this.m_count;t++)this.m_allParticleFlags|=this.m_flagsBuffer.data[t];this.m_needsUpdateAllParticleFlags=!1}UpdateAllGroupFlags(){this.m_allGroupFlags=0;for(let t=this.m_groupList;t;t=t.GetNext())this.m_allGroupFlags|=t.m_groupFlags;this.m_needsUpdateAllGroupFlags=!1}AddContact(t,e,i){if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;const s=I.AddContact_s_d,o=this.m_positionBuffer.data,r=n.b2Vec2.SubVV(o[e],o[t],s),a=n.b2Vec2.DotVV(r,r);if(a<this.m_squaredDiameter){let i=n.b2InvSqrt(a);isFinite(i)||(i=198177537e11);const s=this.m_contactBuffer.data[this.m_contactBuffer.Append()];s.indexA=t,s.indexB=e,s.flags=this.m_flagsBuffer.data[t]|this.m_flagsBuffer.data[e],s.weight=1-a*i*this.m_inverseDiameter,n.b2Vec2.MulSV(i,r,s.normal)}}FindContacts_Reference(t){const e=this.m_proxyBuffer.count;this.m_contactBuffer.count=0;for(let t=0,i=0;t<e;t++){const s=I.computeRelativeTag(this.m_proxyBuffer.data[t].tag,1,0);for(let i=t+1;i<e&&!(s<this.m_proxyBuffer.data[i].tag);i++)this.AddContact(this.m_proxyBuffer.data[t].index,this.m_proxyBuffer.data[i].index,this.m_contactBuffer);const o=I.computeRelativeTag(this.m_proxyBuffer.data[t].tag,-1,1);for(;i<e&&!(o<=this.m_proxyBuffer.data[i].tag);i++);const n=I.computeRelativeTag(this.m_proxyBuffer.data[t].tag,1,1);for(let s=i;s<e&&!(n<this.m_proxyBuffer.data[s].tag);s++)this.AddContact(this.m_proxyBuffer.data[t].index,this.m_proxyBuffer.data[s].index,this.m_contactBuffer)}}FindContacts(t){this.FindContacts_Reference(t)}UpdateProxies_Reference(t){if(!this.m_positionBuffer.data)throw new Error;const e=this.m_positionBuffer.data,i=this.m_inverseDiameter;for(let t=0;t<this.m_proxyBuffer.count;++t){const s=this.m_proxyBuffer.data[t],o=e[s.index];s.tag=I.computeTag(i*o.x,i*o.y)}}UpdateProxies(t){this.UpdateProxies_Reference(t)}SortProxies(t){f(this.m_proxyBuffer.data,0,this.m_proxyBuffer.count,I.Proxy.CompareProxyProxy)}FilterContacts(t){const e=this.GetParticleContactFilter();if(null===e)return;const i=this;this.m_contactBuffer.RemoveIf(t=>0!=(t.flags&h.b2ParticleFlag.b2_particleContactFilterParticle)&&!e.ShouldCollideParticleParticle(i,t.indexA,t.indexB))}NotifyContactListenerPreContact(t){if(null!==this.GetParticleContactListener())throw t.Initialize(this.m_contactBuffer,this.m_flagsBuffer),new Error}NotifyContactListenerPostContact(t){const e=this.GetParticleContactListener();if(null!==e){for(let i=0;i<this.m_contactBuffer.count;++i){const s=this.m_contactBuffer.data[i],o=-1;o>=0?t.Invalidate(o):e.BeginContactParticleParticle(this,s)}throw new Error}}static b2ParticleContactIsZombie(t){return(t.flags&h.b2ParticleFlag.b2_zombieParticle)===h.b2ParticleFlag.b2_zombieParticle}UpdateContacts(t){this.UpdateProxies(this.m_proxyBuffer),this.SortProxies(this.m_proxyBuffer);const e=new I.b2ParticlePairSet;this.NotifyContactListenerPreContact(e),this.FindContacts(this.m_contactBuffer),this.FilterContacts(this.m_contactBuffer),this.NotifyContactListenerPostContact(e),t&&this.m_contactBuffer.RemoveIf(I.b2ParticleContactIsZombie)}NotifyBodyContactListenerPreContact(t){if(null!==this.GetFixtureContactListener())throw t.Initialize(this.m_bodyContactBuffer,this.m_flagsBuffer),new Error}NotifyBodyContactListenerPostContact(t){const e=this.GetFixtureContactListener();if(null!==e){for(let i=0;i<this.m_bodyContactBuffer.count;i++){const s=this.m_bodyContactBuffer.data[i],o=-1;o>=0?t.Invalidate(o):e.BeginContactFixtureParticle(this,s)}throw new Error}}UpdateBodyContacts(){const t=I.UpdateBodyContacts_s_aabb,e=new I.FixtureParticleSet;if(this.NotifyBodyContactListenerPreContact(e),this.m_stuckThreshold>0){if(!this.m_bodyContactCountBuffer.data)throw new Error;if(!this.m_lastBodyContactStepBuffer.data)throw new Error;if(!this.m_consecutiveContactStepsBuffer.data)throw new Error;const t=this.GetParticleCount();for(let e=0;e<t;e++)this.m_bodyContactCountBuffer.data[e]=0,this.m_timestamp>this.m_lastBodyContactStepBuffer.data[e]+1&&(this.m_consecutiveContactStepsBuffer.data[e]=0)}this.m_bodyContactBuffer.SetCount(0),this.m_stuckParticleBuffer.SetCount(0);const i=t;this.ComputeAABB(i);const s=new I.UpdateBodyContactsCallback(this,this.GetFixtureContactFilter());this.m_world.QueryAABB(s,i),this.m_def.strictContactCheck&&this.RemoveSpuriousBodyContacts(),this.NotifyBodyContactListenerPostContact(e)}Solve(t){const e=I.Solve_s_subStep;if(0!==this.m_count&&(this.m_expirationTimeBuffer.data&&this.SolveLifetimes(t),this.m_allParticleFlags&h.b2ParticleFlag.b2_zombieParticle&&this.SolveZombie(),this.m_needsUpdateAllParticleFlags&&this.UpdateAllParticleFlags(),this.m_needsUpdateAllGroupFlags&&this.UpdateAllGroupFlags(),!this.m_paused))for(this.m_iterationIndex=0;this.m_iterationIndex<t.particleIterations;this.m_iterationIndex++){++this.m_timestamp;const i=e.Copy(t);if(i.dt/=t.particleIterations,i.inv_dt*=t.particleIterations,this.UpdateContacts(!1),this.UpdateBodyContacts(),this.ComputeWeight(),this.m_allGroupFlags&u.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth&&this.ComputeDepth(),this.m_allParticleFlags&h.b2ParticleFlag.b2_reactiveParticle&&this.UpdatePairsAndTriadsWithReactiveParticles(),this.m_hasForce&&this.SolveForce(i),this.m_allParticleFlags&h.b2ParticleFlag.b2_viscousParticle&&this.SolveViscous(),this.m_allParticleFlags&h.b2ParticleFlag.b2_repulsiveParticle&&this.SolveRepulsive(i),this.m_allParticleFlags&h.b2ParticleFlag.b2_powderParticle&&this.SolvePowder(i),this.m_allParticleFlags&h.b2ParticleFlag.b2_tensileParticle&&this.SolveTensile(i),this.m_allGroupFlags&u.b2ParticleGroupFlag.b2_solidParticleGroup&&this.SolveSolid(i),this.m_allParticleFlags&h.b2ParticleFlag.b2_colorMixingParticle&&this.SolveColorMixing(),this.SolveGravity(i),this.m_allParticleFlags&h.b2ParticleFlag.b2_staticPressureParticle&&this.SolveStaticPressure(i),this.SolvePressure(i),this.SolveDamping(i),this.m_allParticleFlags&I.k_extraDampingFlags&&this.SolveExtraDamping(),this.m_allParticleFlags&h.b2ParticleFlag.b2_elasticParticle&&this.SolveElastic(i),this.m_allParticleFlags&h.b2ParticleFlag.b2_springParticle&&this.SolveSpring(i),this.LimitVelocity(i),this.m_allGroupFlags&u.b2ParticleGroupFlag.b2_rigidParticleGroup&&this.SolveRigidDamping(),this.m_allParticleFlags&h.b2ParticleFlag.b2_barrierParticle&&this.SolveBarrier(i),this.SolveCollision(i),this.m_allGroupFlags&u.b2ParticleGroupFlag.b2_rigidParticleGroup&&this.SolveRigid(i),this.m_allParticleFlags&h.b2ParticleFlag.b2_wallParticle&&this.SolveWall(),!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;for(let t=0;t<this.m_count;t++)this.m_positionBuffer.data[t].SelfMulAdd(i.dt,this.m_velocityBuffer.data[t])}}SolveCollision(t){const e=I.SolveCollision_s_aabb;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const i=this.m_positionBuffer.data,o=this.m_velocityBuffer.data,r=e;r.lowerBound.x=+s.b2_maxFloat,r.lowerBound.y=+s.b2_maxFloat,r.upperBound.x=-s.b2_maxFloat,r.upperBound.y=-s.b2_maxFloat;for(let e=0;e<this.m_count;e++){const s=o[e],a=i[e],l=a.x+t.dt*s.x,m=a.y+t.dt*s.y;r.lowerBound.x=n.b2Min(r.lowerBound.x,n.b2Min(a.x,l)),r.lowerBound.y=n.b2Min(r.lowerBound.y,n.b2Min(a.y,m)),r.upperBound.x=n.b2Max(r.upperBound.x,n.b2Max(a.x,l)),r.upperBound.y=n.b2Max(r.upperBound.y,n.b2Max(a.y,m))}const a=new I.SolveCollisionCallback(this,t);this.m_world.QueryAABB(a,r)}LimitVelocity(t){if(!this.m_velocityBuffer.data)throw new Error;const e=this.m_velocityBuffer.data,i=this.GetCriticalVelocitySquared(t);for(let t=0;t<this.m_count;t++){const s=e[t],o=n.b2Vec2.DotVV(s,s);o>i&&s.SelfMul(n.b2Sqrt(i/o))}}SolveGravity(t){if(!this.m_velocityBuffer.data)throw new Error;const e=I.SolveGravity_s_gravity,i=this.m_velocityBuffer.data,s=n.b2Vec2.MulSV(t.dt*this.m_def.gravityScale,this.m_world.GetGravity(),e);for(let t=0;t<this.m_count;t++)i[t].SelfAdd(s)}SolveBarrier(t){const e=I.SolveBarrier_s_aabb,i=I.SolveBarrier_s_va,o=I.SolveBarrier_s_vb,r=I.SolveBarrier_s_pba,a=I.SolveBarrier_s_vba,l=I.SolveBarrier_s_vc,m=I.SolveBarrier_s_pca,c=I.SolveBarrier_s_vca,_=I.SolveBarrier_s_qba,u=I.SolveBarrier_s_qca,d=I.SolveBarrier_s_dv,b=I.SolveBarrier_s_f;if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const p=this.m_positionBuffer.data,f=this.m_velocityBuffer.data;for(let t=0;t<this.m_count;t++){0!=(this.m_flagsBuffer.data[t]&I.k_barrierWallFlags)&&f[t].SetZero()}const y=s.b2_barrierCollisionTime*t.dt,V=this.GetParticleMass();for(let s=0;s<this.m_pairBuffer.count;s++){const x=this.m_pairBuffer.data[s];if(x.flags&h.b2ParticleFlag.b2_barrierParticle){const s=x.indexA,h=x.indexB,S=p[s],B=p[h],C=e;n.b2Vec2.MinV(S,B,C.lowerBound),n.b2Vec2.MaxV(S,B,C.upperBound);const A=this.m_groupBuffer[s],w=this.m_groupBuffer[h],g=this.GetLinearVelocity(A,s,S,i),v=this.GetLinearVelocity(w,h,B,o),M=n.b2Vec2.SubVV(B,S,r),P=n.b2Vec2.SubVV(v,g,a),I=this.GetInsideBoundsEnumerator(C);let D;for(;(D=I.GetNext())>=0;){const e=p[D],i=this.m_groupBuffer[D];if(A!==i&&w!==i){const s=this.GetLinearVelocity(i,D,e,l),o=n.b2Vec2.SubVV(e,S,m),r=n.b2Vec2.SubVV(s,g,c),a=n.b2Vec2.CrossVV(P,r),h=n.b2Vec2.CrossVV(M,r)-n.b2Vec2.CrossVV(o,P),p=n.b2Vec2.CrossVV(M,o);let x,B;const C=_,A=u;if(0===a){if(0===h)continue;if(!((B=-p/h)>=0&&B<y))continue;if(n.b2Vec2.AddVMulSV(M,B,P,C),n.b2Vec2.AddVMulSV(o,B,r,A),!((x=n.b2Vec2.DotVV(C,A)/n.b2Vec2.DotVV(C,C))>=0&&x<=1))continue}else{const t=h*h-4*p*a;if(t<0)continue;const e=n.b2Sqrt(t);let i=(-h-e)/(2*a),s=(-h+e)/(2*a);if(i>s){const t=i;i=s,s=t}if(B=i,n.b2Vec2.AddVMulSV(M,B,P,C),n.b2Vec2.AddVMulSV(o,B,r,A),x=n.b2Vec2.DotVV(C,A)/n.b2Vec2.DotVV(C,C),!(B>=0&&B<y&&x>=0&&x<=1)){if(!((B=s)>=0&&B<y))continue;if(n.b2Vec2.AddVMulSV(M,B,P,C),n.b2Vec2.AddVMulSV(o,B,r,A),!((x=n.b2Vec2.DotVV(C,A)/n.b2Vec2.DotVV(C,C))>=0&&x<=1))continue}}const w=d;w.x=g.x+x*P.x-s.x,w.y=g.y+x*P.y-s.y;const v=n.b2Vec2.MulSV(V,w,b);if(i&&this.IsRigidGroup(i)){const t=i.GetMass(),s=i.GetInertia();t>0&&i.m_linearVelocity.SelfMulAdd(1/t,v),s>0&&(i.m_angularVelocity+=n.b2Vec2.CrossVV(n.b2Vec2.SubVV(e,i.GetCenter(),n.b2Vec2.s_t0),v)/s)}else f[D].SelfAdd(w);this.ParticleApplyForce(D,v.SelfMul(-t.inv_dt))}}}}}SolveStaticPressure(t){if(!this.m_flagsBuffer.data)throw new Error;this.m_staticPressureBuffer=this.RequestBuffer(this.m_staticPressureBuffer);const e=this.GetCriticalPressure(t),i=this.m_def.staticPressureStrength*e,s=o.b2_maxParticlePressure*e,r=this.m_def.staticPressureRelaxation;for(let t=0;t<this.m_def.staticPressureIterations;t++){for(let t=0;t<this.m_count;t++)this.m_accumulationBuffer[t]=0;for(let t=0;t<this.m_contactBuffer.count;t++){const e=this.m_contactBuffer.data[t];if(e.flags&h.b2ParticleFlag.b2_staticPressureParticle){const t=e.indexA,i=e.indexB,s=e.weight;this.m_accumulationBuffer[t]+=s*this.m_staticPressureBuffer[i],this.m_accumulationBuffer[i]+=s*this.m_staticPressureBuffer[t]}}for(let t=0;t<this.m_count;t++){const e=this.m_weightBuffer[t];if(this.m_flagsBuffer.data[t]&h.b2ParticleFlag.b2_staticPressureParticle){const a=(this.m_accumulationBuffer[t]+i*(e-o.b2_minParticleWeight))/(e+r);this.m_staticPressureBuffer[t]=n.b2Clamp(a,0,s)}else this.m_staticPressureBuffer[t]=0}}}ComputeWeight(){for(let t=0;t<this.m_count;t++)this.m_weightBuffer[t]=0;for(let t=0;t<this.m_bodyContactBuffer.count;t++){const e=this.m_bodyContactBuffer.data[t],i=e.index,s=e.weight;this.m_weightBuffer[i]+=s}for(let t=0;t<this.m_contactBuffer.count;t++){const e=this.m_contactBuffer.data[t],i=e.indexA,s=e.indexB,o=e.weight;this.m_weightBuffer[i]+=o,this.m_weightBuffer[s]+=o}}SolvePressure(t){const e=I.SolvePressure_s_f;if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const i=this.m_positionBuffer.data,s=this.m_velocityBuffer.data,r=this.GetCriticalPressure(t),a=this.m_def.pressureStrength*r,l=o.b2_maxParticlePressure*r;for(let t=0;t<this.m_count;t++){const e=this.m_weightBuffer[t],i=a*n.b2Max(0,e-o.b2_minParticleWeight);this.m_accumulationBuffer[t]=n.b2Min(i,l)}if(this.m_allParticleFlags&I.k_noPressureFlags)for(let t=0;t<this.m_count;t++)this.m_flagsBuffer.data[t]&I.k_noPressureFlags&&(this.m_accumulationBuffer[t]=0);if(this.m_allParticleFlags&h.b2ParticleFlag.b2_staticPressureParticle)for(let t=0;t<this.m_count;t++)this.m_flagsBuffer.data[t]&h.b2ParticleFlag.b2_staticPressureParticle&&(this.m_accumulationBuffer[t]+=this.m_staticPressureBuffer[t]);const m=t.dt/(this.m_def.density*this.m_particleDiameter),c=this.GetParticleInvMass();for(let t=0;t<this.m_bodyContactBuffer.count;t++){const o=this.m_bodyContactBuffer.data[t],r=o.index,l=o.body,_=o.weight,h=o.mass,u=o.normal,d=i[r],b=this.m_accumulationBuffer[r]+a*_,p=n.b2Vec2.MulSV(m*_*h*b,u,e);s[r].SelfMulSub(c,p),l.ApplyLinearImpulse(p,d,!0)}for(let t=0;t<this.m_contactBuffer.count;t++){const i=this.m_contactBuffer.data[t],o=i.indexA,r=i.indexB,a=i.weight,l=i.normal,c=this.m_accumulationBuffer[o]+this.m_accumulationBuffer[r],_=n.b2Vec2.MulSV(m*a*c,l,e);s[o].SelfSub(_),s[r].SelfAdd(_)}}SolveDamping(t){const e=I.SolveDamping_s_v,i=I.SolveDamping_s_f;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const s=this.m_positionBuffer.data,o=this.m_velocityBuffer.data,r=this.m_def.dampingStrength,a=1/this.GetCriticalVelocity(t),l=this.GetParticleInvMass();for(let t=0;t<this.m_bodyContactBuffer.count;t++){const m=this.m_bodyContactBuffer.data[t],c=m.index,_=m.body,h=m.weight,u=m.mass,d=m.normal,b=s[c],p=n.b2Vec2.SubVV(_.GetLinearVelocityFromWorldPoint(b,n.b2Vec2.s_t0),o[c],e),f=n.b2Vec2.DotVV(p,d);if(f<0){const t=n.b2Max(r*h,n.b2Min(-a*f,.5)),e=n.b2Vec2.MulSV(t*u*f,d,i);o[c].SelfMulAdd(l,e),_.ApplyLinearImpulse(e.SelfNeg(),b,!0)}}for(let t=0;t<this.m_contactBuffer.count;t++){const s=this.m_contactBuffer.data[t],l=s.indexA,m=s.indexB,c=s.weight,_=s.normal,h=n.b2Vec2.SubVV(o[m],o[l],e),u=n.b2Vec2.DotVV(h,_);if(u<0){const t=n.b2Max(r*c,n.b2Min(-a*u,.5)),e=n.b2Vec2.MulSV(t*u,_,i);o[l].SelfAdd(e),o[m].SelfSub(e)}}}SolveRigidDamping(){const t=I.SolveRigidDamping_s_t0,e=I.SolveRigidDamping_s_t1,i=I.SolveRigidDamping_s_p,s=I.SolveRigidDamping_s_v,o=[0],r=[0],a=[0],l=[0],m=[0],c=[0];if(!this.m_positionBuffer.data)throw new Error;const _=this.m_positionBuffer.data,h=this.m_def.dampingStrength;for(let i=0;i<this.m_bodyContactBuffer.count;i++){const u=this.m_bodyContactBuffer.data[i],d=u.index,b=this.m_groupBuffer[d];if(b&&this.IsRigidGroup(b)){const i=u.body,p=u.normal,f=u.weight,y=_[d],V=n.b2Vec2.SubVV(i.GetLinearVelocityFromWorldPoint(y,t),b.GetLinearVelocityFromWorldPoint(y,e),s),x=n.b2Vec2.DotVV(V,p);if(x<0){this.InitDampingParameterWithRigidGroupOrParticle(o,r,a,!0,b,d,y,p),this.InitDampingParameter(l,m,c,i.GetMass(),i.GetInertia()-i.GetMass()*i.GetLocalCenter().LengthSquared(),i.GetWorldCenter(),y,p);const t=h*n.b2Min(f,1)*this.ComputeDampingImpulse(o[0],r[0],a[0],l[0],m[0],c[0],x);this.ApplyDamping(o[0],r[0],a[0],!0,b,d,t,p),i.ApplyLinearImpulse(n.b2Vec2.MulSV(-t,p,n.b2Vec2.s_t0),y,!0)}}}for(let u=0;u<this.m_contactBuffer.count;u++){const d=this.m_contactBuffer.data[u],b=d.indexA,p=d.indexB,f=d.normal,y=d.weight,V=this.m_groupBuffer[b],x=this.m_groupBuffer[p],S=this.IsRigidGroup(V),B=this.IsRigidGroup(x);if(V!==x&&(S||B)){const u=n.b2Vec2.MidVV(_[b],_[p],i),d=n.b2Vec2.SubVV(this.GetLinearVelocity(x,p,u,t),this.GetLinearVelocity(V,b,u,e),s),C=n.b2Vec2.DotVV(d,f);if(C<0){this.InitDampingParameterWithRigidGroupOrParticle(o,r,a,S,V,b,u,f),this.InitDampingParameterWithRigidGroupOrParticle(l,m,c,B,x,p,u,f);const t=h*y*this.ComputeDampingImpulse(o[0],r[0],a[0],l[0],m[0],c[0],C);this.ApplyDamping(o[0],r[0],a[0],S,V,b,t,f),this.ApplyDamping(l[0],m[0],c[0],B,x,p,-t,f)}}}}SolveExtraDamping(){const t=I.SolveExtraDamping_s_v,e=I.SolveExtraDamping_s_f;if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const i=this.m_velocityBuffer.data,s=this.m_positionBuffer.data,o=this.GetParticleInvMass();for(let r=0;r<this.m_bodyContactBuffer.count;r++){const a=this.m_bodyContactBuffer.data[r],l=a.index;if(this.m_flagsBuffer.data[l]&I.k_extraDampingFlags){const r=a.body,m=a.mass,c=a.normal,_=s[l],h=n.b2Vec2.SubVV(r.GetLinearVelocityFromWorldPoint(_,n.b2Vec2.s_t0),i[l],t),u=n.b2Vec2.DotVV(h,c);if(u<0){const t=n.b2Vec2.MulSV(.5*m*u,c,e);i[l].SelfMulAdd(o,t),r.ApplyLinearImpulse(t.SelfNeg(),_,!0)}}}}SolveWall(){if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const t=this.m_velocityBuffer.data;for(let e=0;e<this.m_count;e++)this.m_flagsBuffer.data[e]&h.b2ParticleFlag.b2_wallParticle&&t[e].SetZero()}SolveRigid(t){const e=I.SolveRigid_s_position,i=I.SolveRigid_s_rotation,s=I.SolveRigid_s_transform,o=I.SolveRigid_s_velocityTransform;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const r=this.m_positionBuffer.data,a=this.m_velocityBuffer.data;for(let l=this.m_groupList;l;l=l.GetNext())if(l.m_groupFlags&u.b2ParticleGroupFlag.b2_rigidParticleGroup){l.UpdateStatistics();const m=i;m.SetAngle(t.dt*l.m_angularVelocity);const c=n.b2Vec2.AddVV(l.m_center,n.b2Vec2.SubVV(n.b2Vec2.MulSV(t.dt,l.m_linearVelocity,n.b2Vec2.s_t0),n.b2Rot.MulRV(m,l.m_center,n.b2Vec2.s_t1),n.b2Vec2.s_t0),e),_=s;_.SetPositionRotation(c,m),n.b2Transform.MulXX(_,l.m_transform,l.m_transform);const h=o;h.p.x=t.inv_dt*_.p.x,h.p.y=t.inv_dt*_.p.y,h.q.s=t.inv_dt*_.q.s,h.q.c=t.inv_dt*(_.q.c-1);for(let t=l.m_firstIndex;t<l.m_lastIndex;t++)n.b2Transform.MulXV(h,r[t],a[t])}}SolveElastic(t){const e=I.SolveElastic_s_pa,i=I.SolveElastic_s_pb,s=I.SolveElastic_s_pc,o=I.SolveElastic_s_r,r=I.SolveElastic_s_t0;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const a=this.m_positionBuffer.data,l=this.m_velocityBuffer.data,m=t.inv_dt*this.m_def.elasticStrength;for(let c=0;c<this.m_triadBuffer.count;c++){const _=this.m_triadBuffer.data[c];if(_.flags&h.b2ParticleFlag.b2_elasticParticle){const c=_.indexA,h=_.indexB,u=_.indexC,d=_.pa,b=_.pb,p=_.pc,f=e.Copy(a[c]),y=i.Copy(a[h]),V=s.Copy(a[u]),x=l[c],S=l[h],B=l[u];f.SelfMulAdd(t.dt,x),y.SelfMulAdd(t.dt,S),V.SelfMulAdd(t.dt,B);const C=(f.x+y.x+V.x)/3,A=(f.y+y.y+V.y)/3;f.x-=C,f.y-=A,y.x-=C,y.y-=A,V.x-=C,V.y-=A;const w=o;w.s=n.b2Vec2.CrossVV(d,f)+n.b2Vec2.CrossVV(b,y)+n.b2Vec2.CrossVV(p,V),w.c=n.b2Vec2.DotVV(d,f)+n.b2Vec2.DotVV(b,y)+n.b2Vec2.DotVV(p,V);const g=w.s*w.s+w.c*w.c;let v=n.b2InvSqrt(g);isFinite(v)||(v=198177537e11),w.s*=v,w.c*=v;const M=m*_.strength;n.b2Rot.MulRV(w,d,r),n.b2Vec2.SubVV(r,f,r),n.b2Vec2.MulSV(M,r,r),x.SelfAdd(r),n.b2Rot.MulRV(w,b,r),n.b2Vec2.SubVV(r,y,r),n.b2Vec2.MulSV(M,r,r),S.SelfAdd(r),n.b2Rot.MulRV(w,p,r),n.b2Vec2.SubVV(r,V,r),n.b2Vec2.MulSV(M,r,r),B.SelfAdd(r)}}}SolveSpring(t){const e=I.SolveSpring_s_pa,i=I.SolveSpring_s_pb,s=I.SolveSpring_s_d,o=I.SolveSpring_s_f;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const r=this.m_positionBuffer.data,a=this.m_velocityBuffer.data,l=t.inv_dt*this.m_def.springStrength;for(let m=0;m<this.m_pairBuffer.count;m++){const c=this.m_pairBuffer.data[m];if(c.flags&h.b2ParticleFlag.b2_springParticle){const m=c.indexA,_=c.indexB,h=e.Copy(r[m]),u=i.Copy(r[_]),d=a[m],b=a[_];h.SelfMulAdd(t.dt,d),u.SelfMulAdd(t.dt,b);const p=n.b2Vec2.SubVV(u,h,s),f=c.distance,y=p.Length(),V=l*c.strength,x=n.b2Vec2.MulSV(V*(f-y)/y,p,o);d.SelfSub(x),b.SelfAdd(x)}}}SolveTensile(t){const e=I.SolveTensile_s_weightedNormal,i=I.SolveTensile_s_s,s=I.SolveTensile_s_f;if(!this.m_velocityBuffer.data)throw new Error;const r=this.m_velocityBuffer.data;for(let t=0;t<this.m_count;t++)this.m_accumulation2Buffer[t]=new n.b2Vec2,this.m_accumulation2Buffer[t].SetZero();for(let t=0;t<this.m_contactBuffer.count;t++){const i=this.m_contactBuffer.data[t];if(i.flags&h.b2ParticleFlag.b2_tensileParticle){const t=i.indexA,s=i.indexB,o=i.weight,r=i.normal,a=n.b2Vec2.MulSV((1-o)*o,r,e);this.m_accumulation2Buffer[t].SelfSub(a),this.m_accumulation2Buffer[s].SelfAdd(a)}}const a=this.GetCriticalVelocity(t),l=this.m_def.surfaceTensionPressureStrength*a,m=this.m_def.surfaceTensionNormalStrength*a,c=o.b2_maxParticleForce*a;for(let t=0;t<this.m_contactBuffer.count;t++){const e=this.m_contactBuffer.data[t];if(e.flags&h.b2ParticleFlag.b2_tensileParticle){const t=e.indexA,o=e.indexB,a=e.weight,_=e.normal,h=this.m_weightBuffer[t]+this.m_weightBuffer[o],u=n.b2Vec2.SubVV(this.m_accumulation2Buffer[o],this.m_accumulation2Buffer[t],i),d=n.b2Min(l*(h-2)+m*n.b2Vec2.DotVV(u,_),c)*a,b=n.b2Vec2.MulSV(d,_,s);r[t].SelfSub(b),r[o].SelfAdd(b)}}}SolveViscous(){const t=I.SolveViscous_s_v,e=I.SolveViscous_s_f;if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const i=this.m_positionBuffer.data,s=this.m_velocityBuffer.data,o=this.m_def.viscousStrength,r=this.GetParticleInvMass();for(let a=0;a<this.m_bodyContactBuffer.count;a++){const l=this.m_bodyContactBuffer.data[a],m=l.index;if(this.m_flagsBuffer.data[m]&h.b2ParticleFlag.b2_viscousParticle){const a=l.body,c=l.weight,_=l.mass,h=i[m],u=n.b2Vec2.SubVV(a.GetLinearVelocityFromWorldPoint(h,n.b2Vec2.s_t0),s[m],t),d=n.b2Vec2.MulSV(o*_*c,u,e);s[m].SelfMulAdd(r,d),a.ApplyLinearImpulse(d.SelfNeg(),h,!0)}}for(let i=0;i<this.m_contactBuffer.count;i++){const r=this.m_contactBuffer.data[i];if(r.flags&h.b2ParticleFlag.b2_viscousParticle){const i=r.indexA,a=r.indexB,l=r.weight,m=n.b2Vec2.SubVV(s[a],s[i],t),c=n.b2Vec2.MulSV(o*l,m,e);s[i].SelfAdd(c),s[a].SelfSub(c)}}}SolveRepulsive(t){const e=I.SolveRepulsive_s_f;if(!this.m_velocityBuffer.data)throw new Error;const i=this.m_velocityBuffer.data,s=this.m_def.repulsiveStrength*this.GetCriticalVelocity(t);for(let t=0;t<this.m_contactBuffer.count;t++){const o=this.m_contactBuffer.data[t];if(o.flags&h.b2ParticleFlag.b2_repulsiveParticle){const t=o.indexA,r=o.indexB;if(this.m_groupBuffer[t]!==this.m_groupBuffer[r]){const a=o.weight,l=o.normal,m=n.b2Vec2.MulSV(s*a,l,e);i[t].SelfSub(m),i[r].SelfAdd(m)}}}}SolvePowder(t){const e=I.SolvePowder_s_f;if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;const i=this.m_positionBuffer.data,s=this.m_velocityBuffer.data,r=this.m_def.powderStrength*this.GetCriticalVelocity(t),a=1-o.b2_particleStride,l=this.GetParticleInvMass();for(let t=0;t<this.m_bodyContactBuffer.count;t++){const o=this.m_bodyContactBuffer.data[t],m=o.index;if(this.m_flagsBuffer.data[m]&h.b2ParticleFlag.b2_powderParticle){const t=o.weight;if(t>a){const c=o.body,_=o.mass,h=i[m],u=o.normal,d=n.b2Vec2.MulSV(r*_*(t-a),u,e);s[m].SelfMulSub(l,d),c.ApplyLinearImpulse(d,h,!0)}}}for(let t=0;t<this.m_contactBuffer.count;t++){const i=this.m_contactBuffer.data[t];if(i.flags&h.b2ParticleFlag.b2_powderParticle){const t=i.weight;if(t>a){const o=i.indexA,l=i.indexB,m=i.normal,c=n.b2Vec2.MulSV(r*(t-a),m,e);s[o].SelfSub(c),s[l].SelfAdd(c)}}}}SolveSolid(t){const e=I.SolveSolid_s_f;if(!this.m_velocityBuffer.data)throw new Error;const i=this.m_velocityBuffer.data;this.m_depthBuffer=this.RequestBuffer(this.m_depthBuffer);const s=t.inv_dt*this.m_def.ejectionStrength;for(let t=0;t<this.m_contactBuffer.count;t++){const o=this.m_contactBuffer.data[t],r=o.indexA,a=o.indexB;if(this.m_groupBuffer[r]!==this.m_groupBuffer[a]){const t=o.weight,l=o.normal,m=this.m_depthBuffer[r]+this.m_depthBuffer[a],c=n.b2Vec2.MulSV(s*m*t,l,e);i[r].SelfSub(c),i[a].SelfAdd(c)}}}SolveForce(t){if(!this.m_velocityBuffer.data)throw new Error;const e=this.m_velocityBuffer.data,i=t.dt*this.GetParticleInvMass();for(let t=0;t<this.m_count;t++)e[t].SelfMulAdd(i,this.m_forceBuffer[t]);this.m_hasForce=!1}SolveColorMixing(){if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_colorBuffer.data)throw new Error;const t=.5*this.m_def.colorMixingStrength;if(t)for(let e=0;e<this.m_contactBuffer.count;e++){const i=this.m_contactBuffer.data[e],s=i.indexA,o=i.indexB;if(this.m_flagsBuffer.data[s]&this.m_flagsBuffer.data[o]&h.b2ParticleFlag.b2_colorMixingParticle){const e=this.m_colorBuffer.data[s],i=this.m_colorBuffer.data[o];r.b2Color.MixColors(e,i,t)}}}SolveZombie(){if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;let t=0;const e=[];for(let t=0;t<this.m_count;t++)e[t]=s.b2_invalidParticleIndex;let i=0;for(let o=0;o<this.m_count;o++){const n=this.m_flagsBuffer.data[o];if(n&h.b2ParticleFlag.b2_zombieParticle){const t=this.m_world.m_destructionListener;if(n&h.b2ParticleFlag.b2_destructionListenerParticle&&t&&t.SayGoodbyeParticle(this,o),this.m_handleIndexBuffer.data){const t=this.m_handleIndexBuffer.data[o];t&&(t.SetIndex(s.b2_invalidParticleIndex),this.m_handleIndexBuffer.data[o]=null)}e[o]=s.b2_invalidParticleIndex}else{if(e[o]=t,o!==t){if(this.m_handleIndexBuffer.data){const e=this.m_handleIndexBuffer.data[o];e&&e.SetIndex(t),this.m_handleIndexBuffer.data[t]=e}this.m_flagsBuffer.data[t]=this.m_flagsBuffer.data[o],this.m_lastBodyContactStepBuffer.data&&(this.m_lastBodyContactStepBuffer.data[t]=this.m_lastBodyContactStepBuffer.data[o]),this.m_bodyContactCountBuffer.data&&(this.m_bodyContactCountBuffer.data[t]=this.m_bodyContactCountBuffer.data[o]),this.m_consecutiveContactStepsBuffer.data&&(this.m_consecutiveContactStepsBuffer.data[t]=this.m_consecutiveContactStepsBuffer.data[o]),this.m_positionBuffer.data[t].Copy(this.m_positionBuffer.data[o]),this.m_velocityBuffer.data[t].Copy(this.m_velocityBuffer.data[o]),this.m_groupBuffer[t]=this.m_groupBuffer[o],this.m_hasForce&&this.m_forceBuffer[t].Copy(this.m_forceBuffer[o]),this.m_staticPressureBuffer&&(this.m_staticPressureBuffer[t]=this.m_staticPressureBuffer[o]),this.m_depthBuffer&&(this.m_depthBuffer[t]=this.m_depthBuffer[o]),this.m_colorBuffer.data&&this.m_colorBuffer.data[t].Copy(this.m_colorBuffer.data[o]),this.m_userDataBuffer.data&&(this.m_userDataBuffer.data[t]=this.m_userDataBuffer.data[o]),this.m_expirationTimeBuffer.data&&(this.m_expirationTimeBuffer.data[t]=this.m_expirationTimeBuffer.data[o])}t++,i|=n}}const o=t=>t.index<0,r=t=>t.indexA<0||t.indexB<0,a=t=>t.index<0,l=t=>t.indexA<0||t.indexB<0,m=t=>t.indexA<0||t.indexB<0||t.indexC<0;for(let t=0;t<this.m_proxyBuffer.count;t++){const i=this.m_proxyBuffer.data[t];i.index=e[i.index]}this.m_proxyBuffer.RemoveIf(o);for(let t=0;t<this.m_contactBuffer.count;t++){const i=this.m_contactBuffer.data[t];i.indexA=e[i.indexA],i.indexB=e[i.indexB]}this.m_contactBuffer.RemoveIf(r);for(let t=0;t<this.m_bodyContactBuffer.count;t++){const i=this.m_bodyContactBuffer.data[t];i.index=e[i.index]}this.m_bodyContactBuffer.RemoveIf(a);for(let t=0;t<this.m_pairBuffer.count;t++){const i=this.m_pairBuffer.data[t];i.indexA=e[i.indexA],i.indexB=e[i.indexB]}this.m_pairBuffer.RemoveIf(l);for(let t=0;t<this.m_triadBuffer.count;t++){const i=this.m_triadBuffer.data[t];i.indexA=e[i.indexA],i.indexB=e[i.indexB],i.indexC=e[i.indexC]}if(this.m_triadBuffer.RemoveIf(m),this.m_indexByExpirationTimeBuffer.data){let t=0;for(let i=0;i<this.m_count;i++){const o=e[this.m_indexByExpirationTimeBuffer.data[i]];o!==s.b2_invalidParticleIndex&&(this.m_indexByExpirationTimeBuffer.data[t++]=o)}}for(let i=this.m_groupList;i;i=i.GetNext()){let s=t,o=0,r=!1;for(let t=i.m_firstIndex;t<i.m_lastIndex;t++){const i=e[t];i>=0?(s=n.b2Min(s,i),o=n.b2Max(o,i+1)):r=!0}s<o?(i.m_firstIndex=s,i.m_lastIndex=o,r&&i.m_groupFlags&u.b2ParticleGroupFlag.b2_solidParticleGroup&&this.SetGroupFlags(i,i.m_groupFlags|u.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth)):(i.m_firstIndex=0,i.m_lastIndex=0,i.m_groupFlags&u.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty||this.SetGroupFlags(i,i.m_groupFlags|u.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed))}this.m_count=t,this.m_allParticleFlags=i,this.m_needsUpdateAllParticleFlags=!1;for(let t=this.m_groupList;t;){const e=t.GetNext();t.m_groupFlags&u.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed&&this.DestroyParticleGroup(t),t=e}}SolveLifetimes(t){if(!this.m_expirationTimeBuffer.data)throw new Error;if(!this.m_indexByExpirationTimeBuffer.data)throw new Error;this.m_timeElapsed=this.LifetimeToExpirationTime(t.dt);const e=this.GetQuantizedTimeElapsed(),i=this.m_expirationTimeBuffer.data,s=this.m_indexByExpirationTimeBuffer.data,o=this.GetParticleCount();if(this.m_expirationTimeBufferRequiresSorting){f(s,0,o,(t,e)=>{const s=i[t],o=i[e],n=s<=0;return n===o<=0?s>o:n}),this.m_expirationTimeBufferRequiresSorting=!1}for(let t=o-1;t>=0;--t){const o=s[t],n=i[o];if(e<n||n<=0)break;this.DestroyParticle(o)}}RotateBuffer(t,e,i){if(t!==e&&e!==i){if(!this.m_flagsBuffer.data)throw new Error;if(!this.m_positionBuffer.data)throw new Error;if(!this.m_velocityBuffer.data)throw new Error;if(B(this.m_flagsBuffer.data,t,e,i),this.m_lastBodyContactStepBuffer.data&&B(this.m_lastBodyContactStepBuffer.data,t,e,i),this.m_bodyContactCountBuffer.data&&B(this.m_bodyContactCountBuffer.data,t,e,i),this.m_consecutiveContactStepsBuffer.data&&B(this.m_consecutiveContactStepsBuffer.data,t,e,i),B(this.m_positionBuffer.data,t,e,i),B(this.m_velocityBuffer.data,t,e,i),B(this.m_groupBuffer,t,e,i),this.m_hasForce&&B(this.m_forceBuffer,t,e,i),this.m_staticPressureBuffer&&B(this.m_staticPressureBuffer,t,e,i),this.m_depthBuffer&&B(this.m_depthBuffer,t,e,i),this.m_colorBuffer.data&&B(this.m_colorBuffer.data,t,e,i),this.m_userDataBuffer.data&&B(this.m_userDataBuffer.data,t,e,i),this.m_handleIndexBuffer.data){B(this.m_handleIndexBuffer.data,t,e,i);for(let e=t;e<i;++e){const t=this.m_handleIndexBuffer.data[e];t&&t.SetIndex(s(t.GetIndex()))}}if(this.m_expirationTimeBuffer.data){B(this.m_expirationTimeBuffer.data,t,e,i);const o=this.GetParticleCount();if(!this.m_indexByExpirationTimeBuffer.data)throw new Error;const n=this.m_indexByExpirationTimeBuffer.data;for(let t=0;t<o;++t)n[t]=s(n[t])}for(let t=0;t<this.m_proxyBuffer.count;t++){const e=this.m_proxyBuffer.data[t];e.index=s(e.index)}for(let t=0;t<this.m_contactBuffer.count;t++){const e=this.m_contactBuffer.data[t];e.indexA=s(e.indexA),e.indexB=s(e.indexB)}for(let t=0;t<this.m_bodyContactBuffer.count;t++){const e=this.m_bodyContactBuffer.data[t];e.index=s(e.index)}for(let t=0;t<this.m_pairBuffer.count;t++){const e=this.m_pairBuffer.data[t];e.indexA=s(e.indexA),e.indexB=s(e.indexB)}for(let t=0;t<this.m_triadBuffer.count;t++){const e=this.m_triadBuffer.data[t];e.indexA=s(e.indexA),e.indexB=s(e.indexB),e.indexC=s(e.indexC)}for(let t=this.m_groupList;t;t=t.GetNext())t.m_firstIndex=s(t.m_firstIndex),t.m_lastIndex=s(t.m_lastIndex-1)+1}function s(s){return s<t?s:s<e?s+i-e:s<i?s+t-e:s}}GetCriticalVelocity(t){return this.m_particleDiameter*t.inv_dt}GetCriticalVelocitySquared(t){const e=this.GetCriticalVelocity(t);return e*e}GetCriticalPressure(t){return this.m_def.density*this.GetCriticalVelocitySquared(t)}GetParticleStride(){return o.b2_particleStride*this.m_particleDiameter}GetParticleMass(){const t=this.GetParticleStride();return this.m_def.density*t*t}GetParticleInvMass(){const t=this.m_inverseDiameter*(1/o.b2_particleStride);return this.m_inverseDensity*t*t}GetFixtureContactFilter(){return this.m_allParticleFlags&h.b2ParticleFlag.b2_fixtureContactFilterParticle?this.m_world.m_contactManager.m_contactFilter:null}GetParticleContactFilter(){return this.m_allParticleFlags&h.b2ParticleFlag.b2_particleContactFilterParticle?this.m_world.m_contactManager.m_contactFilter:null}GetFixtureContactListener(){return this.m_allParticleFlags&h.b2ParticleFlag.b2_fixtureContactListenerParticle?this.m_world.m_contactManager.m_contactListener:null}GetParticleContactListener(){return this.m_allParticleFlags&h.b2ParticleFlag.b2_particleContactListenerParticle?this.m_world.m_contactManager.m_contactListener:null}SetUserOverridableBuffer(t,e,i){t.data=e,t.userSuppliedCapacity=i}SetGroupFlags(t,e){const i=t.m_groupFlags;(i^e)&u.b2ParticleGroupFlag.b2_solidParticleGroup&&(e|=u.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth),i&~e&&(this.m_needsUpdateAllGroupFlags=!0),~this.m_allGroupFlags&e&&(e&u.b2ParticleGroupFlag.b2_solidParticleGroup&&(this.m_depthBuffer=this.RequestBuffer(this.m_depthBuffer)),this.m_allGroupFlags|=e),t.m_groupFlags=e}static BodyContactCompare(t,e){return t.index===e.index?t.weight>e.weight:t.index<e.index}RemoveSpuriousBodyContacts(){f(this.m_bodyContactBuffer.data,0,this.m_bodyContactBuffer.count,I.BodyContactCompare);const t=I.RemoveSpuriousBodyContacts_s_n,e=I.RemoveSpuriousBodyContacts_s_pos,i=I.RemoveSpuriousBodyContacts_s_normal,o=this;let r=-1,a=0;this.m_bodyContactBuffer.count=V(this.m_bodyContactBuffer.data,l=>{if(l.index!==r&&(a=0,r=l.index),a++>3)return!0;const m=t.Copy(l.normal);if(m.SelfMul(o.m_particleDiameter*(1-l.weight)),!o.m_positionBuffer.data)throw new Error;const c=n.b2Vec2.AddVV(o.m_positionBuffer.data[l.index],m,e);if(!l.fixture.TestPoint(c)){const t=l.fixture.GetShape().GetChildCount();for(let e=0;e<t;e++){const t=i;if(l.fixture.ComputeDistance(c,t,e)<s.b2_linearSlop)return!1}return!0}return!1},this.m_bodyContactBuffer.count)}DetectStuckParticle(t){if(!(this.m_stuckThreshold<=0)){if(!this.m_bodyContactCountBuffer.data)throw new Error;if(!this.m_consecutiveContactStepsBuffer.data)throw new Error;if(!this.m_lastBodyContactStepBuffer.data)throw new Error;++this.m_bodyContactCountBuffer.data[t],2===this.m_bodyContactCountBuffer.data[t]&&(++this.m_consecutiveContactStepsBuffer.data[t],this.m_consecutiveContactStepsBuffer.data[t]>this.m_stuckThreshold&&(this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()]=t)),this.m_lastBodyContactStepBuffer.data[t]=this.m_timestamp}}ValidateParticleIndex(t){return t>=0&&t<this.GetParticleCount()&&t!==s.b2_invalidParticleIndex}GetQuantizedTimeElapsed(){return Math.floor(this.m_timeElapsed/4294967296)}LifetimeToExpirationTime(t){return this.m_timeElapsed+Math.floor(t/this.m_def.lifetimeGranularity*4294967296)}ForceCanBeApplied(t){return!(t&h.b2ParticleFlag.b2_wallParticle)}PrepareForceBuffer(){if(!this.m_hasForce){for(let t=0;t<this.m_count;t++)this.m_forceBuffer[t].SetZero();this.m_hasForce=!0}}IsRigidGroup(t){return null!==t&&0!=(t.m_groupFlags&u.b2ParticleGroupFlag.b2_rigidParticleGroup)}GetLinearVelocity(t,e,i,s){if(t&&this.IsRigidGroup(t))return t.GetLinearVelocityFromWorldPoint(i,s);if(!this.m_velocityBuffer.data)throw new Error;return s.Copy(this.m_velocityBuffer.data[e])}InitDampingParameter(t,e,i,s,o,r,a,l){t[0]=s>0?1/s:0,e[0]=o>0?1/o:0,i[0]=n.b2Vec2.CrossVV(n.b2Vec2.SubVV(a,r,n.b2Vec2.s_t0),l)}InitDampingParameterWithRigidGroupOrParticle(t,e,i,s,o,n,r,a){if(o&&s)this.InitDampingParameter(t,e,i,o.GetMass(),o.GetInertia(),o.GetCenter(),r,a);else{if(!this.m_flagsBuffer.data)throw new Error;const s=this.m_flagsBuffer.data[n];this.InitDampingParameter(t,e,i,s&h.b2ParticleFlag.b2_wallParticle?0:this.GetParticleMass(),0,r,r,a)}}ComputeDampingImpulse(t,e,i,s,o,n,r){const a=t+e*i*i+s+o*n*n;return a>0?r/a:0}ApplyDamping(t,e,i,s,o,n,r,a){if(o&&s)o.m_linearVelocity.SelfMulAdd(r*t,a),o.m_angularVelocity+=r*i*e;else{if(!this.m_velocityBuffer.data)throw new Error;this.m_velocityBuffer.data[n].SelfMulAdd(r*t,a)}}}I.xTruncBits=12,I.yTruncBits=12,I.tagBits=32,I.yOffset=1<<I.yTruncBits-1,I.yShift=I.tagBits-I.yTruncBits,I.xShift=I.tagBits-I.yTruncBits-I.xTruncBits,I.xScale=1<<I.xShift,I.xOffset=I.xScale*(1<<I.xTruncBits-1),I.yMask=(1<<I.yTruncBits)-1<<I.yShift,I.xMask=~I.yMask,I.DestroyParticlesInShape_s_aabb=new a.b2AABB,I.CreateParticleGroup_s_transform=new n.b2Transform,I.ComputeCollisionEnergy_s_v=new n.b2Vec2,I.QueryShapeAABB_s_aabb=new a.b2AABB,I.QueryPointAABB_s_aabb=new a.b2AABB,I.RayCast_s_aabb=new a.b2AABB,I.RayCast_s_p=new n.b2Vec2,I.RayCast_s_v=new n.b2Vec2,I.RayCast_s_n=new n.b2Vec2,I.RayCast_s_point=new n.b2Vec2,I.k_pairFlags=h.b2ParticleFlag.b2_springParticle,I.k_triadFlags=h.b2ParticleFlag.b2_elasticParticle,I.k_noPressureFlags=h.b2ParticleFlag.b2_powderParticle|h.b2ParticleFlag.b2_tensileParticle,I.k_extraDampingFlags=h.b2ParticleFlag.b2_staticPressureParticle,I.k_barrierWallFlags=h.b2ParticleFlag.b2_barrierParticle|h.b2ParticleFlag.b2_wallParticle,I.CreateParticlesStrokeShapeForGroup_s_edge=new m.b2EdgeShape,I.CreateParticlesStrokeShapeForGroup_s_d=new n.b2Vec2,I.CreateParticlesStrokeShapeForGroup_s_p=new n.b2Vec2,I.CreateParticlesFillShapeForGroup_s_aabb=new a.b2AABB,I.CreateParticlesFillShapeForGroup_s_p=new n.b2Vec2,I.UpdatePairsAndTriads_s_dab=new n.b2Vec2,I.UpdatePairsAndTriads_s_dbc=new n.b2Vec2,I.UpdatePairsAndTriads_s_dca=new n.b2Vec2,I.AddContact_s_d=new n.b2Vec2,I.UpdateBodyContacts_s_aabb=new a.b2AABB,I.Solve_s_subStep=new c.b2TimeStep,I.SolveCollision_s_aabb=new a.b2AABB,I.SolveGravity_s_gravity=new n.b2Vec2,I.SolveBarrier_s_aabb=new a.b2AABB,I.SolveBarrier_s_va=new n.b2Vec2,I.SolveBarrier_s_vb=new n.b2Vec2,I.SolveBarrier_s_pba=new n.b2Vec2,I.SolveBarrier_s_vba=new n.b2Vec2,I.SolveBarrier_s_vc=new n.b2Vec2,I.SolveBarrier_s_pca=new n.b2Vec2,I.SolveBarrier_s_vca=new n.b2Vec2,I.SolveBarrier_s_qba=new n.b2Vec2,I.SolveBarrier_s_qca=new n.b2Vec2,I.SolveBarrier_s_dv=new n.b2Vec2,I.SolveBarrier_s_f=new n.b2Vec2,I.SolvePressure_s_f=new n.b2Vec2,I.SolveDamping_s_v=new n.b2Vec2,I.SolveDamping_s_f=new n.b2Vec2,I.SolveRigidDamping_s_t0=new n.b2Vec2,I.SolveRigidDamping_s_t1=new n.b2Vec2,I.SolveRigidDamping_s_p=new n.b2Vec2,I.SolveRigidDamping_s_v=new n.b2Vec2,I.SolveExtraDamping_s_v=new n.b2Vec2,I.SolveExtraDamping_s_f=new n.b2Vec2,I.SolveRigid_s_position=new n.b2Vec2,I.SolveRigid_s_rotation=new n.b2Rot,I.SolveRigid_s_transform=new n.b2Transform,I.SolveRigid_s_velocityTransform=new n.b2Transform,I.SolveElastic_s_pa=new n.b2Vec2,I.SolveElastic_s_pb=new n.b2Vec2,I.SolveElastic_s_pc=new n.b2Vec2,I.SolveElastic_s_r=new n.b2Rot,I.SolveElastic_s_t0=new n.b2Vec2,I.SolveSpring_s_pa=new n.b2Vec2,I.SolveSpring_s_pb=new n.b2Vec2,I.SolveSpring_s_d=new n.b2Vec2,I.SolveSpring_s_f=new n.b2Vec2,I.SolveTensile_s_weightedNormal=new n.b2Vec2,I.SolveTensile_s_s=new n.b2Vec2,I.SolveTensile_s_f=new n.b2Vec2,I.SolveViscous_s_v=new n.b2Vec2,I.SolveViscous_s_f=new n.b2Vec2,I.SolveRepulsive_s_f=new n.b2Vec2,I.SolvePowder_s_f=new n.b2Vec2,I.SolveSolid_s_f=new n.b2Vec2,I.RemoveSpuriousBodyContacts_s_n=new n.b2Vec2,I.RemoveSpuriousBodyContacts_s_pos=new n.b2Vec2,I.RemoveSpuriousBodyContacts_s_normal=new n.b2Vec2,e.b2ParticleSystem=I,function(t){t.UserOverridableBuffer=class{constructor(){this.data=null,this.userSuppliedCapacity=0}};t.Proxy=class{constructor(){this.index=s.b2_invalidParticleIndex,this.tag=0}static CompareProxyProxy(t,e){return t.tag<e.tag}static CompareTagProxy(t,e){return t<e.tag}static CompareProxyTag(t,e){return t.tag<e}};t.InsideBoundsEnumerator=class{constructor(e,i,s,o,n){this.m_system=e,this.m_xLower=(i&t.xMask)>>>0,this.m_xUpper=(s&t.xMask)>>>0,this.m_yLower=(i&t.yMask)>>>0,this.m_yUpper=(s&t.yMask)>>>0,this.m_first=o,this.m_last=n}GetNext(){for(;this.m_first<this.m_last;){const e=(this.m_system.m_proxyBuffer.data[this.m_first].tag&t.xMask)>>>0;if(e>=this.m_xLower&&e<=this.m_xUpper)return this.m_system.m_proxyBuffer.data[this.m_first++].index;this.m_first++}return s.b2_invalidParticleIndex}};t.ParticleListNode=class{constructor(){this.next=null,this.count=0,this.index=0}};t.FixedSetAllocator=class{Allocate(t,e){return e}Clear(){}GetCount(){return 0}Invalidate(t){}GetValidBuffer(){return[]}GetBuffer(){return[]}SetCount(t){}};t.FixtureParticle=class{constructor(t,e){this.second=s.b2_invalidParticleIndex,this.first=t,this.second=e}};t.FixtureParticleSet=class extends t.FixedSetAllocator{Initialize(t,e){}Find(t){return s.b2_invalidParticleIndex}};t.ParticlePair=class{constructor(t,e){this.first=s.b2_invalidParticleIndex,this.second=s.b2_invalidParticleIndex,this.first=t,this.second=e}};t.b2ParticlePairSet=class extends t.FixedSetAllocator{Initialize(t,e){}Find(t){return s.b2_invalidParticleIndex}};t.ConnectionFilter=class{IsNecessary(t){return!0}ShouldCreatePair(t,e){return!0}ShouldCreateTriad(t,e,i){return!0}};t.DestroyParticlesInShapeCallback=class extends _.b2QueryCallback{constructor(t,e,i,s){super(),this.m_callDestructionListener=!1,this.m_destroyed=0,this.m_system=t,this.m_shape=e,this.m_xf=i,this.m_callDestructionListener=s,this.m_destroyed=0}ReportFixture(t){return!1}ReportParticle(t,e){if(t!==this.m_system)return!1;if(!this.m_system.m_positionBuffer.data)throw new Error;return this.m_shape.TestPoint(this.m_xf,this.m_system.m_positionBuffer.data[e])&&(this.m_system.DestroyParticle(e,this.m_callDestructionListener),this.m_destroyed++),!0}Destroyed(){return this.m_destroyed}};t.JoinParticleGroupsFilter=class extends t.ConnectionFilter{constructor(t){super(),this.m_threshold=0,this.m_threshold=t}ShouldCreatePair(t,e){return t<this.m_threshold&&this.m_threshold<=e||e<this.m_threshold&&this.m_threshold<=t}ShouldCreateTriad(t,e,i){return(t<this.m_threshold||e<this.m_threshold||i<this.m_threshold)&&(this.m_threshold<=t||this.m_threshold<=e||this.m_threshold<=i)}};t.CompositeShape=class extends l.b2Shape{constructor(t,e=t.length){super(l.b2ShapeType.e_unknown,0),this.m_shapeCount=0,this.m_shapes=t,this.m_shapeCount=e}Clone(){throw new Error}GetChildCount(){return 1}TestPoint(t,e){for(let i=0;i<this.m_shapeCount;i++)if(this.m_shapes[i].TestPoint(t,e))return!0;return!1}ComputeDistance(t,e,i,s){return 0}RayCast(t,e,i,s){return!1}ComputeAABB(t,e,i){const o=new a.b2AABB;t.lowerBound.x=+s.b2_maxFloat,t.lowerBound.y=+s.b2_maxFloat,t.upperBound.x=-s.b2_maxFloat,t.upperBound.y=-s.b2_maxFloat;for(let i=0;i<this.m_shapeCount;i++){const s=this.m_shapes[i].GetChildCount();for(let n=0;n<s;n++){const s=o;this.m_shapes[i].ComputeAABB(s,e,n),t.Combine1(s)}}}ComputeMass(t,e){}SetupDistanceProxy(t,e){}ComputeSubmergedArea(t,e,i,s){return 0}Dump(t){}};t.ReactiveFilter=class extends t.ConnectionFilter{constructor(t){super(),this.m_flagsBuffer=t}IsNecessary(t){if(!this.m_flagsBuffer.data)throw new Error;return 0!=(this.m_flagsBuffer.data[t]&h.b2ParticleFlag.b2_reactiveParticle)}};class e extends A{constructor(t,e){super(t),this.m_contactFilter=e}ShouldCollideFixtureParticle(t,e,i){if(this.m_contactFilter){if(this.m_system.GetFlagsBuffer()[i]&h.b2ParticleFlag.b2_fixtureContactFilterParticle)return this.m_contactFilter.ShouldCollideFixtureParticle(t,this.m_system,i)}return!0}ReportFixtureAndParticle(e,i,s){const o=t.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n,r=t.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;if(!this.m_system.m_flagsBuffer.data)throw new Error;if(!this.m_system.m_positionBuffer.data)throw new Error;const a=this.m_system.m_positionBuffer.data[s],l=o,m=e.ComputeDistance(a,l,i);if(m<this.m_system.m_particleDiameter&&this.ShouldCollideFixtureParticle(e,this.m_system,s)){const t=e.GetBody(),i=t.GetWorldCenter(),o=t.GetMass(),c=t.GetInertia()-o*t.GetLocalCenter().LengthSquared(),_=o>0?1/o:0,u=c>0?1/c:0,d=this.m_system.m_flagsBuffer.data[s]&h.b2ParticleFlag.b2_wallParticle?0:this.m_system.GetParticleInvMass(),b=n.b2Vec2.SubVV(a,i,r),p=n.b2Vec2.CrossVV(b,l),f=d+_+u*p*p,y=this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];y.index=s,y.body=t,y.fixture=e,y.weight=1-m*this.m_system.m_inverseDiameter,y.normal.Copy(l.SelfNeg()),y.mass=f>0?1/f:0,this.m_system.DetectStuckParticle(s)}}}e.ReportFixtureAndParticle_s_n=new n.b2Vec2,e.ReportFixtureAndParticle_s_rp=new n.b2Vec2,t.UpdateBodyContactsCallback=e;class i extends A{constructor(t,e){super(t),this.m_step=e}ReportFixtureAndParticle(e,i,o){const r=t.SolveCollisionCallback.ReportFixtureAndParticle_s_p1,a=t.SolveCollisionCallback.ReportFixtureAndParticle_s_output,m=t.SolveCollisionCallback.ReportFixtureAndParticle_s_input,c=t.SolveCollisionCallback.ReportFixtureAndParticle_s_p,_=t.SolveCollisionCallback.ReportFixtureAndParticle_s_v,h=t.SolveCollisionCallback.ReportFixtureAndParticle_s_f,u=e.GetBody();if(!this.m_system.m_positionBuffer.data)throw new Error;if(!this.m_system.m_velocityBuffer.data)throw new Error;const d=this.m_system.m_positionBuffer.data[o],b=this.m_system.m_velocityBuffer.data[o],p=a,f=m;if(0===this.m_system.m_iterationIndex){const t=n.b2Transform.MulTXV(u.m_xf0,d,r);e.GetShape().GetType()===l.b2ShapeType.e_circleShape&&(t.SelfSub(u.GetLocalCenter()),n.b2Rot.MulRV(u.m_xf0.q,t,t),n.b2Rot.MulTRV(u.m_xf.q,t,t),t.SelfAdd(u.GetLocalCenter())),n.b2Transform.MulXV(u.m_xf,t,f.p1)}else f.p1.Copy(d);if(n.b2Vec2.AddVMulSV(d,this.m_step.dt,b,f.p2),f.maxFraction=1,e.RayCast(p,f,i)){const t=p.normal,e=c;e.x=(1-p.fraction)*f.p1.x+p.fraction*f.p2.x+s.b2_linearSlop*t.x,e.y=(1-p.fraction)*f.p1.y+p.fraction*f.p2.y+s.b2_linearSlop*t.y;const i=_;i.x=this.m_step.inv_dt*(e.x-d.x),i.y=this.m_step.inv_dt*(e.y-d.y),this.m_system.m_velocityBuffer.data[o].Copy(i);const n=h;n.x=this.m_step.inv_dt*this.m_system.GetParticleMass()*(b.x-i.x),n.y=this.m_step.inv_dt*this.m_system.GetParticleMass()*(b.y-i.y),this.m_system.ParticleApplyForce(o,n)}}ReportParticle(t,e){return!1}}i.ReportFixtureAndParticle_s_p1=new n.b2Vec2,i.ReportFixtureAndParticle_s_output=new a.b2RayCastOutput,i.ReportFixtureAndParticle_s_input=new a.b2RayCastInput,i.ReportFixtureAndParticle_s_p=new n.b2Vec2,i.ReportFixtureAndParticle_s_v=new n.b2Vec2,i.ReportFixtureAndParticle_s_f=new n.b2Vec2,t.SolveCollisionCallback=i}(I=e.b2ParticleSystem||(e.b2ParticleSystem={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(1),o=i(7);var n;!function(t){t[t.b2_solidParticleGroup=1]="b2_solidParticleGroup",t[t.b2_rigidParticleGroup=2]="b2_rigidParticleGroup",t[t.b2_particleGroupCanBeEmpty=4]="b2_particleGroupCanBeEmpty",t[t.b2_particleGroupWillBeDestroyed=8]="b2_particleGroupWillBeDestroyed",t[t.b2_particleGroupNeedsUpdateDepth=16]="b2_particleGroupNeedsUpdateDepth",t[t.b2_particleGroupInternalMask=24]="b2_particleGroupInternalMask"}(n=e.b2ParticleGroupFlag||(e.b2ParticleGroupFlag={}));e.b2ParticleGroupDef=class{constructor(){this.flags=0,this.groupFlags=0,this.position=new s.b2Vec2,this.angle=0,this.linearVelocity=new s.b2Vec2,this.angularVelocity=0,this.color=new o.b2Color,this.strength=1,this.shapeCount=0,this.stride=0,this.particleCount=0,this.lifetime=0,this.userData=null,this.group=null}};class r{constructor(t){this.m_firstIndex=0,this.m_lastIndex=0,this.m_groupFlags=0,this.m_strength=1,this.m_prev=null,this.m_next=null,this.m_timestamp=-1,this.m_mass=0,this.m_inertia=0,this.m_center=new s.b2Vec2,this.m_linearVelocity=new s.b2Vec2,this.m_angularVelocity=0,this.m_transform=new s.b2Transform,this.m_userData=null,this.m_system=t}GetNext(){return this.m_next}GetParticleSystem(){return this.m_system}GetParticleCount(){return this.m_lastIndex-this.m_firstIndex}GetBufferIndex(){return this.m_firstIndex}ContainsParticle(t){return this.m_firstIndex<=t&&t<this.m_lastIndex}GetAllParticleFlags(){if(!this.m_system.m_flagsBuffer.data)throw new Error;let t=0;for(let e=this.m_firstIndex;e<this.m_lastIndex;e++)t|=this.m_system.m_flagsBuffer.data[e];return t}GetGroupFlags(){return this.m_groupFlags}SetGroupFlags(t){t|=this.m_groupFlags&n.b2_particleGroupInternalMask,this.m_system.SetGroupFlags(this,t)}GetMass(){return this.UpdateStatistics(),this.m_mass}GetInertia(){return this.UpdateStatistics(),this.m_inertia}GetCenter(){return this.UpdateStatistics(),this.m_center}GetLinearVelocity(){return this.UpdateStatistics(),this.m_linearVelocity}GetAngularVelocity(){return this.UpdateStatistics(),this.m_angularVelocity}GetTransform(){return this.m_transform}GetPosition(){return this.m_transform.p}GetAngle(){return this.m_transform.q.GetAngle()}GetLinearVelocityFromWorldPoint(t,e){const i=r.GetLinearVelocityFromWorldPoint_s_t0;return this.UpdateStatistics(),s.b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,s.b2Vec2.SubVV(t,this.m_center,i),e)}GetUserData(){return this.m_userData}SetUserData(t){this.m_userData=t}ApplyForce(t){this.m_system.ApplyForce(this.m_firstIndex,this.m_lastIndex,t)}ApplyLinearImpulse(t){this.m_system.ApplyLinearImpulse(this.m_firstIndex,this.m_lastIndex,t)}DestroyParticles(t){if(this.m_system.m_world.IsLocked())throw new Error;for(let e=this.m_firstIndex;e<this.m_lastIndex;e++)this.m_system.DestroyParticle(e,t)}UpdateStatistics(){if(!this.m_system.m_positionBuffer.data)throw new Error;if(!this.m_system.m_velocityBuffer.data)throw new Error;const t=new s.b2Vec2,e=new s.b2Vec2;if(this.m_timestamp!==this.m_system.m_timestamp){const i=this.m_system.GetParticleMass();this.m_mass=i*(this.m_lastIndex-this.m_firstIndex),this.m_center.SetZero(),this.m_linearVelocity.SetZero();for(let t=this.m_firstIndex;t<this.m_lastIndex;t++)this.m_center.SelfMulAdd(i,this.m_system.m_positionBuffer.data[t]),this.m_linearVelocity.SelfMulAdd(i,this.m_system.m_velocityBuffer.data[t]);if(this.m_mass>0){const t=1/this.m_mass;this.m_center.SelfMul(t),this.m_linearVelocity.SelfMul(t)}this.m_inertia=0,this.m_angularVelocity=0;for(let o=this.m_firstIndex;o<this.m_lastIndex;o++)s.b2Vec2.SubVV(this.m_system.m_positionBuffer.data[o],this.m_center,t),s.b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[o],this.m_linearVelocity,e),this.m_inertia+=i*s.b2Vec2.DotVV(t,t),this.m_angularVelocity+=i*s.b2Vec2.CrossVV(t,e);this.m_inertia>0&&(this.m_angularVelocity*=1/this.m_inertia),this.m_timestamp=this.m_system.m_timestamp}}}r.GetLinearVelocityFromWorldPoint_s_t0=new s.b2Vec2,e.b2ParticleGroup=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.FullScreenUI=class{constructor(){this.m_particleParameterSelectionEnabled=!1,this.Reset()}Reset(){this.m_particleParameterSelectionEnabled=!1}SetParticleParameterSelectionEnabled(t){this.m_particleParameterSelectionEnabled=t}GetParticleParameterSelectionEnabled(){return this.m_particleParameterSelectionEnabled}}},function(t,e,i){"use strict";var s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(6));var n;!function(t){t[t.OptionStrictContacts=1]="OptionStrictContacts",t[t.OptionDrawShapes=2]="OptionDrawShapes",t[t.OptionDrawParticles=4]="OptionDrawParticles",t[t.OptionDrawJoints=8]="OptionDrawJoints",t[t.OptionDrawAABBs=16]="OptionDrawAABBs",t[t.OptionDrawContactPoints=32]="OptionDrawContactPoints",t[t.OptionDrawContactNormals=64]="OptionDrawContactNormals",t[t.OptionDrawContactImpulse=128]="OptionDrawContactImpulse",t[t.OptionDrawFrictionImpulse=256]="OptionDrawFrictionImpulse",t[t.OptionDrawCOMs=512]="OptionDrawCOMs",t[t.OptionDrawStats=1024]="OptionDrawStats",t[t.OptionDrawProfile=2048]="OptionDrawProfile"}(n=e.ParticleParameterOptions||(e.ParticleParameterOptions={}));class r{constructor(...t){this.value=0,this.options=0,this.name="",t[0]instanceof r?this.Copy(t[0]):(this.value=t[0],this.options=t[1],this.name=t[2])}Copy(t){return this.value=t.value,this.options=t.options,this.name=t.name,this}}e.ParticleParameterValue=r;class a{constructor(t,e=t.length){this.numValues=0,this.values=t,this.numValues=e}CalculateValueMask(){let t=0;for(let e=0;e<this.numValues;e++)t|=this.values[e].value;return t}}e.ParticleParameterDefinition=a;class l{constructor(){this.m_index=0,this.m_changed=!1,this.m_restartOnChange=!1,this.m_value=null,this.m_definition=l.k_defaultDefinition,this.m_definitionCount=0,this.m_valueCount=0,this.Reset()}Reset(){this.m_restartOnChange=!0,this.m_index=0,this.SetDefinition(l.k_defaultDefinition),this.Set(0)}SetDefinition(t,e=t.length){this.m_definition=t,this.m_definitionCount=e,this.m_valueCount=0;for(let t=0;t<this.m_definitionCount;++t)this.m_valueCount+=this.m_definition[t].numValues;this.Set(this.Get())}Get(){return this.m_index}Set(t){this.m_changed=this.m_index!==t,this.m_index=this.m_valueCount?t%this.m_valueCount:t,this.m_value=this.FindParticleParameterValue()}Increment(){const t=this.Get();this.Set(t>=this.m_valueCount?0:t+1)}Decrement(){const t=this.Get();this.Set(0===t?this.m_valueCount-1:t-1)}Changed(t){const e=this.m_changed;return this.m_changed=!1,t&&(t[0]=e&&this.GetRestartOnChange()),e}GetValue(){if(null===this.m_value)throw new Error;return this.m_value.value}GetName(){if(null===this.m_value)throw new Error;return this.m_value.name}GetOptions(){if(null===this.m_value)throw new Error;return this.m_value.options}SetRestartOnChange(t){this.m_restartOnChange=t}GetRestartOnChange(){return this.m_restartOnChange}FindIndexByValue(t){let e=0;for(let i=0;i<this.m_definitionCount;++i){const s=this.m_definition[i],o=s.numValues;for(let i=0;i<o;++i,++e)if(s.values[i].value===t)return e}return-1}FindParticleParameterValue(){let t=0;const e=this.Get();for(let i=0;i<this.m_definitionCount;++i){const s=this.m_definition[i],o=t+s.numValues;if(e>=t&&e<o)return s.values[e-t];t=o}return null}}l.k_DefaultOptions=n.OptionDrawShapes|n.OptionDrawParticles,l.k_particleTypes=[new r(o.b2ParticleFlag.b2_waterParticle,l.k_DefaultOptions,"water"),new r(o.b2ParticleFlag.b2_waterParticle,l.k_DefaultOptions|n.OptionStrictContacts,"water (strict)"),new r(o.b2ParticleFlag.b2_springParticle,l.k_DefaultOptions,"spring"),new r(o.b2ParticleFlag.b2_elasticParticle,l.k_DefaultOptions,"elastic"),new r(o.b2ParticleFlag.b2_viscousParticle,l.k_DefaultOptions,"viscous"),new r(o.b2ParticleFlag.b2_powderParticle,l.k_DefaultOptions,"powder"),new r(o.b2ParticleFlag.b2_tensileParticle,l.k_DefaultOptions,"tensile"),new r(o.b2ParticleFlag.b2_colorMixingParticle,l.k_DefaultOptions,"color mixing"),new r(o.b2ParticleFlag.b2_wallParticle,l.k_DefaultOptions,"wall"),new r(o.b2ParticleFlag.b2_barrierParticle|o.b2ParticleFlag.b2_wallParticle,l.k_DefaultOptions,"barrier"),new r(o.b2ParticleFlag.b2_staticPressureParticle,l.k_DefaultOptions,"static pressure"),new r(o.b2ParticleFlag.b2_waterParticle,l.k_DefaultOptions|n.OptionDrawAABBs,"water (bounding boxes)")],l.k_defaultDefinition=[new a(l.k_particleTypes)],e.ParticleParameter=l,function(t){t.Options=n;t.Value=class extends r{};t.Definition=class extends a{}}(l=e.ParticleParameter||(e.ParticleParameter={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(15);let o;const n=t=>{window.requestAnimationFrame(n),o.SimulationLoop(t)};window.requestAnimationFrame(t=>{o=new s.Main(t),window.requestAnimationFrame(n)})},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.b2BlockAllocator=class{}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.b2StackAllocator=class{}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(4);class r extends n.b2Shape{constructor(t=0){super(n.b2ShapeType.e_circleShape,t),this.m_p=new o.b2Vec2}Set(t,e=this.m_radius){return this.m_p.Copy(t),this.m_radius=e,this}Clone(){return(new r).Copy(this)}Copy(t){return super.Copy(t),this.m_p.Copy(t.m_p),this}GetChildCount(){return 1}TestPoint(t,e){const i=o.b2Transform.MulXV(t,this.m_p,r.TestPoint_s_center),s=o.b2Vec2.SubVV(e,i,r.TestPoint_s_d);return o.b2Vec2.DotVV(s,s)<=o.b2Sq(this.m_radius)}ComputeDistance(t,e,i,s){const n=o.b2Transform.MulXV(t,this.m_p,r.ComputeDistance_s_center);return o.b2Vec2.SubVV(e,n,i),i.Normalize()-this.m_radius}RayCast(t,e,i,n){const a=o.b2Transform.MulXV(i,this.m_p,r.RayCast_s_position),l=o.b2Vec2.SubVV(e.p1,a,r.RayCast_s_s),m=o.b2Vec2.DotVV(l,l)-o.b2Sq(this.m_radius),c=o.b2Vec2.SubVV(e.p2,e.p1,r.RayCast_s_r),_=o.b2Vec2.DotVV(l,c),h=o.b2Vec2.DotVV(c,c),u=_*_-h*m;if(u<0||h<s.b2_epsilon)return!1;let d=-(_+o.b2Sqrt(u));return 0<=d&&d<=e.maxFraction*h&&(d/=h,t.fraction=d,o.b2Vec2.AddVMulSV(l,d,c,t.normal).SelfNormalize(),!0)}ComputeAABB(t,e,i){const s=o.b2Transform.MulXV(e,this.m_p,r.ComputeAABB_s_p);t.lowerBound.Set(s.x-this.m_radius,s.y-this.m_radius),t.upperBound.Set(s.x+this.m_radius,s.y+this.m_radius)}ComputeMass(t,e){const i=o.b2Sq(this.m_radius);t.mass=e*s.b2_pi*i,t.center.Copy(this.m_p),t.I=t.mass*(.5*i+o.b2Vec2.DotVV(this.m_p,this.m_p))}SetupDistanceProxy(t,e){t.m_vertices=t.m_buffer,t.m_vertices[0].Copy(this.m_p),t.m_count=1,t.m_radius=this.m_radius}ComputeSubmergedArea(t,e,i,n){const r=o.b2Transform.MulXV(i,this.m_p,new o.b2Vec2),a=-(o.b2Vec2.DotVV(t,r)-e);if(a<-this.m_radius+s.b2_epsilon)return 0;if(a>this.m_radius)return n.Copy(r),s.b2_pi*this.m_radius*this.m_radius;const l=this.m_radius*this.m_radius,m=a*a,c=l*(o.b2Asin(a/this.m_radius)+s.b2_pi/2)+a*o.b2Sqrt(l-m),_=-2/3*o.b2Pow(l-m,1.5)/c;return n.x=r.x+t.x*_,n.y=r.y+t.y*_,c}Dump(t){t("    const shape: b2CircleShape = new b2CircleShape();\n"),t("    shape.m_radius = %.15f;\n",this.m_radius),t("    shape.m_p.Set(%.15f, %.15f);\n",this.m_p.x,this.m_p.y)}}r.TestPoint_s_center=new o.b2Vec2,r.TestPoint_s_d=new o.b2Vec2,r.ComputeDistance_s_center=new o.b2Vec2,r.RayCast_s_position=new o.b2Vec2,r.RayCast_s_s=new o.b2Vec2,r.RayCast_s_r=new o.b2Vec2,r.ComputeAABB_s_p=new o.b2Vec2,e.b2CircleShape=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(4),r=i(4);class a extends r.b2Shape{constructor(){super(r.b2ShapeType.e_polygonShape,s.b2_polygonRadius),this.m_centroid=new o.b2Vec2(0,0),this.m_vertices=[],this.m_normals=[],this.m_count=0}Clone(){return(new a).Copy(this)}Copy(t){super.Copy(t),this.m_centroid.Copy(t.m_centroid),this.m_count=t.m_count,this.m_vertices=o.b2Vec2.MakeArray(this.m_count),this.m_normals=o.b2Vec2.MakeArray(this.m_count);for(let e=0;e<this.m_count;++e)this.m_vertices[e].Copy(t.m_vertices[e]),this.m_normals[e].Copy(t.m_normals[e]);return this}GetChildCount(){return 1}Set(t,e=t.length,i=0){if(e<3)return this.SetAsBox(1,1);let n=e;const r=[];for(let e=0;e<n;++e){const n=t[i+e];let a=!0;for(let t=0;t<r.length;++t)if(o.b2Vec2.DistanceSquaredVV(n,r[t])<.5*s.b2_linearSlop*(.5*s.b2_linearSlop)){a=!1;break}a&&r.push(n)}if((n=r.length)<3)return this.SetAsBox(1,1);let l=0,m=r[0].x;for(let t=1;t<n;++t){const e=r[t].x;(e>m||e===m&&r[t].y<r[l].y)&&(l=t,m=e)}const c=[];let _=0,h=l;for(;;){c[_]=h;let t=0;for(let e=1;e<n;++e){if(t===h){t=e;continue}const i=o.b2Vec2.SubVV(r[t],r[c[_]],a.Set_s_r),s=o.b2Vec2.SubVV(r[e],r[c[_]],a.Set_s_v),n=o.b2Vec2.CrossVV(i,s);n<0&&(t=e),0===n&&s.LengthSquared()>i.LengthSquared()&&(t=e)}if(++_,h=t,t===l)break}this.m_count=_,this.m_vertices=o.b2Vec2.MakeArray(this.m_count),this.m_normals=o.b2Vec2.MakeArray(this.m_count);for(let t=0;t<_;++t)this.m_vertices[t].Copy(r[c[t]]);for(let t=0;t<_;++t){const e=this.m_vertices[t],i=this.m_vertices[(t+1)%_],s=o.b2Vec2.SubVV(i,e,o.b2Vec2.s_t0);o.b2Vec2.CrossVOne(s,this.m_normals[t]).SelfNormalize()}return a.ComputeCentroid(this.m_vertices,_,this.m_centroid),this}SetAsArray(t,e=t.length){return this.Set(t,e)}SetAsBox(t,e,i,s=0){if(this.m_count=4,this.m_vertices=o.b2Vec2.MakeArray(this.m_count),this.m_normals=o.b2Vec2.MakeArray(this.m_count),this.m_vertices[0].Set(-t,-e),this.m_vertices[1].Set(t,-e),this.m_vertices[2].Set(t,e),this.m_vertices[3].Set(-t,e),this.m_normals[0].Set(0,-1),this.m_normals[1].Set(1,0),this.m_normals[2].Set(0,1),this.m_normals[3].Set(-1,0),this.m_centroid.SetZero(),i){this.m_centroid.Copy(i);const t=new o.b2Transform;t.SetPosition(i),t.SetRotationAngle(s);for(let e=0;e<this.m_count;++e)o.b2Transform.MulXV(t,this.m_vertices[e],this.m_vertices[e]),o.b2Rot.MulRV(t.q,this.m_normals[e],this.m_normals[e])}return this}TestPoint(t,e){const i=o.b2Transform.MulTXV(t,e,a.TestPoint_s_pLocal);for(let t=0;t<this.m_count;++t){if(o.b2Vec2.DotVV(this.m_normals[t],o.b2Vec2.SubVV(i,this.m_vertices[t],o.b2Vec2.s_t0))>0)return!1}return!0}ComputeDistance(t,e,i,n){const r=o.b2Transform.MulTXV(t,e,a.ComputeDistance_s_pLocal);let l=-s.b2_maxFloat;const m=a.ComputeDistance_s_normalForMaxDistance.Copy(r);for(let t=0;t<this.m_count;++t){const e=o.b2Vec2.DotVV(this.m_normals[t],o.b2Vec2.SubVV(r,this.m_vertices[t],o.b2Vec2.s_t0));e>l&&(l=e,m.Copy(this.m_normals[t]))}if(l>0){const e=a.ComputeDistance_s_minDistance.Copy(m);let s=l*l;for(let t=0;t<this.m_count;++t){const i=o.b2Vec2.SubVV(r,this.m_vertices[t],a.ComputeDistance_s_distance),n=i.LengthSquared();s>n&&(e.Copy(i),s=n)}return o.b2Rot.MulRV(t.q,e,i),i.Normalize(),Math.sqrt(s)}return o.b2Rot.MulRV(t.q,m,i),l}RayCast(t,e,i,s){const n=o.b2Transform.MulTXV(i,e.p1,a.RayCast_s_p1),r=o.b2Transform.MulTXV(i,e.p2,a.RayCast_s_p2),l=o.b2Vec2.SubVV(r,n,a.RayCast_s_d);let m=0,c=e.maxFraction,_=-1;for(let t=0;t<this.m_count;++t){const e=o.b2Vec2.DotVV(this.m_normals[t],o.b2Vec2.SubVV(this.m_vertices[t],n,o.b2Vec2.s_t0)),i=o.b2Vec2.DotVV(this.m_normals[t],l);if(0===i){if(e<0)return!1}else i<0&&e<m*i?(m=e/i,_=t):i>0&&e<c*i&&(c=e/i);if(c<m)return!1}return _>=0&&(t.fraction=m,o.b2Rot.MulRV(i.q,this.m_normals[_],t.normal),!0)}ComputeAABB(t,e,i){const s=o.b2Transform.MulXV(e,this.m_vertices[0],t.lowerBound),n=t.upperBound.Copy(s);for(let t=0;t<this.m_count;++t){const i=o.b2Transform.MulXV(e,this.m_vertices[t],a.ComputeAABB_s_v);o.b2Vec2.MinV(i,s,s),o.b2Vec2.MaxV(i,n,n)}const r=this.m_radius;s.SelfSubXY(r,r),n.SelfAddXY(r,r)}ComputeMass(t,e){const i=a.ComputeMass_s_center.SetZero();let s=0,n=0;const r=a.ComputeMass_s_s.SetZero();for(let t=0;t<this.m_count;++t)r.SelfAdd(this.m_vertices[t]);r.SelfMul(1/this.m_count);for(let t=0;t<this.m_count;++t){const e=o.b2Vec2.SubVV(this.m_vertices[t],r,a.ComputeMass_s_e1),l=o.b2Vec2.SubVV(this.m_vertices[(t+1)%this.m_count],r,a.ComputeMass_s_e2),m=o.b2Vec2.CrossVV(e,l),c=.5*m;s+=c,i.SelfAdd(o.b2Vec2.MulSV(c*(1/3),o.b2Vec2.AddVV(e,l,o.b2Vec2.s_t0),o.b2Vec2.s_t1));const _=e.x,h=e.y,u=l.x,d=l.y;n+=1/3*.25*m*(_*_+u*_+u*u+(h*h+d*h+d*d))}t.mass=e*s,i.SelfMul(1/s),o.b2Vec2.AddVV(i,r,t.center),t.I=e*n,t.I+=t.mass*(o.b2Vec2.DotVV(t.center,t.center)-o.b2Vec2.DotVV(i,i))}Validate(){for(let t=0;t<this.m_count;++t){const e=t,i=(t+1)%this.m_count,s=this.m_vertices[e],n=o.b2Vec2.SubVV(this.m_vertices[i],s,a.Validate_s_e);for(let t=0;t<this.m_count;++t){if(t===e||t===i)continue;const r=o.b2Vec2.SubVV(this.m_vertices[t],s,a.Validate_s_v);if(o.b2Vec2.CrossVV(n,r)<0)return!1}}return!0}SetupDistanceProxy(t,e){t.m_vertices=this.m_vertices,t.m_count=this.m_count,t.m_radius=this.m_radius}ComputeSubmergedArea(t,e,i,n){const r=o.b2Rot.MulTRV(i.q,t,a.ComputeSubmergedArea_s_normalL),l=e-o.b2Vec2.DotVV(t,i.p),m=[];let c=0,_=-1,h=-1,u=!1;for(let t=0;t<this.m_count;++t){m[t]=o.b2Vec2.DotVV(r,this.m_vertices[t])-l;const e=m[t]<-s.b2_epsilon;t>0&&(e?u||(_=t-1,c++):u&&(h=t-1,c++)),u=e}switch(c){case 0:if(u){const t=a.ComputeSubmergedArea_s_md;return this.ComputeMass(t,1),o.b2Transform.MulXV(i,t.center,n),t.mass}return 0;case 1:-1===_?_=this.m_count-1:h=this.m_count-1}const d=(_+1)%this.m_count,b=(h+1)%this.m_count,p=(0-m[_])/(m[d]-m[_]),f=(0-m[h])/(m[b]-m[h]),y=a.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[_].x*(1-p)+this.m_vertices[d].x*p,this.m_vertices[_].y*(1-p)+this.m_vertices[d].y*p),V=a.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[h].x*(1-f)+this.m_vertices[b].x*f,this.m_vertices[h].y*(1-f)+this.m_vertices[b].y*f);let x=0;const S=a.ComputeSubmergedArea_s_center.SetZero();let B,C=this.m_vertices[d],A=d;for(;A!==b;){B=(A=(A+1)%this.m_count)===b?V:this.m_vertices[A];const t=.5*((C.x-y.x)*(B.y-y.y)-(C.y-y.y)*(B.x-y.x));x+=t,S.x+=t*(y.x+C.x+B.x)/3,S.y+=t*(y.y+C.y+B.y)/3,C=B}return S.SelfMul(1/x),o.b2Transform.MulXV(i,S,n),x}Dump(t){t("    const shape: b2PolygonShape = new b2PolygonShape();\n"),t("    const vs: b2Vec2[] = [];\n");for(let e=0;e<this.m_count;++e)t("    vs[%d] = new b2Vec2(%.15f, %.15f);\n",e,this.m_vertices[e].x,this.m_vertices[e].y);t("    shape.Set(vs, %d);\n",this.m_count)}static ComputeCentroid(t,e,i){const s=i;s.SetZero();let n=0;const r=a.ComputeCentroid_s_pRef.SetZero();for(let i=0;i<e;++i){const l=r,m=t[i],c=t[(i+1)%e],_=o.b2Vec2.SubVV(m,l,a.ComputeCentroid_s_e1),h=o.b2Vec2.SubVV(c,l,a.ComputeCentroid_s_e2),u=.5*o.b2Vec2.CrossVV(_,h);n+=u,s.x+=u*(1/3)*(l.x+m.x+c.x),s.y+=u*(1/3)*(l.y+m.y+c.y)}return s.SelfMul(1/n),s}}a.Set_s_r=new o.b2Vec2,a.Set_s_v=new o.b2Vec2,a.TestPoint_s_pLocal=new o.b2Vec2,a.ComputeDistance_s_pLocal=new o.b2Vec2,a.ComputeDistance_s_normalForMaxDistance=new o.b2Vec2,a.ComputeDistance_s_minDistance=new o.b2Vec2,a.ComputeDistance_s_distance=new o.b2Vec2,a.RayCast_s_p1=new o.b2Vec2,a.RayCast_s_p2=new o.b2Vec2,a.RayCast_s_d=new o.b2Vec2,a.ComputeAABB_s_v=new o.b2Vec2,a.ComputeMass_s_center=new o.b2Vec2,a.ComputeMass_s_s=new o.b2Vec2,a.ComputeMass_s_e1=new o.b2Vec2,a.ComputeMass_s_e2=new o.b2Vec2,a.Validate_s_e=new o.b2Vec2,a.Validate_s_v=new o.b2Vec2,a.ComputeSubmergedArea_s_normalL=new o.b2Vec2,a.ComputeSubmergedArea_s_md=new n.b2MassData,a.ComputeSubmergedArea_s_intoVec=new o.b2Vec2,a.ComputeSubmergedArea_s_outoVec=new o.b2Vec2,a.ComputeSubmergedArea_s_center=new o.b2Vec2,a.ComputeCentroid_s_pRef=new o.b2Vec2,a.ComputeCentroid_s_e1=new o.b2Vec2,a.ComputeCentroid_s_e2=new o.b2Vec2,e.b2PolygonShape=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(4),r=i(10);class a extends n.b2Shape{constructor(){super(n.b2ShapeType.e_chainShape,s.b2_polygonRadius),this.m_vertices=[],this.m_count=0,this.m_prevVertex=new o.b2Vec2,this.m_nextVertex=new o.b2Vec2,this.m_hasPrevVertex=!1,this.m_hasNextVertex=!1}CreateLoop(t,e=t.length,i=0){if(e<3)return this;this.m_count=e+1,this.m_vertices=o.b2Vec2.MakeArray(this.m_count);for(let s=0;s<e;++s)this.m_vertices[s].Copy(t[i+s]);return this.m_vertices[e].Copy(this.m_vertices[0]),this.m_prevVertex.Copy(this.m_vertices[this.m_count-2]),this.m_nextVertex.Copy(this.m_vertices[1]),this.m_hasPrevVertex=!0,this.m_hasNextVertex=!0,this}CreateChain(t,e=t.length,i=0){this.m_count=e,this.m_vertices=o.b2Vec2.MakeArray(e);for(let s=0;s<e;++s)this.m_vertices[s].Copy(t[i+s]);return this.m_hasPrevVertex=!1,this.m_hasNextVertex=!1,this.m_prevVertex.SetZero(),this.m_nextVertex.SetZero(),this}SetPrevVertex(t){return this.m_prevVertex.Copy(t),this.m_hasPrevVertex=!0,this}SetNextVertex(t){return this.m_nextVertex.Copy(t),this.m_hasNextVertex=!0,this}Clone(){return(new a).Copy(this)}Copy(t){return super.Copy(t),this.CreateChain(t.m_vertices,t.m_count),this.m_prevVertex.Copy(t.m_prevVertex),this.m_nextVertex.Copy(t.m_nextVertex),this.m_hasPrevVertex=t.m_hasPrevVertex,this.m_hasNextVertex=t.m_hasNextVertex,this}GetChildCount(){return this.m_count-1}GetChildEdge(t,e){t.m_type=n.b2ShapeType.e_edgeShape,t.m_radius=this.m_radius,t.m_vertex1.Copy(this.m_vertices[e]),t.m_vertex2.Copy(this.m_vertices[e+1]),e>0?(t.m_vertex0.Copy(this.m_vertices[e-1]),t.m_hasVertex0=!0):(t.m_vertex0.Copy(this.m_prevVertex),t.m_hasVertex0=this.m_hasPrevVertex),e<this.m_count-2?(t.m_vertex3.Copy(this.m_vertices[e+2]),t.m_hasVertex3=!0):(t.m_vertex3.Copy(this.m_nextVertex),t.m_hasVertex3=this.m_hasNextVertex)}TestPoint(t,e){return!1}ComputeDistance(t,e,i,s){const o=a.ComputeDistance_s_edgeShape;return this.GetChildEdge(o,s),o.ComputeDistance(t,e,i,0)}RayCast(t,e,i,s){const o=a.RayCast_s_edgeShape;return o.m_vertex1.Copy(this.m_vertices[s]),o.m_vertex2.Copy(this.m_vertices[(s+1)%this.m_count]),o.RayCast(t,e,i,0)}ComputeAABB(t,e,i){const s=this.m_vertices[i],n=this.m_vertices[(i+1)%this.m_count],r=o.b2Transform.MulXV(e,s,a.ComputeAABB_s_v1),l=o.b2Transform.MulXV(e,n,a.ComputeAABB_s_v2);o.b2Vec2.MinV(r,l,t.lowerBound),o.b2Vec2.MaxV(r,l,t.upperBound)}ComputeMass(t,e){t.mass=0,t.center.SetZero(),t.I=0}SetupDistanceProxy(t,e){t.m_vertices=t.m_buffer,t.m_vertices[0].Copy(this.m_vertices[e]),e+1<this.m_count?t.m_vertices[1].Copy(this.m_vertices[e+1]):t.m_vertices[1].Copy(this.m_vertices[0]),t.m_count=2,t.m_radius=this.m_radius}ComputeSubmergedArea(t,e,i,s){return s.SetZero(),0}Dump(t){t("    const shape: b2ChainShape = new b2ChainShape();\n"),t("    const vs: b2Vec2[] = [];\n");for(let e=0;e<this.m_count;++e)t("    vs[%d] = new bVec2(%.15f, %.15f);\n",e,this.m_vertices[e].x,this.m_vertices[e].y);t("    shape.CreateChain(vs, %d);\n",this.m_count),t("    shape.m_prevVertex.Set(%.15f, %.15f);\n",this.m_prevVertex.x,this.m_prevVertex.y),t("    shape.m_nextVertex.Set(%.15f, %.15f);\n",this.m_nextVertex.x,this.m_nextVertex.y),t("    shape.m_hasPrevVertex = %s;\n",this.m_hasPrevVertex?"true":"false"),t("    shape.m_hasNextVertex = %s;\n",this.m_hasNextVertex?"true":"false")}}a.ComputeDistance_s_edgeShape=new r.b2EdgeShape,a.RayCast_s_edgeShape=new r.b2EdgeShape,a.ComputeAABB_s_v1=new o.b2Vec2,a.ComputeAABB_s_v2=new o.b2Vec2,e.b2ChainShape=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(14),r=i(7),a=i(2),l=i(18),m=i(4),c=i(3),_=i(28),h=i(20),u=i(29),d=i(30),b=i(31),p=i(32),f=i(33),y=i(34),V=i(35),x=i(36),S=i(37),B=i(38),C=i(11),A=i(39),w=i(48),g=i(13),v=i(12),M=i(0),P=i(21),I=i(50);class D{constructor(t){this.m_newFixture=!1,this.m_locked=!1,this.m_clearForces=!0,this.m_contactManager=new A.b2ContactManager,this.m_bodyList=null,this.m_jointList=null,this.m_particleSystemList=null,this.m_bodyCount=0,this.m_jointCount=0,this.m_gravity=new o.b2Vec2,this.m_allowSleep=!0,this.m_destructionListener=null,this.m_debugDraw=null,this.m_inv_dt0=0,this.m_warmStarting=!0,this.m_continuousPhysics=!0,this.m_subStepping=!1,this.m_stepComplete=!0,this.m_profile=new g.b2Profile,this.m_island=new w.b2Island,this.s_stack=[],this.m_controllerList=null,this.m_controllerCount=0,this.m_gravity.Copy(t)}SetDestructionListener(t){this.m_destructionListener=t}SetContactFilter(t){this.m_contactManager.m_contactFilter=t}SetContactListener(t){this.m_contactManager.m_contactListener=t}SetDebugDraw(t){this.m_debugDraw=t}CreateBody(t={}){if(this.IsLocked())throw new Error;const e=new C.b2Body(t,this);return e.m_prev=null,e.m_next=this.m_bodyList,this.m_bodyList&&(this.m_bodyList.m_prev=e),this.m_bodyList=e,++this.m_bodyCount,e}DestroyBody(t){if(this.IsLocked())throw new Error;let e=t.m_jointList;for(;e;){const i=e;e=e.next,this.m_destructionListener&&this.m_destructionListener.SayGoodbyeJoint(i.joint),this.DestroyJoint(i.joint),t.m_jointList=e}t.m_jointList=null;let i=t.m_controllerList;for(;i;){const e=i;i=i.nextController,e.controller.RemoveBody(t)}let s=t.m_contactList;for(;s;){const t=s;s=s.next,this.m_contactManager.Destroy(t.contact)}t.m_contactList=null;let o=t.m_fixtureList;for(;o;){const e=o;o=o.m_next,this.m_destructionListener&&this.m_destructionListener.SayGoodbyeFixture(e),e.DestroyProxies(),e.Destroy(),t.m_fixtureList=o,t.m_fixtureCount-=1}t.m_fixtureList=null,t.m_fixtureCount=0,t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t===this.m_bodyList&&(this.m_bodyList=t.m_next),--this.m_bodyCount}static _Joint_Create(t,e){switch(t.type){case c.b2JointType.e_distanceJoint:return new h.b2DistanceJoint(t);case c.b2JointType.e_mouseJoint:return new p.b2MouseJoint(t);case c.b2JointType.e_prismaticJoint:return new f.b2PrismaticJoint(t);case c.b2JointType.e_revoluteJoint:return new V.b2RevoluteJoint(t);case c.b2JointType.e_pulleyJoint:return new y.b2PulleyJoint(t);case c.b2JointType.e_gearJoint:return new d.b2GearJoint(t);case c.b2JointType.e_wheelJoint:return new B.b2WheelJoint(t);case c.b2JointType.e_weldJoint:return new S.b2WeldJoint(t);case c.b2JointType.e_frictionJoint:return new u.b2FrictionJoint(t);case c.b2JointType.e_ropeJoint:return new x.b2RopeJoint(t);case c.b2JointType.e_motorJoint:return new b.b2MotorJoint(t);case c.b2JointType.e_areaJoint:return new _.b2AreaJoint(t)}throw new Error}static _Joint_Destroy(t,e){}CreateJoint(t){if(this.IsLocked())throw new Error;const e=D._Joint_Create(t,null);e.m_prev=null,e.m_next=this.m_jointList,this.m_jointList&&(this.m_jointList.m_prev=e),this.m_jointList=e,++this.m_jointCount,e.m_edgeA.prev=null,e.m_edgeA.next=e.m_bodyA.m_jointList,e.m_bodyA.m_jointList&&(e.m_bodyA.m_jointList.prev=e.m_edgeA),e.m_bodyA.m_jointList=e.m_edgeA,e.m_edgeB.prev=null,e.m_edgeB.next=e.m_bodyB.m_jointList,e.m_bodyB.m_jointList&&(e.m_bodyB.m_jointList.prev=e.m_edgeB),e.m_bodyB.m_jointList=e.m_edgeB;const i=t.bodyA,s=t.bodyB;if(!t.collideConnected){let t=s.GetContactList();for(;t;)t.other===i&&t.contact.FlagForFiltering(),t=t.next}return e}DestroyJoint(t){if(this.IsLocked())throw new Error;const e=t.m_collideConnected;t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t===this.m_jointList&&(this.m_jointList=t.m_next);const i=t.m_bodyA,s=t.m_bodyB;if(i.SetAwake(!0),s.SetAwake(!0),t.m_edgeA.prev&&(t.m_edgeA.prev.next=t.m_edgeA.next),t.m_edgeA.next&&(t.m_edgeA.next.prev=t.m_edgeA.prev),t.m_edgeA===i.m_jointList&&(i.m_jointList=t.m_edgeA.next),t.m_edgeA.prev=null,t.m_edgeA.next=null,t.m_edgeB.prev&&(t.m_edgeB.prev.next=t.m_edgeB.next),t.m_edgeB.next&&(t.m_edgeB.next.prev=t.m_edgeB.prev),t.m_edgeB===s.m_jointList&&(s.m_jointList=t.m_edgeB.next),t.m_edgeB.prev=null,t.m_edgeB.next=null,D._Joint_Destroy(t,null),--this.m_jointCount,!e){let t=s.GetContactList();for(;t;)t.other===i&&t.contact.FlagForFiltering(),t=t.next}}CreateParticleSystem(t){if(this.IsLocked())throw new Error;const e=new I.b2ParticleSystem(t,this);return e.m_prev=null,e.m_next=this.m_particleSystemList,this.m_particleSystemList&&(this.m_particleSystemList.m_prev=e),this.m_particleSystemList=e,e}DestroyParticleSystem(t){if(this.IsLocked())throw new Error;t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t===this.m_particleSystemList&&(this.m_particleSystemList=t.m_next)}CalculateReasonableParticleIterations(t){if(null===this.m_particleSystemList)return 1;return P.b2CalculateParticleIterations(this.m_gravity.Length(),function(t){let e=M.b2_maxFloat;for(let i=t.GetParticleSystemList();null!==i;i=i.m_next)e=o.b2Min(e,i.GetRadius());return e}(this),t)}Step(t,e,i,s=this.CalculateReasonableParticleIterations(t)){const o=D.Step_s_stepTimer.Reset();this.m_newFixture&&(this.m_contactManager.FindNewContacts(),this.m_newFixture=!1),this.m_locked=!0;const n=D.Step_s_step;n.dt=t,n.velocityIterations=e,n.positionIterations=i,n.particleIterations=s,n.inv_dt=t>0?1/t:0,n.dtRatio=this.m_inv_dt0*t,n.warmStarting=this.m_warmStarting;const r=D.Step_s_timer.Reset();if(this.m_contactManager.Collide(),this.m_profile.collide=r.GetMilliseconds(),this.m_stepComplete&&n.dt>0){const t=D.Step_s_timer.Reset();for(let t=this.m_particleSystemList;t;t=t.m_next)t.Solve(n);this.Solve(n),this.m_profile.solve=t.GetMilliseconds()}if(this.m_continuousPhysics&&n.dt>0){const t=D.Step_s_timer.Reset();this.SolveTOI(n),this.m_profile.solveTOI=t.GetMilliseconds()}n.dt>0&&(this.m_inv_dt0=n.inv_dt),this.m_clearForces&&this.ClearForces(),this.m_locked=!1,this.m_profile.step=o.GetMilliseconds()}ClearForces(){for(let t=this.m_bodyList;t;t=t.m_next)t.m_force.SetZero(),t.m_torque=0}DrawParticleSystem(t){if(null===this.m_debugDraw)return;const e=t.GetParticleCount();if(e){const i=t.GetRadius(),s=t.GetPositionBuffer();if(t.m_colorBuffer.data){const o=t.GetColorBuffer();this.m_debugDraw.DrawParticles(s,i,o,e)}else this.m_debugDraw.DrawParticles(s,i,null,e)}}DrawDebugData(){if(null===this.m_debugDraw)return;const t=this.m_debugDraw.GetFlags(),e=D.DrawDebugData_s_color.SetRGB(0,0,0);if(t&r.b2DrawFlags.e_shapeBit)for(let t=this.m_bodyList;t;t=t.m_next){const i=t.m_xf;this.m_debugDraw.PushTransform(i);for(let i=t.GetFixtureList();i;i=i.m_next)t.IsActive()?t.GetType()===C.b2BodyType.b2_staticBody?(e.SetRGB(.5,.9,.5),this.DrawShape(i,e)):t.GetType()===C.b2BodyType.b2_kinematicBody?(e.SetRGB(.5,.5,.9),this.DrawShape(i,e)):t.IsAwake()?(e.SetRGB(.9,.7,.7),this.DrawShape(i,e)):(e.SetRGB(.6,.6,.6),this.DrawShape(i,e)):(e.SetRGB(.5,.5,.3),this.DrawShape(i,e));this.m_debugDraw.PopTransform(i)}if(t&r.b2DrawFlags.e_particleBit)for(let t=this.m_particleSystemList;t;t=t.m_next)this.DrawParticleSystem(t);if(t&r.b2DrawFlags.e_jointBit)for(let t=this.m_jointList;t;t=t.m_next)this.DrawJoint(t);if(t&r.b2DrawFlags.e_aabbBit){e.SetRGB(.9,.3,.9);const t=D.DrawDebugData_s_vs;for(let i=this.m_bodyList;i;i=i.m_next)if(i.IsActive())for(let s=i.GetFixtureList();s;s=s.m_next)for(let i=0;i<s.m_proxyCount;++i){const o=s.m_proxies[i].treeNode.aabb;t[0].Set(o.lowerBound.x,o.lowerBound.y),t[1].Set(o.upperBound.x,o.lowerBound.y),t[2].Set(o.upperBound.x,o.upperBound.y),t[3].Set(o.lowerBound.x,o.upperBound.y),this.m_debugDraw.DrawPolygon(t,4,e)}}if(t&r.b2DrawFlags.e_centerOfMassBit)for(let t=this.m_bodyList;t;t=t.m_next){const e=D.DrawDebugData_s_xf;e.q.Copy(t.m_xf.q),e.p.Copy(t.GetWorldCenter()),this.m_debugDraw.DrawTransform(e)}if(t&r.b2DrawFlags.e_controllerBit)for(let t=this.m_controllerList;t;t=t.m_next)t.Draw(this.m_debugDraw)}QueryAABB(t,e,i){if(this.m_contactManager.m_broadPhase.Query(e,e=>{const s=e.userData.fixture;return t?t.ReportFixture(s):!i||i(s)}),t instanceof v.b2QueryCallback)for(let i=this.m_particleSystemList;i;i=i.m_next)t.ShouldQueryParticleSystem(i)&&i.QueryAABB(t,e)}QueryAllAABB(t,e=[]){return this.QueryAABB(null,t,t=>(e.push(t),!0)),e}QueryPointAABB(t,e,i){if(this.m_contactManager.m_broadPhase.QueryPoint(e,e=>{const s=e.userData.fixture;return t?t.ReportFixture(s):!i||i(s)}),t instanceof v.b2QueryCallback)for(let i=this.m_particleSystemList;i;i=i.m_next)t.ShouldQueryParticleSystem(i)&&i.QueryPointAABB(t,e)}QueryAllPointAABB(t,e=[]){return this.QueryPointAABB(null,t,t=>(e.push(t),!0)),e}QueryFixtureShape(t,e,i,s,o){const n=D.QueryFixtureShape_s_aabb;if(e.ComputeAABB(n,s,i),this.m_contactManager.m_broadPhase.Query(n,n=>{const r=n.userData,l=r.fixture;if(a.b2TestOverlapShape(e,i,l.GetShape(),r.childIndex,s,l.GetBody().GetTransform())){if(t)return t.ReportFixture(l);if(o)return o(l)}return!0}),t instanceof v.b2QueryCallback)for(let e=this.m_particleSystemList;e;e=e.m_next)t.ShouldQueryParticleSystem(e)&&e.QueryAABB(t,n)}QueryAllFixtureShape(t,e,i,s=[]){return this.QueryFixtureShape(null,t,e,i,t=>(s.push(t),!0)),s}QueryFixturePoint(t,e,i){if(this.m_contactManager.m_broadPhase.QueryPoint(e,s=>{const o=s.userData.fixture;if(o.TestPoint(e)){if(t)return t.ReportFixture(o);if(i)return i(o)}return!0}),t)for(let i=this.m_particleSystemList;i;i=i.m_next)t.ShouldQueryParticleSystem(i)&&i.QueryPointAABB(t,e)}QueryAllFixturePoint(t,e=[]){return this.QueryFixturePoint(null,t,t=>(e.push(t),!0)),e}RayCast(t,e,i,s){const o=D.RayCast_s_input;if(o.maxFraction=1,o.p1.Copy(e),o.p2.Copy(i),this.m_contactManager.m_broadPhase.RayCast(o,(o,n)=>{const r=n.userData,a=r.fixture,l=r.childIndex,m=D.RayCast_s_output;if(a.RayCast(m,o,l)){const o=m.fraction,n=D.RayCast_s_point;if(n.Set((1-o)*e.x+o*i.x,(1-o)*e.y+o*i.y),t)return t.ReportFixture(a,n,m.normal,o);if(s)return s(a,n,m.normal,o)}return o.maxFraction}),t)for(let s=this.m_particleSystemList;s;s=s.m_next)t.ShouldQueryParticleSystem(s)&&s.RayCast(t,e,i)}RayCastOne(t,e){let i=null,s=1;return this.RayCast(null,t,e,(t,e,o,n)=>(n<s&&(s=n,i=t),s)),i}RayCastAll(t,e,i=[]){return this.RayCast(null,t,e,(t,e,s,o)=>(i.push(t),1)),i}GetBodyList(){return this.m_bodyList}GetJointList(){return this.m_jointList}GetParticleSystemList(){return this.m_particleSystemList}GetContactList(){return this.m_contactManager.m_contactList}SetAllowSleeping(t){if(t!==this.m_allowSleep&&(this.m_allowSleep=t,!this.m_allowSleep))for(let t=this.m_bodyList;t;t=t.m_next)t.SetAwake(!0)}GetAllowSleeping(){return this.m_allowSleep}SetWarmStarting(t){this.m_warmStarting=t}GetWarmStarting(){return this.m_warmStarting}SetContinuousPhysics(t){this.m_continuousPhysics=t}GetContinuousPhysics(){return this.m_continuousPhysics}SetSubStepping(t){this.m_subStepping=t}GetSubStepping(){return this.m_subStepping}GetProxyCount(){return this.m_contactManager.m_broadPhase.GetProxyCount()}GetBodyCount(){return this.m_bodyCount}GetJointCount(){return this.m_jointCount}GetContactCount(){return this.m_contactManager.m_contactCount}GetTreeHeight(){return this.m_contactManager.m_broadPhase.GetTreeHeight()}GetTreeBalance(){return this.m_contactManager.m_broadPhase.GetTreeBalance()}GetTreeQuality(){return this.m_contactManager.m_broadPhase.GetTreeQuality()}SetGravity(t,e=!0){if(!o.b2Vec2.IsEqualToV(this.m_gravity,t)&&(this.m_gravity.Copy(t),e))for(let t=this.m_bodyList;t;t=t.m_next)t.SetAwake(!0)}GetGravity(){return this.m_gravity}IsLocked(){return this.m_locked}SetAutoClearForces(t){this.m_clearForces=t}GetAutoClearForces(){return this.m_clearForces}ShiftOrigin(t){if(this.IsLocked())throw new Error;for(let e=this.m_bodyList;e;e=e.m_next)e.m_xf.p.SelfSub(t),e.m_sweep.c0.SelfSub(t),e.m_sweep.c.SelfSub(t);for(let e=this.m_jointList;e;e=e.m_next)e.ShiftOrigin(t);this.m_contactManager.m_broadPhase.ShiftOrigin(t)}GetContactManager(){return this.m_contactManager}GetProfile(){return this.m_profile}Dump(t){if(this.m_locked)return;t("const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\n",this.m_gravity.x,this.m_gravity.y),t("this.m_world.SetGravity(g);\n"),t("const bodies: b2Body[] = [];\n"),t("const joints: b2Joint[] = [];\n");let e=0;for(let i=this.m_bodyList;i;i=i.m_next)i.m_islandIndex=e,i.Dump(t),++e;e=0;for(let t=this.m_jointList;t;t=t.m_next)t.m_index=e,++e;for(let e=this.m_jointList;e;e=e.m_next)e.m_type!==c.b2JointType.e_gearJoint&&(t("{\n"),e.Dump(t),t("}\n"));for(let e=this.m_jointList;e;e=e.m_next)e.m_type===c.b2JointType.e_gearJoint&&(t("{\n"),e.Dump(t),t("}\n"))}DrawJoint(t){if(null===this.m_debugDraw)return;const e=t.GetBodyA(),i=t.GetBodyB(),s=e.m_xf,o=i.m_xf,n=s.p,r=o.p,a=t.GetAnchorA(D.DrawJoint_s_p1),l=t.GetAnchorB(D.DrawJoint_s_p2),m=D.DrawJoint_s_color.SetRGB(.5,.8,.8);switch(t.m_type){case c.b2JointType.e_distanceJoint:this.m_debugDraw.DrawSegment(a,l,m);break;case c.b2JointType.e_pulleyJoint:{const e=t,i=e.GetGroundAnchorA(),s=e.GetGroundAnchorB();this.m_debugDraw.DrawSegment(i,a,m),this.m_debugDraw.DrawSegment(s,l,m),this.m_debugDraw.DrawSegment(i,s,m);break}case c.b2JointType.e_mouseJoint:{const t=D.DrawJoint_s_c;t.Set(0,1,0),this.m_debugDraw.DrawPoint(a,4,t),this.m_debugDraw.DrawPoint(l,4,t),t.Set(.8,.8,.8),this.m_debugDraw.DrawSegment(a,l,t);break}default:this.m_debugDraw.DrawSegment(n,a,m),this.m_debugDraw.DrawSegment(a,l,m),this.m_debugDraw.DrawSegment(r,l,m)}}DrawShape(t,e){if(null===this.m_debugDraw)return;const i=t.GetShape();switch(i.m_type){case m.b2ShapeType.e_circleShape:{const t=i,s=t.m_p,n=t.m_radius,r=o.b2Vec2.UNITX;this.m_debugDraw.DrawSolidCircle(s,n,r,e);break}case m.b2ShapeType.e_edgeShape:{const t=i,s=t.m_vertex1,o=t.m_vertex2;this.m_debugDraw.DrawSegment(s,o,e);break}case m.b2ShapeType.e_chainShape:{const t=i,s=t.m_count,o=t.m_vertices,n=D.DrawShape_s_ghostColor.SetRGBA(.75*e.r,.75*e.g,.75*e.b,e.a);let r=o[0];if(this.m_debugDraw.DrawPoint(r,4,e),t.m_hasPrevVertex){const e=t.m_prevVertex;this.m_debugDraw.DrawSegment(e,r,n),this.m_debugDraw.DrawCircle(e,.1,n)}for(let t=1;t<s;++t){const i=o[t];this.m_debugDraw.DrawSegment(r,i,e),this.m_debugDraw.DrawPoint(i,4,e),r=i}if(t.m_hasNextVertex){const e=t.m_nextVertex;this.m_debugDraw.DrawSegment(e,r,n),this.m_debugDraw.DrawCircle(e,.1,n)}break}case m.b2ShapeType.e_polygonShape:{const t=i,s=t.m_count,o=t.m_vertices;this.m_debugDraw.DrawSolidPolygon(o,s,e);break}}}Solve(t){for(let t=this.m_bodyList;t;t=t.m_next)t.m_xf0.Copy(t.m_xf);for(let e=this.m_controllerList;e;e=e.m_next)e.Step(t);this.m_profile.solveInit=0,this.m_profile.solveVelocity=0,this.m_profile.solvePosition=0;const e=this.m_island;e.Initialize(this.m_bodyCount,this.m_contactManager.m_contactCount,this.m_jointCount,null,this.m_contactManager.m_contactListener);for(let t=this.m_bodyList;t;t=t.m_next)t.m_islandFlag=!1;for(let t=this.m_contactManager.m_contactList;t;t=t.m_next)t.m_islandFlag=!1;for(let t=this.m_jointList;t;t=t.m_next)t.m_islandFlag=!1;const i=this.s_stack;for(let s=this.m_bodyList;s;s=s.m_next){if(s.m_islandFlag)continue;if(!s.IsAwake()||!s.IsActive())continue;if(s.GetType()===C.b2BodyType.b2_staticBody)continue;e.Clear();let o=0;for(i[o++]=s,s.m_islandFlag=!0;o>0;){const t=i[--o];if(!t)throw new Error;if(e.AddBody(t),t.m_awakeFlag=!0,t.GetType()!==C.b2BodyType.b2_staticBody){for(let s=t.m_contactList;s;s=s.next){const t=s.contact;if(t.m_islandFlag)continue;if(!t.IsEnabled()||!t.IsTouching())continue;const n=t.m_fixtureA.m_isSensor,r=t.m_fixtureB.m_isSensor;if(n||r)continue;e.AddContact(t),t.m_islandFlag=!0;const a=s.other;if(!a)throw new Error;a.m_islandFlag||(i[o++]=a,a.m_islandFlag=!0)}for(let s=t.m_jointList;s;s=s.next){if(s.joint.m_islandFlag)continue;const t=s.other;t.IsActive()&&(e.AddJoint(s.joint),s.joint.m_islandFlag=!0,t.m_islandFlag||(i[o++]=t,t.m_islandFlag=!0))}}}const n=new g.b2Profile;e.Solve(n,t,this.m_gravity,this.m_allowSleep),this.m_profile.solveInit+=n.solveInit,this.m_profile.solveVelocity+=n.solveVelocity,this.m_profile.solvePosition+=n.solvePosition;for(let t=0;t<e.m_bodyCount;++t){const i=e.m_bodies[t];i.GetType()===C.b2BodyType.b2_staticBody&&(i.m_islandFlag=!1)}}for(let t=0;t<i.length&&i[t];++t)i[t]=null;const s=new n.b2Timer;for(let t=this.m_bodyList;t;t=t.m_next)t.m_islandFlag&&t.GetType()!==C.b2BodyType.b2_staticBody&&t.SynchronizeFixtures();this.m_contactManager.FindNewContacts(),this.m_profile.broadphase=s.GetMilliseconds()}SolveTOI(t){const e=this.m_island;if(e.Initialize(2*s.b2_maxTOIContacts,s.b2_maxTOIContacts,0,null,this.m_contactManager.m_contactListener),this.m_stepComplete){for(let t=this.m_bodyList;t;t=t.m_next)t.m_islandFlag=!1,t.m_sweep.alpha0=0;for(let t=this.m_contactManager.m_contactList;t;t=t.m_next)t.m_toiFlag=!1,t.m_islandFlag=!1,t.m_toiCount=0,t.m_toi=1}for(;;){let i=null,n=1;for(let t=this.m_contactManager.m_contactList;t;t=t.m_next){if(!t.IsEnabled())continue;if(t.m_toiCount>s.b2_maxSubSteps)continue;let e=1;if(t.m_toiFlag)e=t.m_toi;else{const i=t.GetFixtureA(),s=t.GetFixtureB();if(i.IsSensor()||s.IsSensor())continue;const n=i.GetBody(),r=s.GetBody(),a=n.m_type,m=r.m_type,c=n.IsAwake()&&a!==C.b2BodyType.b2_staticBody,_=r.IsAwake()&&m!==C.b2BodyType.b2_staticBody;if(!c&&!_)continue;const h=n.IsBullet()||a!==C.b2BodyType.b2_dynamicBody,u=r.IsBullet()||m!==C.b2BodyType.b2_dynamicBody;if(!h&&!u)continue;let d=n.m_sweep.alpha0;n.m_sweep.alpha0<r.m_sweep.alpha0?(d=r.m_sweep.alpha0,n.m_sweep.Advance(d)):r.m_sweep.alpha0<n.m_sweep.alpha0&&(d=n.m_sweep.alpha0,r.m_sweep.Advance(d));const b=t.GetChildIndexA(),p=t.GetChildIndexB(),f=D.SolveTOI_s_toi_input;f.proxyA.SetShape(i.GetShape(),b),f.proxyB.SetShape(s.GetShape(),p),f.sweepA.Copy(n.m_sweep),f.sweepB.Copy(r.m_sweep),f.tMax=1;const y=D.SolveTOI_s_toi_output;l.b2TimeOfImpact(y,f);const V=y.t;e=y.state===l.b2TOIOutputState.e_touching?o.b2Min(d+(1-d)*V,1):1,t.m_toi=e,t.m_toiFlag=!0}e<n&&(i=t,n=e)}if(null===i||1-10*s.b2_epsilon<n){this.m_stepComplete=!0;break}const r=i.GetFixtureA(),a=i.GetFixtureB(),m=r.GetBody(),c=a.GetBody(),_=D.SolveTOI_s_backup1.Copy(m.m_sweep),h=D.SolveTOI_s_backup2.Copy(c.m_sweep);if(m.Advance(n),c.Advance(n),i.Update(this.m_contactManager.m_contactListener),i.m_toiFlag=!1,++i.m_toiCount,!i.IsEnabled()||!i.IsTouching()){i.SetEnabled(!1),m.m_sweep.Copy(_),c.m_sweep.Copy(h),m.SynchronizeTransform(),c.SynchronizeTransform();continue}m.SetAwake(!0),c.SetAwake(!0),e.Clear(),e.AddBody(m),e.AddBody(c),e.AddContact(i),m.m_islandFlag=!0,c.m_islandFlag=!0,i.m_islandFlag=!0;for(let t=0;t<2;++t){const i=0===t?m:c;if(i.m_type===C.b2BodyType.b2_dynamicBody)for(let t=i.m_contactList;t&&e.m_bodyCount!==e.m_bodyCapacity&&e.m_contactCount!==e.m_contactCapacity;t=t.next){const s=t.contact;if(s.m_islandFlag)continue;const o=t.other;if(o.m_type===C.b2BodyType.b2_dynamicBody&&!i.IsBullet()&&!o.IsBullet())continue;const r=s.m_fixtureA.m_isSensor,a=s.m_fixtureB.m_isSensor;if(r||a)continue;const l=D.SolveTOI_s_backup.Copy(o.m_sweep);o.m_islandFlag||o.Advance(n),s.Update(this.m_contactManager.m_contactListener),s.IsEnabled()&&s.IsTouching()?(s.m_islandFlag=!0,e.AddContact(s),o.m_islandFlag||(o.m_islandFlag=!0,o.m_type!==C.b2BodyType.b2_staticBody&&o.SetAwake(!0),e.AddBody(o))):(o.m_sweep.Copy(l),o.SynchronizeTransform())}}const u=D.SolveTOI_s_subStep;u.dt=(1-n)*t.dt,u.inv_dt=1/u.dt,u.dtRatio=1,u.positionIterations=20,u.velocityIterations=t.velocityIterations,u.particleIterations=t.particleIterations,u.warmStarting=!1,e.SolveTOI(u,m.m_islandIndex,c.m_islandIndex);for(let t=0;t<e.m_bodyCount;++t){const i=e.m_bodies[t];if(i.m_islandFlag=!1,i.m_type===C.b2BodyType.b2_dynamicBody){i.SynchronizeFixtures();for(let t=i.m_contactList;t;t=t.next)t.contact.m_toiFlag=!1,t.contact.m_islandFlag=!1}}if(this.m_contactManager.FindNewContacts(),this.m_subStepping){this.m_stepComplete=!1;break}}}AddController(t){return t.m_next=this.m_controllerList,t.m_prev=null,this.m_controllerList&&(this.m_controllerList.m_prev=t),this.m_controllerList=t,++this.m_controllerCount,t}RemoveController(t){return t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),this.m_controllerList===t&&(this.m_controllerList=t.m_next),--this.m_controllerCount,t.m_prev=null,t.m_next=null,t}}D.Step_s_step=new g.b2TimeStep,D.Step_s_stepTimer=new n.b2Timer,D.Step_s_timer=new n.b2Timer,D.DrawDebugData_s_color=new r.b2Color(0,0,0),D.DrawDebugData_s_vs=o.b2Vec2.MakeArray(4),D.DrawDebugData_s_xf=new o.b2Transform,D.QueryFixtureShape_s_aabb=new a.b2AABB,D.RayCast_s_input=new a.b2RayCastInput,D.RayCast_s_output=new a.b2RayCastOutput,D.RayCast_s_point=new o.b2Vec2,D.DrawJoint_s_p1=new o.b2Vec2,D.DrawJoint_s_p2=new o.b2Vec2,D.DrawJoint_s_color=new r.b2Color(.5,.8,.8),D.DrawJoint_s_c=new r.b2Color,D.DrawShape_s_ghostColor=new r.b2Color,D.SolveTOI_s_subStep=new g.b2TimeStep,D.SolveTOI_s_backup=new o.b2Sweep,D.SolveTOI_s_backup1=new o.b2Sweep,D.SolveTOI_s_backup2=new o.b2Sweep,D.SolveTOI_s_toi_input=new l.b2TOIInput,D.SolveTOI_s_toi_output=new l.b2TOIOutput,e.b2World=D},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(62);class r{constructor(t){this.m_generatorCapacity=0,this.m_generatorCount=0,this.m_countX=0,this.m_countY=0,this.m_diagram=[],this.m_generatorBuffer=s.b2MakeArray(t,t=>new r.Generator),this.m_generatorCapacity=t}AddGenerator(t,e,i){const s=this.m_generatorBuffer[this.m_generatorCount++];s.center.Copy(t),s.tag=e,s.necessary=i}Generate(t,e){const i=1/t,a=new o.b2Vec2(+s.b2_maxFloat,+s.b2_maxFloat),l=new o.b2Vec2(-s.b2_maxFloat,-s.b2_maxFloat);let m=0;for(let t=0;t<this.m_generatorCount;t++){const e=this.m_generatorBuffer[t];e.necessary&&(o.b2Vec2.MinV(a,e.center,a),o.b2Vec2.MaxV(l,e.center,l),++m)}if(0===m)return this.m_countX=0,void(this.m_countY=0);a.x-=e,a.y-=e,l.x+=e,l.y+=e,this.m_countX=1+Math.floor(i*(l.x-a.x)),this.m_countY=1+Math.floor(i*(l.y-a.y)),this.m_diagram=[];const c=new n.b2StackQueue(4*this.m_countX*this.m_countY);for(let t=0;t<this.m_generatorCount;t++){const e=this.m_generatorBuffer[t];e.center.SelfSub(a).SelfMul(i);const s=Math.floor(e.center.x),o=Math.floor(e.center.y);s>=0&&o>=0&&s<this.m_countX&&o<this.m_countY&&c.Push(new r.Task(s,o,s+o*this.m_countX,e))}for(;!c.Empty();){const t=c.Front(),e=t.m_x,i=t.m_y,s=t.m_i,o=t.m_generator;c.Pop(),this.m_diagram[s]||(this.m_diagram[s]=o,e>0&&c.Push(new r.Task(e-1,i,s-1,o)),i>0&&c.Push(new r.Task(e,i-1,s-this.m_countX,o)),e<this.m_countX-1&&c.Push(new r.Task(e+1,i,s+1,o)),i<this.m_countY-1&&c.Push(new r.Task(e,i+1,s+this.m_countX,o)))}for(let t=0;t<this.m_countY;t++)for(let e=0;e<this.m_countX-1;e++){const i=e+t*this.m_countX,s=this.m_diagram[i],o=this.m_diagram[i+1];s!==o&&(c.Push(new r.Task(e,t,i,o)),c.Push(new r.Task(e+1,t,i+1,s)))}for(let t=0;t<this.m_countY-1;t++)for(let e=0;e<this.m_countX;e++){const i=e+t*this.m_countX,s=this.m_diagram[i],o=this.m_diagram[i+this.m_countX];s!==o&&(c.Push(new r.Task(e,t,i,o)),c.Push(new r.Task(e,t+1,i+this.m_countX,s)))}for(;!c.Empty();){const t=c.Front(),e=t.m_x,i=t.m_y,s=t.m_i,o=t.m_generator;c.Pop();const n=this.m_diagram[s],a=o;if(n!==a){const t=n.center.x-e,o=n.center.y-i,l=a.center.x-e,m=a.center.y-i;t*t+o*o>l*l+m*m&&(this.m_diagram[s]=a,e>0&&c.Push(new r.Task(e-1,i,s-1,a)),i>0&&c.Push(new r.Task(e,i-1,s-this.m_countX,a)),e<this.m_countX-1&&c.Push(new r.Task(e+1,i,s+1,a)),i<this.m_countY-1&&c.Push(new r.Task(e,i+1,s+this.m_countX,a)))}}}GetNodes(t){for(let e=0;e<this.m_countY-1;e++)for(let i=0;i<this.m_countX-1;i++){const s=i+e*this.m_countX,o=this.m_diagram[s],n=this.m_diagram[s+1],r=this.m_diagram[s+this.m_countX],a=this.m_diagram[s+1+this.m_countX];n!==r&&(o!==n&&o!==r&&(o.necessary||n.necessary||r.necessary)&&t(o.tag,n.tag,r.tag),a!==n&&a!==r&&(o.necessary||n.necessary||r.necessary)&&t(n.tag,a.tag,r.tag))}}}e.b2VoronoiDiagram=r,function(t){t.Generator=class{constructor(){this.center=new o.b2Vec2,this.tag=0,this.necessary=!1}};t.Task=class{constructor(t,e,i,s){this.m_x=t,this.m_y=e,this.m_i=i,this.m_generator=s}}}(r=e.b2VoronoiDiagram||(e.b2VoronoiDiagram={}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0);e.b2StackQueue=class{constructor(t){this.m_front=0,this.m_back=0,this.m_capacity=0,this.m_buffer=s.b2MakeArray(t,t=>null),this.m_capacity=t}Push(t){if(this.m_back>=this.m_capacity){for(let t=this.m_front;t<this.m_back;t++)this.m_buffer[t-this.m_front]=this.m_buffer[t];this.m_back-=this.m_front,this.m_front=0,this.m_back>=this.m_capacity&&(this.m_capacity>0?(this.m_buffer.concat(s.b2MakeArray(this.m_capacity,t=>null)),this.m_capacity*=2):(this.m_buffer.concat(s.b2MakeArray(1,t=>null)),this.m_capacity=1))}this.m_buffer[this.m_back]=t,this.m_back++}Pop(){this.m_buffer[this.m_front]=null,this.m_front++}Empty(){return this.m_front===this.m_back}Front(){const t=this.m_buffer[this.m_front];if(!t)throw new Error;return t}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(8),o=i(1),n=i(0),r=i(7);e.b2BuoyancyController=class extends s.b2Controller{constructor(){super(...arguments),this.normal=new o.b2Vec2(0,1),this.offset=0,this.density=0,this.velocity=new o.b2Vec2(0,0),this.linearDrag=0,this.angularDrag=0,this.useDensity=!1,this.useWorldGravity=!0,this.gravity=new o.b2Vec2(0,0)}Step(t){if(this.m_bodyList){this.useWorldGravity&&this.gravity.Copy(this.m_bodyList.body.GetWorld().GetGravity());for(let t=this.m_bodyList;t;t=t.nextBody){const e=t.body;if(!e.IsAwake())continue;const i=new o.b2Vec2,s=new o.b2Vec2;let r=0,a=0;for(let t=e.GetFixtureList();t;t=t.m_next){const n=new o.b2Vec2,l=t.GetShape().ComputeSubmergedArea(this.normal,this.offset,e.GetTransform(),n);r+=l,i.x+=l*n.x,i.y+=l*n.y;let m=0;a+=l*(m=this.useDensity?t.GetDensity():1),s.x+=l*n.x*m,s.y+=l*n.y*m}if(i.x/=r,i.y/=r,s.x/=a,s.y/=a,r<n.b2_epsilon)continue;const l=this.gravity.Clone().SelfNeg();l.SelfMul(this.density*r),e.ApplyForce(l,s);const m=e.GetLinearVelocityFromWorldPoint(i,new o.b2Vec2);m.SelfSub(this.velocity),m.SelfMul(-this.linearDrag*r),e.ApplyForce(m,i),e.ApplyTorque(-e.GetInertia()/e.GetMass()*r*e.GetAngularVelocity()*this.angularDrag)}}}Draw(t){const e=100,i=new o.b2Vec2,s=new o.b2Vec2;i.x=this.normal.x*this.offset+this.normal.y*e,i.y=this.normal.y*this.offset-this.normal.x*e,s.x=this.normal.x*this.offset-this.normal.y*e,s.y=this.normal.y*this.offset+this.normal.x*e;const n=new r.b2Color(0,0,.8);t.DrawSegment(i,s,n)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(8),o=i(1);class n extends s.b2Controller{constructor(){super(...arguments),this.A=new o.b2Vec2(0,0)}Step(t){const e=o.b2Vec2.MulSV(t.dt,this.A,n.Step_s_dtA);for(let t=this.m_bodyList;t;t=t.nextBody){const i=t.body;i.IsAwake()&&i.SetLinearVelocity(o.b2Vec2.AddVV(i.GetLinearVelocity(),e,o.b2Vec2.s_t0))}}Draw(t){}}n.Step_s_dtA=new o.b2Vec2,e.b2ConstantAccelController=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(8),o=i(1);e.b2ConstantForceController=class extends s.b2Controller{constructor(){super(...arguments),this.F=new o.b2Vec2(0,0)}Step(t){for(let t=this.m_bodyList;t;t=t.nextBody){const e=t.body;e.IsAwake()&&e.ApplyForce(this.F,e.GetWorldCenter())}}Draw(t){}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(8),o=i(0),n=i(1);class r extends s.b2Controller{constructor(){super(...arguments),this.G=1,this.invSqr=!0}Step(t){if(this.invSqr)for(let t=this.m_bodyList;t;t=t.nextBody){const e=t.body,i=e.GetWorldCenter(),s=e.GetMass();for(let a=this.m_bodyList;a&&a!==t;a=a.nextBody){const t=a.body,l=t.GetWorldCenter(),m=t.GetMass(),c=l.x-i.x,_=l.y-i.y,h=c*c+_*_;if(h<o.b2_epsilon)continue;const u=r.Step_s_f.Set(c,_);u.SelfMul(this.G/h/n.b2Sqrt(h)*s*m),e.IsAwake()&&e.ApplyForce(u,i),t.IsAwake()&&t.ApplyForce(u.SelfMul(-1),l)}}else for(let t=this.m_bodyList;t;t=t.nextBody){const e=t.body,i=e.GetWorldCenter(),s=e.GetMass();for(let n=this.m_bodyList;n&&n!==t;n=n.nextBody){const t=n.body,a=t.GetWorldCenter(),l=t.GetMass(),m=a.x-i.x,c=a.y-i.y,_=m*m+c*c;if(_<o.b2_epsilon)continue;const h=r.Step_s_f.Set(m,c);h.SelfMul(this.G/_*s*l),e.IsAwake()&&e.ApplyForce(h,i),t.IsAwake()&&t.ApplyForce(h.SelfMul(-1),a)}}}Draw(t){}}r.Step_s_f=new n.b2Vec2,e.b2GravityController=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(8),o=i(1),n=i(0);class r extends s.b2Controller{constructor(){super(...arguments),this.T=new o.b2Mat22,this.maxTimestep=0}Step(t){let e=t.dt;if(!(e<=n.b2_epsilon)){e>this.maxTimestep&&this.maxTimestep>0&&(e=this.maxTimestep);for(let t=this.m_bodyList;t;t=t.nextBody){const i=t.body;if(!i.IsAwake())continue;const s=i.GetWorldVector(o.b2Mat22.MulMV(this.T,i.GetLocalVector(i.GetLinearVelocity(),o.b2Vec2.s_t0),o.b2Vec2.s_t1),r.Step_s_damping);i.SetLinearVelocity(o.b2Vec2.AddVV(i.GetLinearVelocity(),o.b2Vec2.MulSV(e,s,o.b2Vec2.s_t0),o.b2Vec2.s_t1))}}}Draw(t){}SetAxisAligned(t,e){this.T.ex.x=-t,this.T.ex.y=0,this.T.ey.x=0,this.T.ey.y=-e,this.maxTimestep=t>0||e>0?1/o.b2Max(t,e):0}}r.Step_s_damping=new o.b2Vec2,e.b2TensorDampingController=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),o=i(1),n=i(7);e.b2RopeDef=class{constructor(){this.vertices=[],this.count=0,this.masses=[],this.gravity=new o.b2Vec2(0,0),this.damping=.1,this.k2=.9,this.k3=.1}};class r{constructor(){this.m_count=0,this.m_ps=[],this.m_p0s=[],this.m_vs=[],this.m_ims=[],this.m_Ls=[],this.m_as=[],this.m_gravity=new o.b2Vec2,this.m_damping=0,this.m_k2=1,this.m_k3=.1}GetVertexCount(){return this.m_count}GetVertices(){return this.m_ps}Initialize(t){this.m_count=t.count,this.m_ps=o.b2Vec2.MakeArray(this.m_count),this.m_p0s=o.b2Vec2.MakeArray(this.m_count),this.m_vs=o.b2Vec2.MakeArray(this.m_count),this.m_ims=s.b2MakeNumberArray(this.m_count);for(let e=0;e<this.m_count;++e){this.m_ps[e].Copy(t.vertices[e]),this.m_p0s[e].Copy(t.vertices[e]),this.m_vs[e].SetZero();const i=t.masses[e];this.m_ims[e]=i>0?1/i:0}const e=this.m_count-1,i=this.m_count-2;this.m_Ls=s.b2MakeNumberArray(e),this.m_as=s.b2MakeNumberArray(i);for(let t=0;t<e;++t){const e=this.m_ps[t],i=this.m_ps[t+1];this.m_Ls[t]=o.b2Vec2.DistanceVV(e,i)}for(let t=0;t<i;++t){const e=this.m_ps[t],i=this.m_ps[t+1],s=this.m_ps[t+2],n=o.b2Vec2.SubVV(i,e,o.b2Vec2.s_t0),r=o.b2Vec2.SubVV(s,i,o.b2Vec2.s_t1),a=o.b2Vec2.CrossVV(n,r),l=o.b2Vec2.DotVV(n,r);this.m_as[t]=o.b2Atan2(a,l)}this.m_gravity.Copy(t.gravity),this.m_damping=t.damping,this.m_k2=t.k2,this.m_k3=t.k3}Step(t,e){if(0===t)return;const i=Math.exp(-t*this.m_damping);for(let e=0;e<this.m_count;++e)this.m_p0s[e].Copy(this.m_ps[e]),this.m_ims[e]>0&&this.m_vs[e].SelfMulAdd(t,this.m_gravity),this.m_vs[e].SelfMul(i),this.m_ps[e].SelfMulAdd(t,this.m_vs[e]);for(let t=0;t<e;++t)this.SolveC2(),this.SolveC3(),this.SolveC2();const s=1/t;for(let t=0;t<this.m_count;++t)o.b2Vec2.MulSV(s,o.b2Vec2.SubVV(this.m_ps[t],this.m_p0s[t],o.b2Vec2.s_t0),this.m_vs[t])}SolveC2(){const t=this.m_count-1;for(let e=0;e<t;++e){const t=this.m_ps[e],i=this.m_ps[e+1],s=o.b2Vec2.SubVV(i,t,r.s_d),n=s.Normalize(),a=this.m_ims[e],l=this.m_ims[e+1];if(a+l===0)continue;const m=a/(a+l),c=l/(a+l);t.SelfMulSub(this.m_k2*m*(this.m_Ls[e]-n),s),i.SelfMulAdd(this.m_k2*c*(this.m_Ls[e]-n),s)}}SetAngle(t){const e=this.m_count-2;for(let i=0;i<e;++i)this.m_as[i]=t}SolveC3(){const t=this.m_count-2;for(let e=0;e<t;++e){const t=this.m_ps[e],i=this.m_ps[e+1],n=this.m_ps[e+2],a=this.m_ims[e],l=this.m_ims[e+1],m=this.m_ims[e+2],c=o.b2Vec2.SubVV(i,t,r.s_d1),_=o.b2Vec2.SubVV(n,i,r.s_d2),h=c.LengthSquared(),u=_.LengthSquared();if(h*u==0)continue;const d=o.b2Vec2.CrossVV(c,_),b=o.b2Vec2.DotVV(c,_);let p=o.b2Atan2(d,b);const f=o.b2Vec2.MulSV(-1/h,c.SelfSkew(),r.s_Jd1),y=o.b2Vec2.MulSV(1/u,_.SelfSkew(),r.s_Jd2),V=o.b2Vec2.NegV(f,r.s_J1),x=o.b2Vec2.SubVV(f,y,r.s_J2),S=y;let B=a*o.b2Vec2.DotVV(V,V)+l*o.b2Vec2.DotVV(x,x)+m*o.b2Vec2.DotVV(S,S);if(0===B)continue;B=1/B;let C=p-this.m_as[e];for(;C>s.b2_pi;)C=(p-=2*s.b2_pi)-this.m_as[e];for(;C<-s.b2_pi;)C=(p+=2*s.b2_pi)-this.m_as[e];const A=-this.m_k3*B*C;t.SelfMulAdd(a*A,V),i.SelfMulAdd(l*A,x),n.SelfMulAdd(m*A,S)}}Draw(t){const e=new n.b2Color(.4,.5,.7);for(let i=0;i<this.m_count-1;++i)t.DrawSegment(this.m_ps[i],this.m_ps[i+1],e)}}r.s_d=new o.b2Vec2,r.s_d1=new o.b2Vec2,r.s_d2=new o.b2Vec2,r.s_Jd1=new o.b2Vec2,r.s_Jd2=new o.b2Vec2,r.s_J1=new o.b2Vec2,r.s_J2=new o.b2Vec2,e.b2Rope=r},function(t,e,i){"use strict";var s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(6));e.EmittedParticleCallback=class{ParticleCreated(t,e){}};class n{constructor(){this.m_particleSystem=null,this.m_callback=null,this.m_origin=new o.b2Vec2,this.m_startingVelocity=new o.b2Vec2,this.m_speed=0,this.m_halfSize=new o.b2Vec2,this.m_emitRate=1,this.m_color=new o.b2Color,this.m_emitRemainder=0,this.m_flags=o.b2ParticleFlag.b2_waterParticle,this.m_group=null}static Random(){return Math.random()}__dtor__(){this.SetGroup(null)}SetPosition(t){this.m_origin.Copy(t)}GetPosition(t){return t.Copy(this.m_origin)}SetSize(t){this.m_halfSize.Copy(t).SelfMul(.5)}GetSize(t){return t.Copy(this.m_halfSize).SelfMul(2)}SetVelocity(t){this.m_startingVelocity.Copy(t)}GetVelocity(t){return t.Copy(this.m_startingVelocity)}SetSpeed(t){this.m_speed=t}GetSpeed(){return this.m_speed}SetParticleFlags(t){this.m_flags=t}GetParticleFlags(){return this.m_flags}SetColor(t){this.m_color.Copy(t)}GetColor(t){return t.Copy(this.m_color)}SetEmitRate(t){this.m_emitRate=t}GetEmitRate(){return this.m_emitRate}SetParticleSystem(t){this.m_particleSystem=t}GetParticleSystem(){return this.m_particleSystem}SetCallback(t){this.m_callback=t}GetCallback(){return this.m_callback}SetGroup(t){this.m_group&&this.m_group.SetGroupFlags(this.m_group.GetGroupFlags()&~o.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty),this.m_group=t,this.m_group&&this.m_group.SetGroupFlags(this.m_group.GetGroupFlags()|o.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty)}GetGroup(){return this.m_group}Step(t,e,i=(e?e.length:0)){if(null===this.m_particleSystem)throw new Error;let s=0;this.m_emitRemainder+=this.m_emitRate*t;const r=new o.b2ParticleDef;for(r.color.Copy(this.m_color),r.flags=this.m_flags,r.group=this.m_group;this.m_emitRemainder>1;){this.m_emitRemainder-=1;const t=2*n.Random()*o.b2_pi,a=n.Random(),l=new o.b2Vec2(Math.sin(t),Math.cos(t));r.position.Set(this.m_origin.x+l.x*a*this.m_halfSize.x,this.m_origin.y+l.y*a*this.m_halfSize.y),r.velocity.Copy(this.m_startingVelocity),0!==this.m_speed&&r.velocity.SelfMulAdd(this.m_speed,l);const m=this.m_particleSystem.CreateParticle(r);this.m_callback&&this.m_callback.ParticleCreated(this.m_particleSystem,m),e&&s<i&&(e[s]=m),++s}return s}}e.RadialEmitter=n},function(t,e,i){"use strict";var s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(6)),n=i(22),r=i(16),a=i(71);e.Main=class{constructor(t){this.m_time_last=0,this.m_fps_time=0,this.m_fps_frames=0,this.m_fps=0,this.m_settings=new n.Settings,this.m_test_index=0,this.m_shift=!1,this.m_ctrl=!1,this.m_lMouseDown=!1,this.m_rMouseDown=!1,this.m_projection0=new o.b2Vec2,this.m_viewCenter0=new o.b2Vec2,this.m_demo_mode=!1,this.m_demo_time=0,this.m_max_demo_time=1e4,this.m_ctx=null,this.m_mouse=new o.b2Vec2;const e=this.m_fps_div=document.body.appendChild(document.createElement("div"));e.style.position="absolute",e.style.left="0px",e.style.bottom="0px",e.style.backgroundColor="rgba(0,0,255,0.75)",e.style.color="white",e.style.font="10pt Courier New",e.style.zIndex="256",e.innerHTML="FPS";const i=this.m_debug_div=document.body.appendChild(document.createElement("div"));i.style.position="absolute",i.style.left="0px",i.style.bottom="0px",i.style.backgroundColor="rgba(0,0,255,0.75)",i.style.color="white",i.style.font="10pt Courier New",i.style.zIndex="256",i.innerHTML="",document.body.style.backgroundColor="black";const s=document.body.appendChild(document.createElement("div"));function l(){s.style.width=window.innerWidth+"px",s.style.height=window.innerHeight+"px"}s.style.position="absolute",s.style.left="0px",s.style.top="0px",window.addEventListener("resize",t=>{l()}),window.addEventListener("orientationchange",t=>{l()}),l();const m=s.appendChild(document.createElement("div"));m.style.textAlign="center",m.style.color="grey",m.innerHTML="Box2D Testbed version "+o.b2_version+"<br>(branch: "+o.b2_branch+" commit: "+o.b2_commit+")";const c=s.appendChild(document.createElement("div")),_=this.m_canvas_div=c.appendChild(document.createElement("div"));_.style.position="absolute",_.style.left="0px",_.style.right="0px",_.style.top="0px",_.style.bottom="0px";const h=this.m_canvas_2d=_.appendChild(document.createElement("canvas"));function u(){h.width!==_.clientWidth&&(r.g_camera.m_width=h.width=_.clientWidth),h.height!==_.clientHeight&&(r.g_camera.m_height=h.height=_.clientHeight)}window.addEventListener("resize",t=>{u()}),window.addEventListener("orientationchange",t=>{u()}),u(),r.g_debugDraw.m_ctx=this.m_ctx=this.m_canvas_2d.getContext("2d");const d=c.appendChild(document.createElement("div"));d.style.position="absolute",d.style.backgroundColor="rgba(255,255,255,0.5)",d.style.padding="8px",d.style.right="0px",d.style.top="0px",d.style.bottom="0px",d.style.overflowY="scroll",d.appendChild(document.createTextNode("Tests")),d.appendChild(document.createElement("br"));const b=document.createElement("select");for(let t=0;t<a.g_testEntries.length;++t){const e=document.createElement("option");e.text=a.g_testEntries[t].name,e.value=t.toString(),b.add(e)}function p(t,e,i,s,o,n,r){const a=t.appendChild(document.createElement("tr")),l=a.appendChild(document.createElement("td"));l.align="right",l.appendChild(document.createTextNode(e));const m=a.appendChild(document.createElement("td")),c=document.createElement("input");return c.size=8,c.min=o.toString(),c.max=n.toString(),c.step=r.toString(),c.value=i.toString(),c.addEventListener("change",t=>{s(parseInt(c.value,10))}),m.appendChild(c),c}b.selectedIndex=this.m_test_index,b.addEventListener("change",t=>{this.m_test_index=b.selectedIndex,this.LoadTest()}),d.appendChild(b),this.m_test_select=b,d.appendChild(document.createElement("br")),d.appendChild(document.createElement("hr"));const f=d.appendChild(document.createElement("table"));function y(t,e,i,s){const o=document.createElement("input");return o.type="checkbox",o.checked=i,o.addEventListener("click",t=>{s(o.checked)}),t.appendChild(o),t.appendChild(document.createTextNode(e)),t.appendChild(document.createElement("br")),o}p(f,"Vel Iters",this.m_settings.velocityIterations,t=>{this.m_settings.velocityIterations=t},1,20,1),p(f,"Pos Iters",this.m_settings.positionIterations,t=>{this.m_settings.positionIterations=t},1,20,1),p(f,"Pcl Iters",this.m_settings.particleIterations,t=>{this.m_settings.particleIterations=t},1,100,1),p(f,"Hertz",this.m_settings.hz,t=>{this.m_settings.hz=t},10,120,1),y(d,"Sleep",this.m_settings.enableSleep,t=>{this.m_settings.enableSleep=t}),y(d,"Warm Starting",this.m_settings.enableWarmStarting,t=>{this.m_settings.enableWarmStarting=t}),y(d,"Time of Impact",this.m_settings.enableContinuous,t=>{this.m_settings.enableContinuous=t}),y(d,"Sub-Stepping",this.m_settings.enableSubStepping,t=>{this.m_settings.enableSubStepping=t}),y(d,"Strict Particle/Body Contacts",this.m_settings.strictContacts,t=>{this.m_settings.strictContacts=t});const V=d.appendChild(document.createElement("fieldset"));function x(t,e,i){const s=document.createElement("input");return s.type="button",s.style.width="120",s.value=e,s.addEventListener("click",i),t.appendChild(s),t.appendChild(document.createElement("br")),s}V.appendChild(document.createElement("legend")).appendChild(document.createTextNode("Draw")),y(V,"Shapes",this.m_settings.drawShapes,t=>{this.m_settings.drawShapes=t}),y(V,"Particles",this.m_settings.drawParticles,t=>{this.m_settings.drawParticles=t}),y(V,"Joints",this.m_settings.drawJoints,t=>{this.m_settings.drawJoints=t}),y(V,"AABBs",this.m_settings.drawAABBs,t=>{this.m_settings.drawAABBs=t}),y(V,"Contact Points",this.m_settings.drawContactPoints,t=>{this.m_settings.drawContactPoints=t}),y(V,"Contact Normals",this.m_settings.drawContactNormals,t=>{this.m_settings.drawContactNormals=t}),y(V,"Contact Impulses",this.m_settings.drawContactImpulse,t=>{this.m_settings.drawContactImpulse=t}),y(V,"Friction Impulses",this.m_settings.drawFrictionImpulse,t=>{this.m_settings.drawFrictionImpulse=t}),y(V,"Center of Masses",this.m_settings.drawCOMs,t=>{this.m_settings.drawCOMs=t}),y(V,"Statistics",this.m_settings.drawStats,t=>{this.m_settings.drawStats=t}),y(V,"Profile",this.m_settings.drawProfile,t=>{this.m_settings.drawProfile=t});const S=d.appendChild(document.createElement("div"));S.align="center",x(S,"Pause (P)",t=>{this.Pause()}),x(S,"Single Step (O)",t=>{this.SingleStep()}),x(S,"Restart (R)",t=>{this.LoadTest()}),this.m_demo_button=x(S,"Demo",t=>{this.ToggleDemo()}),window.addEventListener("contextmenu",t=>{t.preventDefault()},!0),_.addEventListener("mousemove",t=>{this.HandleMouseMove(t)}),_.addEventListener("mousedown",t=>{this.HandleMouseDown(t)}),_.addEventListener("mouseup",t=>{this.HandleMouseUp(t)}),_.addEventListener("mousewheel",t=>{this.HandleMouseWheel(t)}),_.addEventListener("touchmove",t=>{this.HandleTouchMove(t)}),_.addEventListener("touchstart",t=>{this.HandleTouchStart(t)}),_.addEventListener("touchend",t=>{this.HandleTouchEnd(t)}),window.addEventListener("keydown",t=>{this.HandleKeyDown(t)}),window.addEventListener("keyup",t=>{this.HandleKeyUp(t)}),this.LoadTest(),this.m_time_last=t}HomeCamera(){r.g_camera.m_zoom=this.m_test?this.m_test.GetDefaultViewZoom():1,r.g_camera.m_center.Set(0,20*r.g_camera.m_zoom)}MoveCamera(t){const e=r.g_camera.m_center.Clone();e.SelfAdd(t),r.g_camera.m_center.Copy(e)}ZoomCamera(t){r.g_camera.m_zoom*=t,r.g_camera.m_zoom=o.b2Clamp(r.g_camera.m_zoom,.02,20)}HandleMouseMove(t){const e=new o.b2Vec2(t.clientX,t.clientY),i=r.g_camera.ConvertScreenToWorld(e,new o.b2Vec2);if(this.m_mouse.Copy(e),this.m_lMouseDown&&this.m_test&&this.m_test.MouseMove(i),this.m_rMouseDown){const t=r.g_camera.ConvertElementToProjection(e,new o.b2Vec2),i=o.b2Vec2.SubVV(t,this.m_projection0,new o.b2Vec2),s=o.b2Vec2.SubVV(this.m_viewCenter0,i,new o.b2Vec2);r.g_camera.m_center.Copy(s)}}HandleMouseDown(t){const e=new o.b2Vec2(t.clientX,t.clientY),i=r.g_camera.ConvertScreenToWorld(e,new o.b2Vec2);switch(t.which){case 1:this.m_lMouseDown=!0,this.m_shift?this.m_test&&this.m_test.ShiftMouseDown(i):this.m_test&&this.m_test.MouseDown(i);break;case 3:this.m_rMouseDown=!0;const s=r.g_camera.ConvertElementToProjection(e,new o.b2Vec2);this.m_projection0.Copy(s),this.m_viewCenter0.Copy(r.g_camera.m_center)}}HandleMouseUp(t){const e=new o.b2Vec2(t.clientX,t.clientY),i=r.g_camera.ConvertScreenToWorld(e,new o.b2Vec2);switch(t.which){case 1:this.m_lMouseDown=!1,this.m_test&&this.m_test.MouseUp(i);break;case 3:this.m_rMouseDown=!1}}HandleTouchMove(t){const e=new o.b2Vec2(t.touches[0].clientX,t.touches[0].clientY),i=r.g_camera.ConvertScreenToWorld(e,new o.b2Vec2);this.m_test&&this.m_test.MouseMove(i),t.preventDefault()}HandleTouchStart(t){const e=new o.b2Vec2(t.touches[0].clientX,t.touches[0].clientY),i=r.g_camera.ConvertScreenToWorld(e,new o.b2Vec2);this.m_test&&this.m_test.MouseDown(i),t.preventDefault()}HandleTouchEnd(t){this.m_test&&this.m_test.MouseUp(this.m_test.m_mouseWorld),t.preventDefault()}HandleMouseWheel(t){t.wheelDelta>0?this.ZoomCamera(1/1.1):t.wheelDelta<0&&this.ZoomCamera(1.1),t.preventDefault()}HandleKeyDown(t){switch(t.key){case"Control":this.m_ctrl=!0;break;case"Shift":this.m_shift=!0;break;case"ArrowLeft":this.m_ctrl?this.m_test&&this.m_test.ShiftOrigin(new o.b2Vec2(2,0)):this.MoveCamera(new o.b2Vec2(-.5,0));break;case"ArrowRight":this.m_ctrl?this.m_test&&this.m_test.ShiftOrigin(new o.b2Vec2(-2,0)):this.MoveCamera(new o.b2Vec2(.5,0));break;case"ArrowDown":this.m_ctrl?this.m_test&&this.m_test.ShiftOrigin(new o.b2Vec2(0,2)):this.MoveCamera(new o.b2Vec2(0,-.5));break;case"ArrowUp":this.m_ctrl?this.m_test&&this.m_test.ShiftOrigin(new o.b2Vec2(0,-2)):this.MoveCamera(new o.b2Vec2(0,.5));break;case"Home":this.HomeCamera();break;case"z":this.ZoomCamera(1.1);break;case"x":this.ZoomCamera(.9);break;case"r":this.LoadTest();break;case" ":this.m_test&&this.m_test.LaunchBomb();break;case"o":this.SingleStep();break;case"p":this.Pause();break;case"[":this.DecrementTest();break;case"]":this.IncrementTest();break;case",":this.m_shift&&n.Test.particleParameter.Decrement();break;case".":this.m_shift&&n.Test.particleParameter.Increment()}this.m_test&&this.m_test.Keyboard(t.key)}HandleKeyUp(t){switch(t.key){case"Control":this.m_ctrl=!1;break;case"Shift":this.m_shift=!1}this.m_test&&this.m_test.KeyboardUp(t.key)}UpdateTest(t){if(this.m_demo_mode){this.m_demo_time+=t,this.m_demo_time>this.m_max_demo_time&&this.IncrementTest();const e=((500+this.m_max_demo_time-this.m_demo_time)/1e3).toFixed(0).toString();this.m_demo_button.value=e}else this.m_demo_button.value="Demo"}DecrementTest(){this.m_test_index<=0&&(this.m_test_index=a.g_testEntries.length),this.m_test_index--,this.m_test_select.selectedIndex=this.m_test_index,this.LoadTest()}IncrementTest(){this.m_test_index++,this.m_test_index>=a.g_testEntries.length&&(this.m_test_index=0),this.m_test_select.selectedIndex=this.m_test_index,this.LoadTest()}LoadTest(t=!1){n.Test.fullscreenUI.Reset(),t||n.Test.particleParameter.Reset(),this.m_demo_time=0,this.m_test&&this.m_test.RestoreParticleParameters(),this.m_test=a.g_testEntries[this.m_test_index].createFcn(),t||this.HomeCamera()}Pause(){this.m_settings.pause=!this.m_settings.pause}SingleStep(){this.m_settings.pause=!0,this.m_settings.singleStep=!0}ToggleDemo(){this.m_demo_mode=!this.m_demo_mode}SimulationLoop(t){this.m_time_last=this.m_time_last||t;let e=t-this.m_time_last;if(this.m_time_last=t,e>1e3&&(e=1e3),this.m_fps_time+=e,this.m_fps_frames++,this.m_fps_time>=500&&(this.m_fps=1e3*this.m_fps_frames/this.m_fps_time,this.m_fps_frames=0,this.m_fps_time=0,this.m_fps_div.innerHTML=this.m_fps.toFixed(1).toString()),e>0){const t=this.m_ctx,i=[!1];if(t){t.clearRect(0,0,t.canvas.width,t.canvas.height),t.save(),t.translate(.5*t.canvas.width,.5*t.canvas.height),t.scale(1,-1);const e=.5*r.g_camera.m_height/r.g_camera.m_extent;t.scale(e,e),t.lineWidth/=e,t.scale(1/r.g_camera.m_zoom,1/r.g_camera.m_zoom),t.lineWidth*=r.g_camera.m_zoom,t.translate(-r.g_camera.m_center.x,-r.g_camera.m_center.y),this.m_test&&this.m_test.Step(this.m_settings),n.Test.particleParameter.Changed(i);let s=a.g_testEntries[this.m_test_index].name;n.Test.fullscreenUI.GetParticleParameterSelectionEnabled()&&(s+=" : ",s+=n.Test.particleParameter.GetName()),this.m_test&&this.m_test.DrawTitle(s),t.restore()}i[0]&&this.LoadTest(!0),this.UpdateTest(e)}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(22),o=i(72),n=i(73);e.g_testEntries=[new s.TestEntry("Digging",n.Digging.Create),new s.TestEntry("Hoover",o.Hoover.Create)]},function(t,e,i){"use strict";var s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(6)),n=s(i(15));class r extends n.Test{constructor(){super(),this.toTeleport=new Set,this.m_ropeDef=new o.b2RopeJointDef,this.m_rope=null;const t=o.b2Vec2.MakeArray(80),e=o.b2MakeNumberArray(80);for(let i=0;i<80;++i)t[i].Set(0,0-.25*i),e[i]=1;e[0]=0,e[1]=0,this.bodies=new Array(r.count),this.touching=new Array(r.count);for(let t=0;t<r.count;++t)this.touching[t]=new Array(1);const i=new o.b2BodyDef,s=this.m_world.CreateBody(i);{const t=new o.b2EdgeShape;t.Set(new o.b2Vec2(-50,0),new o.b2Vec2(50,0)),s.CreateFixture(t,0)}let n;{const t=new o.b2CircleShape;t.m_radius=5,t.m_p.Set(0,30);const e=new o.b2CircleShape;e.m_radius=1,e.m_p.Set(0,30);const i=new o.b2BodyDef;i.type=o.b2BodyType.b2_dynamicBody;const s=new o.b2FixtureDef;s.shape=t,s.isSensor=!0,s.filter.categoryBits=2;const r=new o.b2FixtureDef;r.filter.categoryBits=2,r.shape=e,r.isSensor=!0,(n=this.m_world.CreateBody(i)).SetGravityScale(0),this.sensor=n.CreateFixture(s),this.teleport=n.CreateFixture(r)}{const t=new o.b2CircleShape;t.m_radius=1;for(let e=0;e<r.count;++e)i.type=o.b2BodyType.b2_dynamicBody,i.position.Set(3*e-10,20),i.userData=this.touching[e],this.touching[e][0]=!1,this.bodies[e]=this.m_world.CreateBody(i),this.bodies[e].CreateFixture(t,1)}}BeginContact(t){const e=t.GetFixtureA(),i=t.GetFixtureB();let s;const o=e.GetBody(),n=i.GetBody();if(e===this.sensor?s=n.GetUserData():i===this.sensor?s=o.GetUserData():e===this.teleport&&this.bodies.includes(n)?this.toTeleport.add(n):i===this.teleport&&this.bodies.includes(o)&&this.toTeleport.add(o),s){s[0]=!0}}EndContact(t){const e=t.GetFixtureA(),i=t.GetFixtureB();let s;if(e===this.sensor?s=i.GetBody().GetUserData():i===this.sensor&&(s=e.GetBody().GetUserData()),s){s[0]=!1}}Step(t){super.Step(t),this.toTeleport.forEach(t=>{t.SetPositionXY(0,30),t.SetLinearVelocity({x:0,y:0}),this.toTeleport.delete(t)});const e=this.sensor.GetBody(),i=this.sensor.GetShape(),s=e.GetWorldPoint(i.m_p,new o.b2Vec2);this.bodies.forEach(t=>{const e=t.GetUserData();if(!e||!e[0])return;const i=t.GetPosition(),n=o.b2Vec2.SubVV(s,i,new o.b2Vec2);if(n.LengthSquared()<o.b2_epsilon_sq)return;n.Normalize();const r=o.b2Vec2.MulSV(800,n,new o.b2Vec2);t.ApplyForce(r,i)})}static Create(){return new r}}r.count=20,e.Hoover=r},function(t,e,i){"use strict";var s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(6)),n=s(i(15));class r extends n.Test{constructor(){super(),this.drawing=!1,this.destroyed=0;{const t=new o.b2BodyDef,e=this.m_world.CreateBody(t),i=new o.b2ChainShape,s=[new o.b2Vec2(-2,0),new o.b2Vec2(2,0),new o.b2Vec2(2,.1),new o.b2Vec2(-2,.1)];i.CreateLoop(s,4),e.CreateFixture(i,0)}this.m_particleSystem.SetRadius(.05),this.m_particleSystem.SetDamping(.2);{const t=new o.b2PolygonShape;t.SetAsBox(2,2);const e=new o.b2ParticleGroupDef;e.groupFlags=o.b2ParticleGroupFlag.b2_rigidParticleGroup|o.b2ParticleGroupFlag.b2_solidParticleGroup,e.position.Set(0,2),e.shape=t,e.color.Set(128,0,0,1),this.m_particleSystem.CreateParticleGroup(e)}{const t=new o.b2CircleShape;t.m_p.Set(0,3),t.m_radius=.5;const e=new o.b2ParticleGroupDef;e.shape=t,e.color.Set(0,0,1,1);const i=new o.b2Transform;i.SetIdentity(),this.m_particleSystem.DestroyParticlesInShape(t,i),this.m_particleSystem.CreateParticleGroup(e)}}spawnWater(){const t=new o.b2CircleShape;t.m_p.Set(0,3.5),t.m_radius=.1;const e=new o.b2ParticleGroupDef;e.shape=t,e.color.Set(0,0,1,1);const i=new o.b2Transform;i.SetIdentity(),this.m_particleSystem.DestroyParticlesInShape(t,i);const s=this.m_particleSystem.CreateParticleGroup(e);this.destroyed-=s.GetParticleCount()}GetDefaultViewZoom(){return.1}MouseDown(){this.drawing=!0}MouseUp(){this.drawing=!1}MouseMove(t){if(super.MouseMove(t),this.drawing){const e=new o.b2CircleShape;e.m_p.Copy(t),e.m_radius=.05;const i=o.b2Transform.IDENTITY;this.destroyed+=this.m_particleSystem.DestroyParticlesInShape(e,i)}}static Create(){return new r}Step(t){super.Step(t),this.destroyed>0&&this.spawnWater()}}e.Digging=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,